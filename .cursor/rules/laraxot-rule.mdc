---
description: Regole e best practices per lo sviluppo con Laraxot
globs: 
  - "**/*.php"
  - "**/Modules/**/*.php"
---

# Regole di Sviluppo Laraxot

## Estensioni di Classi

### Regola Fondamentale: Mai estendere direttamente le classi base di Filament o Laravel

- ❌ **NON** estendere direttamente `Filament\Resources\Resource`
- ❌ **NON** estendere direttamente `Filament\Resources\RelationManagers\RelationManager`
- ❌ **NON** estendere direttamente `Filament\Resources\Pages\ListRecords`
- ❌ **NON** estendere direttamente `Filament\Resources\Pages\CreateRecord`
- ❌ **NON** estendere direttamente `Filament\Resources\Pages\EditRecord`
- ❌ **NON** estendere direttamente `Illuminate\Database\Migrations\Migration`

### Estendere sempre le classi base personalizzate con prefisso XotBase

- ✅ Estendere `Modules\Xot\Filament\Resources\XotBaseResource`
- ✅ Estendere `Modules\Xot\Filament\Resources\RelationManagers\XotBaseRelationManager`
- ✅ Estendere `Modules\Xot\Filament\Resources\Pages\XotBaseListRecords`
- ✅ Estendere `Modules\Xot\Filament\Resources\Pages\XotBaseCreateRecord`
- ✅ Estendere `Modules\Xot\Filament\Resources\Pages\XotBaseEditRecord`
- ✅ Estendere `Modules\Xot\Database\Migrations\XotBaseMigration`

## Metodi Specifici

### Form Schema

- ❌ **NON** usare `form(Forms\Form $form): Forms\Form`
- ✅ Usare `getFormSchema(): array`

### Table Columns

- ❌ **NON** usare array numerico in `getListTableColumns()`
- ✅ Usare array associativo con chiavi stringa in `getListTableColumns()`

```php
// CORRETTO
public function getListTableColumns(): array
{
    return [
        'id' => TextColumn::make('id_socio'),
        'nome' => TextColumn::make('nome'),
    ];
}
```

## Traduzioni

- ❌ **NON** usare `->label('Etichetta')` sui componenti
- ✅ Usare file di traduzione con struttura espansa

```php
// File di traduzione
return [
    'fields' => [
        'nome' => [
            'label' => 'Nome',
            'tooltip' => 'Nome del cliente',
            'placeholder' => 'Inserisci il nome'
        ],
    ],
];
```

## Namespace e Import

- ✅ Verificare la struttura del namespace prima di importare classi
- ✅ Usare alias descrittivi per evitare conflitti
- ✅ Importare esplicitamente le classi necessarie

```php
// CORRETTO
use Modules\Brain\Models\Socio as BrainSocio;
use Modules\Broker\app\Models\Socio as BrokerSocio;
```

## PHPStan e Tipizzazione

- ✅ Documentare tutte le proprietà con PHPDoc
- ✅ Specificare i tipi di ritorno per tutti i metodi
- ✅ Utilizzare strict_types quando possibile

```php
/**
 * @param array<string, mixed> $data
 * @return array<string, mixed>
 */
protected function mutateFormDataBeforeCreate(array $data): array
{
    return $data;
}
```

## Migrazioni

- ✅ Utilizzare `tableCreate()` e `tableUpdate()` forniti da `XotBaseMigration`
- ✅ Utilizzare `updateTimestamps()` per aggiungere i campi standard

```php
public function up(): void
{
    $this->tableCreate(
        function (Blueprint $table): void {
            $table->id();
            $table->string('nome');
            // Altri campi...
        }
    );
    
    $this->updateTimestamps(table: $table, hasSoftDeletes: true);
}
```

## Errori Comuni da Evitare

1. Riferimenti a colonne inesistenti nel database
2. Incompatibilità nella firma dei metodi
3. Istanziazione diretta di classi astratte
4. Namespace duplicati o conflittuali
5. Mancanza di tipizzazione nei metodi e proprietà
