---
description: 
globs: 
alwaysApply: false
---
---
description: Regole per il modulo Predict
globs: ["Modules/Predict/**/*"]
alwaysApply: true
---

# Regole per il Modulo Predict

## Struttura del Modulo
- Il modulo Predict estende il modulo Blog per la gestione degli articoli
- Utilizza il trait HasParent per l'ereditarietà polimorfica
- Mantiene una connessione dedicata al database 'predict'

## Modelli e Relazioni
- Il modello Predict estende Article
- Gestisce relazioni con Rating, Orders e altri modelli correlati
- Supporta soft deletes e timestamps

## Actions
- Utilizza Actions per la logica di business
- Implementa QueueableAction per operazioni asincrone
- Segue il pattern Command per le operazioni di modifica

## Eventi e Projectors
- Utilizza Spatie Event Sourcing per la gestione degli eventi
- Implementa Projectors per la proiezione degli eventi
- Mantiene la coerenza dei dati attraverso gli eventi

## Validazione e Tipizzazione
- Utilizza strict_types=1
- Implementa tipizzazione completa per metodi e proprietà
- Utilizza Webmozart Assert per validazioni runtime
- Rispetta le regole PHPStan livello 3

## Best Practices
- Segue le convenzioni PSR-12
- Utilizza Data Objects per strutture dati complesse
- Implementa interfacce per il disaccoppiamento
- Preferisce l'iniezione delle dipendenze

## Regole PHPStan Livello 3
1. **Controlli Avanzati**
   - Verifica dei tipi di ritorno nullable
   - Controllo delle chiamate a metodi su tipi union
   - Validazione delle proprietà dichiarate
   - Analisi dei type-hints generici

2. **Gestione Null**
   - Controllo esplicito dei valori null
   - Utilizzo di operatori di null-safe
   - Documentazione dei tipi nullable

3. **Type Assertions**
   - Uso di Webmozart Assert
   - Validazione dei tipi a runtime
   - Documentazione delle asserzioni

# Regole di Cursor per il Progetto

## Regole Generali

1. **Tipizzazione**
   - Evitare l'uso di `mixed` come tipo di ritorno
   - Specificare sempre i tipi di ritorno espliciti per i metodi
   - Utilizzare tipi specifici per le proprietà dei modelli
   - Rispettare i contratti nelle implementazioni delle interfacce

2. **Documentazione**
   - Fornire annotazioni PHPDoc complete per tutti i metodi
   - Documentare i tipi di ritorno e i parametri
   - Includere descrizioni chiare per le proprietà dei modelli

3. **Consistenza**
   - Mantenere un approccio coerente alla gestione dei tipi
   - Seguire le convenzioni di naming stabilite
   - Rispettare la struttura delle directory del progetto

## Regole Specifiche per Moduli

### Blog Module
- Implementare correttamente il contratto `HasTranslationsContract`
- Utilizzare tipi specifici per le proprietà dei modelli
- Evitare l'uso di `mixed` nei metodi pubblici
- Documentare tutti i metodi con PHPDoc completi

### Lang Module
- Mantenere la compatibilità con i contratti di traduzione
- Utilizzare tipi specifici per i valori di traduzione
- Documentare le implementazioni delle interfacce

## Regole di Codifica

1. **Metodi**
   ```php
   /**
    * @param string $key
    * @param string $locale
    * @param bool $useFallbackLocale
    * @return array|string|int|null
    */
   public function getTranslation(string $key, string $locale, bool $useFallbackLocale = true): array|string|int|null
   ```

2. **Proprietà**
   ```php
   /**
    * @property string $content_html
    * @property string|null $featured_image_url
    */
   ```

3. **Controller**
   ```php
   /**
    * @return \Illuminate\View\View|\Illuminate\Http\RedirectResponse
    */
   public function show(string $id): \Illuminate\View\View|\Illuminate\Http\RedirectResponse
   ```

## Validazione

- Eseguire PHPStan a livello 3 prima del commit
- Risolvere tutti gli errori di tipizzazione
- Mantenere la documentazione aggiornata
- Verificare la compatibilità dei contratti
