---
description: Regole e best practices per l'utilizzo di PHPStan nel progetto
globs: ["**/*.php"]
alwaysApply: true
---

# Regole PHPStan

## Livelli di Analisi

### Progressione dei Livelli
- Iniziare dal livello 1 per i nuovi moduli
- Progredire gradualmente verso livelli superiori
- Mirare al livello 9 come obiettivo finale per tutto il codice
- Documentare i problemi non risolvibili con annotazioni @phpstan-ignore

### Livello 0
- Errori di sintassi di base
- Chiamate a funzioni/metodi inesistenti
- Accesso a proprietà inesistenti

### Livello 1
- Controllo dei tipi di base
- Verifica dell'esistenza di classi
- Controllo dei parametri obbligatori nelle chiamate di funzione

### Livello 2
- Controllo dei tipi di ritorno
- Controllo dei tipi di parametri
- Verifica dell'accesso a proprietà e metodi statici

### Livello 3
- Controllo dei tipi di ritorno nullable
- Verifica delle chiamate a metodi su tipi union
- Validazione delle proprietà dichiarate

### Livello 4
- Controllo dei tipi generici
- Verifica dei tipi di array
- Controllo delle chiamate a metodi su tipi intersection

### Livello 5
- Controllo dei dead code
- Verifica delle condizioni sempre true/false
- Controllo delle proprietà non inizializzate

### Livello 6
- Controllo dei tipi di ritorno dei metodi magici
- Verifica dei tipi di parametri dei metodi magici
- Controllo delle chiamate a metodi su tipi generici

### Livello 7
- Controllo dei tipi di ritorno dei metodi di interfacce
- Verifica dei tipi di parametri dei metodi di interfacce
- Controllo delle implementazioni di interfacce

### Livello 8
- Controllo completo dei tipi generici
- Verifica delle chiamate a metodi su tipi template
- Controllo delle proprietà readonly

### Livello 9 (Max)
- Controllo completo di tutti i tipi
- Verifica di tutte le condizioni possibili
- Controllo completo del codice morto

## Best Practices

### Annotazioni
- Utilizzare le annotazioni PHPDoc per tutti i metodi e le proprietà
- Specificare i tipi di ritorno e i tipi di parametri
- Utilizzare le annotazioni @var, @param, @return
- Utilizzare le annotazioni @template per i tipi generici
- Utilizzare le annotazioni @phpstan-ignore solo quando necessario

### Tipi Generici
- Utilizzare i tipi generici per le collezioni
- Specificare i tipi di array con la sintassi array<TKey, TValue>
- Utilizzare le annotazioni @template per le classi generiche
- Specificare i tipi di ritorno generici con @return
- Utilizzare le annotazioni @phpstan-param e @phpstan-return per i tipi generici complessi

### Gestione degli Errori
- Utilizzare il baseline per gestire gli errori esistenti
- Aggiornare il baseline solo quando necessario
- Documentare gli errori ignorati con commenti
- Utilizzare le annotazioni @phpstan-ignore-line per ignorare errori specifici
- Utilizzare le annotazioni @phpstan-ignore-next-line per ignorare errori sulla riga successiva

### Configurazione
- Utilizzare il file phpstan.neon per la configurazione
- Specificare i path da analizzare
- Configurare i livelli per ogni modulo
- Utilizzare i parametri per personalizzare l'analisi
- Utilizzare le estensioni PHPStan per funzionalità aggiuntive

### Workflow
- Eseguire PHPStan prima di ogni commit
- Utilizzare il comando `php artisan phpstan` per l'analisi
- Correggere gli errori in ordine di livello
- Aggiornare il baseline solo dopo aver corretto tutti gli errori possibili
- Documentare gli errori non risolvibili

## Regole Specifiche per il Progetto

### Modelli
- Utilizzare le annotazioni @property per le proprietà dinamiche
- Specificare i tipi di relazioni con le annotazioni @property-read
- Utilizzare le annotazioni @method per i metodi dinamici
- Specificare i tipi di ritorno per i metodi di query
- Utilizzare le annotazioni @mixin per i trait

### Controller
- Specificare i tipi di ritorno per tutti i metodi
- Utilizzare le annotazioni @param per i parametri
- Specificare i tipi di request con le annotazioni @param
- Utilizzare le annotazioni @return per i tipi di response
- Documentare le eccezioni con @throws

### Service Classes
- Specificare i tipi di ritorno per tutti i metodi
- Utilizzare le annotazioni @param per i parametri
- Specificare i tipi di dipendenze con le annotazioni @param
- Utilizzare le annotazioni @return per i tipi di ritorno
- Documentare le eccezioni con @throws

### Repository
- Specificare i tipi di ritorno per tutti i metodi
- Utilizzare le annotazioni @param per i parametri
- Specificare i tipi di modelli con le annotazioni @template
- Utilizzare le annotazioni @return per i tipi di ritorno
- Documentare le eccezioni con @throws