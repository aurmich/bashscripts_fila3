<?php

declare(strict_types=1);

namespace Modules\Progressioni\Filament\Resources\SchedeResource\Pages;

use Filament\Actions;
use Filament\Tables\Table;
use Illuminate\Support\Arr;
use Filament\Tables\Actions\Action;
use Filament\Forms\Components\Select;
use Filament\Tables\Actions\EditAction;
use Modules\Progressioni\Models\Schede;
use Filament\Tables\Enums\FiltersLayout;
use Filament\Resources\Pages\ListRecords;
use Filament\Tables\Filters\SelectFilter;
use Illuminate\Database\Eloquent\Builder;
use Modules\Progressioni\Actions\Populate;
use Modules\Ptv\Actions\GetValutatoriOptions;
use Modules\Ptv\Actions\FixValutatoreIdByAnno;
use Modules\Xot\Filament\Actions\Header\ExportXlsAction;
use Modules\Progressioni\Filament\Resources\SchedeResource;
use Modules\Xot\Actions\Filament\Actions\CopyFromLastYearButton;

class ListSchedes extends \Modules\Xot\Filament\Resources\Pages\XotBaseListRecords {
    protected static string $resource = SchedeResource::class;

    protected function getHeaderActions(): array {
        $anno = Arr::get($this->tableFilters, 'anno.value');

        return [
            // Actions\CreateAction::make(),
            // app(CopyFromLastYearButton::class)
            //    ->execute(Schede::class, 'anno', $anno),
            ExportXlsAction::make(),
        ];
    }

     protected function getTableActions(): array {
         return [
             // Tables\Actions\ViewAction::make(),

             Action::make('compila')
                 ->label('Compila')
                 ->icon('heroicon-m-pencil-square')
                 ->url(fn ($record): string => SchedeResource::getUrl('compila', ['record' => $record])),

             // EditAction::make(),
             // Tables\Actions\EditAction::make(),
         ];
     }

    public function table(Table $table): Table {
        $table = parent::table($table);
        $table->filters($this->getTableFilters(), layout: FiltersLayout::AboveContent)
            ->filtersFormColumns(1)
           //  ->filtersFormWidth('4xl')
           // ->actions($this->getTableActions())
           ->persistFiltersInSession()
           ->actions($this->getTableActions())
        ;

        return $table;
    }

    protected function getTableFilters(): array {
        return [
            SelectFilter::make('anno/valutatore')
                ->label('anno/valutatore')
                ->form([
                    Select::make('anno')
                        ->options([
                            // '2022' => '2022',
                            '2023' => '2023',
                        ])
                        ->reactive(),

                    Select::make('valutatore_id')
                        ->label('valutatore')
                        ->options(static fn (callable $get, callable $set) => app(GetValutatoriOptions::class)
                            ->execute('Progressioni', $get('anno'))),
                ])

                ->query(static function (Builder $query, array $data) {
                    if (null == $data['anno'] /* || null == $data['valutatore_id'] */) {
                        return $query->where('id', 0);
                    }
                    app(Populate::class)->execute($data);
                    app(FixValutatoreIdByAnno::class)->execute('Progressioni', 'Schede', $data['anno']);

                    $query = $query->where($data);

                    return $query;
                })

                ->columns(4),
        ];
    }
}
