<?php

declare(strict_types=1);

namespace Modules\Progressioni\Actions;

// use Illuminate\Support\Arr;
use Carbon\Carbon;
use Illuminate\Support\Str;
// -------- models -----------
use Modules\Progressioni\Models\CriteriEsclusione;
use Modules\Progressioni\Models\CriteriOption;
use Modules\Progressioni\Models\Progressioni as Schede;

// -------- services --------
// use Modules\Xot\Services\ArrayService;

class TrovaEsclusiAction {
    public int $year;

    public function execute(int $year): string {
        // $data = ($this->rows->get()->toArray());

        if ('' === $year) {
            return '<h3>Selezionare un anno</h3>';
        }
        $this->year = $year;

        $criteri_esclusione = CriteriEsclusione::where('anno', $year)
            ->get()
            ->pluck('value', 'name')
            ->all();
        // dddx($criteri_esclusione);
        $criteri_option = CriteriOption::where('anno', $year)
            ->get()
            ->pluck('value', 'name')
            ->all();

        $schede = Schede::where('anno', $year)->get();
        foreach ($schede as $scheda) {
            $parz = [
                'scheda' => $scheda,
                'criteri_esclusione' => $criteri_esclusione,
                'criteri_option' => $criteri_option,
            ];
            [$ha_diritto, $motivo] = $this->criteriScheda($parz, $year);
            $scheda->motivo = $motivo;
            $scheda->ha_diritto = $ha_diritto;
            $scheda->save();
        }

        return '<h3>+Fatto</h3>';
    }

    public function checkScheda(array $params, int $year): array {
        if (! isset($params['criteri_esclusione'])) {
            $params['criteri_esclusione'] = CriteriEsclusione::where('anno', $year)
                ->get()
                ->pluck('value', 'name')
                ->all();
        }

        if (! isset($params['criteri_option'])) {
            $params['criteri_option'] = CriteriOption::where('anno', $year)
                ->get()
                ->pluck('value', 'name')
                ->all();
        }

        $scheda = $params['scheda'];
        [$ha_diritto, $motivo] = $this->criteriScheda($params, $year);
        $scheda->motivo = $motivo;
        $scheda->ha_diritto = $ha_diritto;
        $scheda->save();

        return [$ha_diritto, $motivo];
    }

    public function criteriScheda(array $params, int $year): array {
        extract($params);
        $motivo = '';
        $ha_diritto = 1;
        if (! isset($criteri_esclusione)) {
            throw new \Exception('criteri_esclusione is not set');
        }

        if (! isset($criteri_option)) {
            throw new \Exception('criteri_option is not set');
        }

        if (! isset($scheda)) {
            throw new \Exception('scheda is not set');
        }

        foreach ($criteri_esclusione as $k => $v) {
            $func = 'check'.Str::studly($k);
            $parz = $criteri_option;
            $parz[$k] = $v;
            $parz['date_max'] = $year * 10000 + 1231;
            $parz['date_min'] = $year * 10000 + 101;
            // if (! is_callable($this, $func)) {
            if (method_exists($this, $func)) {
                $msg = $this->$func($parz, $scheda);
            } else {
                $msg = 'func ['.self::class.']['.$func.'] not exists ['.__LINE__.']['.__FILE__.']';
            }

            if ('' !== $msg) {
                $motivo .= ', '.$msg;
                $ha_diritto = 0;
            }
        }

        return [$ha_diritto, $motivo];
    }

    public function criteriOptions(int $year): array {
        return CriteriOption::where('anno', $year)
            ->get()
            ->pluck('value', 'name')
            ->all();
    }

    /**
     * Undocumented function.
     */
    public function check(string $criterio_name, mixed $criterio_value, object $scheda, int $year): string {
        $func = 'check'.Str::studly($criterio_name);
        $parz = $this->criteriOptions($year);
        $parz[$criterio_name] = $criterio_value;
        $parz['date_max'] = $year * 10000 + 1231;
        $parz['date_min'] = $year * 10000 + 101;

        return $this->$func($parz, $scheda);
    }

    public function checkMinGgRuolo(array $parz, object $scheda): string {
        extract($parz);
        if (! isset($min_gg_ruolo)) {
            throw new \Exception('min_gg_ruolo is not set');
        }

        if ($scheda->gg_ruolo < $min_gg_ruolo) {
            return 'no min gg_ruolo ['.$scheda->gg_ruolo.']';
        }

        return '';
    }

    public function checkMinPerfIndCountLast3Years(array $parz, object $scheda): string {
        extract($parz);
        if (! isset($min_perf_ind_count_last_3_years)) {
            throw new \Exception('min_perf_ind_count_last_3_years is not set');
        }

        if ($scheda->perf_ind_count_last_3_years < $min_perf_ind_count_last_3_years) {
            return 'no min_perf_ind_count_last_3_years ['.$scheda->perf_ind_count_last_3_years.']';
        }

        return '';
    }

    public function checkMinGgPosiz1InSede(array $parz, object $scheda): string {
        extract($parz);
        if (! isset($min_gg_posiz_1_in_sede)) {
            throw new \Exception('min_gg_posiz_1_in_sede is not set');
        }

        if ($scheda->gg_posiz_1_in_sede < $min_gg_posiz_1_in_sede) {
            return 'no min_gg_posiz_1_in_sede ['.$scheda->gg_posiz_1_in_sede.']';
        }

        return '';
    }

    public function checkMinGgCatecoPosfunNoAsz(array $parz, object $scheda): string {
        extract($parz);
        if (! isset($min_gg_cateco_posfun_no_asz)) {
            throw new \Exception('min_gg_cateco_posfun_no_asz is not set');
        }

        if ($scheda->gg_cateco_posfun_no_asz < $min_gg_cateco_posfun_no_asz) {
            return ' no min_gg_cateco_posfun_no_asz[my:'.$scheda->gg_cateco_posfun_no_asz.'][min:'.$min_gg_cateco_posfun_no_asz.']';
        }

        return '';
    }

    public function checkMinGgCatecoPosfunInSedeNoAsz(array $parz, object $scheda): string {
        extract($parz);
        /*
        dddx(
            [
                'gg_cateco_posfun_in_sede_no_asz' => $scheda->gg_cateco_posfun_in_sede_no_asz,
            ]
        );
        */
        if (! isset($min_gg_cateco_posfun_in_sede_no_asz)) {
            throw new \Exception('min_gg_cateco_posfun_in_sede_no_asz is not set');
        }

        if ($scheda->gg_cateco_posfun_in_sede_no_asz < $min_gg_cateco_posfun_in_sede_no_asz) {
            return ' no min_gg_cateco_posfun_in_sede_no_asz [my:'.$scheda->gg_cateco_posfun_in_sede_no_asz.'][min:'.$min_gg_cateco_posfun_in_sede_no_asz.']';
        }

        return '';
    }

    public function checkMinGgCatecoPosfunLavoratiInSede(array $parz, object $scheda): string {
        extract($parz);

        return '';
    }

    public function checkPresentiIlGiorno(array $parz, object $scheda): string {
        extract($parz);

        return '';
    }

    // ---

    public function checkListaPropro(array $parz, object $scheda): string {
        extract($parz);
        if (! isset($lista_propro)) {
            throw new \Exception('lista_propro is not set');
        }

        $propro = $scheda->propro;
        if (\in_array($propro, explode(',', (string) $lista_propro), true)) {
            return 'no propro';
        }

        return '';
    }

    public function checkListaPosiz(array $parz, object $scheda): string {
        extract($parz);
        if (! isset($lista_posiz)) {
            throw new \Exception('lista_posiz is not set');
        }

        $posiz = $scheda->posiz;
        if (\in_array($posiz, explode(',', (string) $lista_posiz), true)) {
            return 'no posiz';
        }

        return '';
    }

    public function checkListaProproPosfun(array $parz, object $scheda): string {
        extract($parz);
        if (! isset($lista_propro_posfun)) {
            throw new \Exception('lista_propro_posfun is not set');
        }

        $propro_posfun = $scheda->propro.'-'.$scheda->posfun;
        if (\in_array($propro_posfun, explode(',', (string) $lista_propro_posfun), true)) {
            return 'no propro posfun';
        }

        return '';
    }

    public function checkDisci(array $parz, object $scheda): string {
        extract($parz);
        if (! isset($disci)) {
            throw new \Exception('disci is not set');
        }

        if (\in_array($scheda->disci1, explode(',', (string) $disci), true)) {
            return 'no disci';
        }

        return '';
    }

    public function checkListaAszTipCodEsclusoSubito(array $parz, object $scheda): string {
        extract($parz);

        if (! isset($lista_asz_tip_cod_escluso_subito)) {
            throw new \Exception('lista_asz_tip_cod_escluso_subito is not set');
        }

        if (! isset($data_presenza_al)) {
            throw new \Exception('$data_presenza_al is not set');
        }

        if (! isset($min_gg_asz_tip_cod_escluso_subito)) {
            throw new \Exception('min_gg_asz_tip_cod_escluso_subito is not set');
        }

        $asz_al = Carbon::parse($data_presenza_al)->format('Ymd');
        $asz_dal = Carbon::parse($data_presenza_al)
            ->subDays($min_gg_asz_tip_cod_escluso_subito)
            ->format('Ymd');

        $tmp = $scheda->asz()
            ->ofRangeDate($asz_dal, $asz_al)
            ->select('asztip', 'aszcod')
            ->distinct()
            ->get()
            ->toArray();
        $tmp1 = collect($tmp)->map(static fn ($item): string => $item['asztip'].'-'.$item['aszcod'])->intersect(explode(',', (string) $lista_asz_tip_cod_escluso_subito))->count();

        if (23698 === $scheda->matr) {
            // dddx(explode(',',$lista_asz_tip_cod_escluso_subito));
            // dddx($tmp1);
        }

        if ($tmp1 > 0) {
            return 'asz_tip_cod_escluso_subito';
        }

        return '';
    }

    // ---

    public function checkMinGgPropro(array $parz, object $scheda): string {
        extract($parz);

        return '';
    }

    public function checkMinGgProproPosfun(array $parz, object $scheda): string {
        extract($parz);

        return '';
    }

    public function checkMinGgAnno(array $parz, object $scheda): string {
        extract($parz);
        if (! isset($min_gg_anno)) {
            throw new \Exception('min_gg_anno is not set');
        }

        // dddx($scheda->gg_presenza_anno);
        // dddx($scheda->gg_assenza_anno);
        $eff = $scheda->gg_presenza_anno - $scheda->gg_assenza_anno;
        if ($eff < $min_gg_anno) {
            return 'no min gg_anno ['.$eff.']';
        }

        return '';
    }

    public function checkMinGgTempoDeterminato(array $parz, object $scheda): string {
        extract($parz);

        // dddx($scheda->gg_tempo_determinato);
        return '';
    }

    public function checkMinGgEffettuati(array $parz, object $scheda): string {
        extract($parz);

        return '';
    }

    public function checkNoposizList(array $parz, object $scheda): string {
        extract($parz);
        if (! isset($noposiz_list)) {
            throw new \Exception('noposiz_list is not set');
        }

        $noposiz_arr = explode(',', (string) $noposiz_list);
        if (\in_array($scheda->posiz,  $noposiz_arr, false)) {
            return 'no_posiz ['.$scheda->posiz.']';
        }

        return '';
    }

    public function checkNoproproList(array $parz, object $scheda): string {
        extract($parz);
        if (! isset($nopropro_list)) {
            throw new \Exception('nopropro_list is not set');
        }

        $arr = explode(',', (string) $nopropro_list);
        if (\in_array($scheda->propro,  $arr, false)) {
            return 'no_propro ['.$scheda->propro.']';
        }

        return '';
    }

    public function checkNoposfunList(array $parz, object $scheda): string {
        extract($parz);
        if (! isset($noposfun_list)) {
            throw new \Exception('noposfun_list is not set');
        }

        $arr = explode(',', (string) $noposfun_list);
        if (\in_array($scheda->posfun,  $arr, false)) {
            return 'no_posfun ['.$scheda->posfun.']';
        }

        return '';
    }

    public function checkNodisci1List(array $parz, object $scheda): string {
        extract($parz);
        if (! isset($nodisci1_list)) {
            throw new \Exception('nodisci1_list is not set');
        }

        $arr = explode(',', (string) $nodisci1_list);
        if (\in_array($scheda->disci1,  $arr, false)) {
            return 'no_disci1 ['.$scheda->disci1.']';
        }

        return '';
    }

    public function checkMaxGgAssenzeAnno(array $parz, object $scheda): string {
        extract($parz);
        if (! isset($max_gg_assenze_anno)) {
            throw new \Exception('max_gg_assenze_anno is not set');
        }

        if ($scheda->gg_assenza_anno > $max_gg_assenze_anno) {
            return 'max gg assenze anno ['.$scheda->gg_assenza_anno.']>['.$max_gg_assenze_anno.']';
        }

        return '';
    }

    public function checkDateMinAssunz(array $parz, object $scheda): string {
        extract($parz);

        if (! isset($date_min_assunz)) {
            throw new \Exception('date_min_assunz is not set');
        }

        $last_data_assunz = $scheda->last_data_assunz;
        /*
        if (! is_object($last_data_assunz)) {
            $last_data_assunz = Carbon::parse($last_data_assunz);
        }
        if (! is_object($date_min_assunz)) {
            $date_min_assunz = Carbon::parse($date_min_assunz);
        }
        */
        // dddx($last_data_assunz);
        if ($last_data_assunz > $date_min_assunz) {
            return 'date min assunz ['.$scheda->last_data_assunz.']>['.$date_min_assunz.'][2]';
        }

        return '';
    }
}
