<?php

declare(strict_types=1);

namespace Modules\Progressioni\Models\Traits;

// ----- models------
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\Relations\HasOne;
use Illuminate\Support\Collection;
use Modules\Performance\Models\Individuale as PerformanceIndividuale;
use Modules\Progressioni\Models\Assenze;
use Modules\Progressioni\Models\CategoriaPropro;
use Modules\Progressioni\Models\CodiciAspettative;
use Modules\Progressioni\Models\Coeff;
use Modules\Progressioni\Models\CriteriEsclusione;
use Modules\Progressioni\Models\CriteriOption;
use Modules\Progressioni\Models\CriteriPrecedenza;
use Modules\Progressioni\Models\CriteriValutazione;
use Modules\Progressioni\Models\EsclusiExtra;
use Modules\Progressioni\Models\MaxCatecoPosfunAnno;
use Modules\Progressioni\Models\Message;
use Modules\Progressioni\Models\MyLog;
use Modules\Progressioni\Models\Pesi;
use Modules\Progressioni\Models\SchedaCriteri;
use Modules\Progressioni\Models\Schede;
use Modules\Progressioni\Models\StabiDirigente;
use Modules\Progressioni\Models\StipendioTabellare;
use Modules\Progressioni\Models\Valutatore;
use Modules\Sigma\Models\Anag;
use Modules\Sigma\Models\Asz00f;
use Modules\Sigma\Models\Asz00k1;

/**
 * Modules\Progressioni\Models\Traits\ProgressioniRelationshipTrait.
 */
trait ProgressioniRelationshipTrait {
    // ------------------ relationship -----------------
    public function categoriaPropro(): HasOne {
        return $this->hasOne(CategoriaPropro::class, 'anno', 'anno')
            ->whereRaw('find_in_set("'.$this->propro.'",lista_propro)');
    }

    public function mails(): HasMany {
        $valutatore_id = request()->input('valutatore_id', '');
        $valutatore_id = 1;

        $this->anno = (int) request()->input('anno', date('Y'));

        return $this->hasMany(Schede::class, 'anno', 'anno')
            ->where('valutatore_id', $valutatore_id)
            ->where('ha_diritto', 1);
    }

    public function criteriEsclusione(): HasMany {
        return $this->hasMany(CriteriEsclusione::class, 'anno', 'anno');
    }

    public function criteriOptions(): HasMany {
        return $this->hasMany(CriteriOption::class, 'anno', 'anno');
    }

    public function messages(): HasMany {
        return $this->hasMany(Message::class, 'anno', 'anno');
    }

    public function esclusoExtra(): HasOne {
        return $this->hasOne(EsclusiExtra::class, 'anno', 'anno')->where('ente', $this->ente)->where('matr', $this->matr);
    }

    public function isEsclusoExtra(): bool {
        return $this->esclusoExtra()->exists();
    }

    /*
    public function anag():HasOne {
        return $this->hasOne(Anag::class,'matr','matr')->where('ente',$this->ente);
    }
    */
    public function schedaCriteri(): HasMany {
        return $this->hasMany(SchedaCriteri::class, 'anno', 'anno');
    }

    public function criteriValutazione(): HasMany {
        return $this->hasMany(CriteriValutazione::class, 'anno', 'anno');
    }

    public function criteriPrecedenza(): HasMany {
        return $this->hasMany(CriteriPrecedenza::class, 'anno', 'anno');
    }

    public function coeff(): HasMany {
        return $this->hasMany(Coeff::class, 'anno', 'anno');
    }

    public function asz00fs(): HasMany {
        return $this->hasMany(Asz00f::class, 'matr', 'matr')
            ->where('ente', $this->ente)
            ->where('aszann', '')
            ->ofYear((int) $this->anno);
    }

    public function righeDoppie(): HasMany {
        return $this->hasMany(Schede::class, 'anno', 'anno')
            ->where('matr', $this->matr)
            // ->where('id', '!=', $this->id)
            ->orderBy('dal')
        ;
    }

    public function performanceIndividuale(): HasMany {
        // / senza Anno .. perche' devo relazionarmi con gli ultimi 3 anni
        return $this->hasMany(PerformanceIndividuale::class, 'matr', 'matr')
            ->where('ente', $this->ente);
    }

    public function stipendioTabellare(): HasOne {
        return $this->hasOne(StipendioTabellare::class, 'propro', 'propro')
            ->where('posfun', $this->posfunval)
            ->where('anno', $this->anno)
            ->orderBy('ptime', 'desc'); // per avere il dato senza arrotondamenti se possibile
    }

    public function stipendioTabellareUp(): HasOne {
        return $this->hasOne(StipendioTabellare::class, 'propro', 'propro')
            ->where('posfun', (int) $this->posfunval + 1)
            ->where('anno', (int) $this->anno)
            ->orderBy('ptime', 'desc'); // per avere il dato senza arrotondamenti se possibile
    }

    public function myLogs(): HasMany {
        return $this->hasMany(MyLog::class, 'id_tbl', 'id')
            ->where('tbl', $this->getTable());
    }

    public function mailInviate(): HasMany {
        return $this->hasMany(MyLog::class, 'id_tbl', 'id')
            ->where('tbl', $this->getTable())
            ->where('note', 'sendMail')
        ;
    }

    public function maxCatecoPosfun(): HasOne {
        return $this->hasOne(MaxCatecoPosfunAnno::class, 'anno', 'anno')
            ->where('cateco', $this->categoria_ecoval)
            ->where('posfun', $this->posfunval)

        ;
    }

    public function allStabiRepars(): Collection {
        return $this->hasMany(StabiDirigente::class, 'anno', 'anno')
            ->pluck('nome_diri', 'id');
    }

    public function stabiDirigente(): HasOne {
        $row = $this->hasOne(StabiDirigente::class, 'stabi', 'stabi')
            ->where('repar', $this->repar)
            ->where('anno', $this->anno);
        if (null === $row->first()) {
            // $params = getRouteParameters();
            // extract($params);
            $tmp = StabiDirigente::firstOrCreate(['stabi' => $this->stabi, 'repar' => $this->repar, 'anno' => $this->anno]);
            $row = $this->hasOne(StabiDirigente::class, 'stabi', 'stabi')
                ->where('repar', $this->repar)
                ->where('anno', $this->anno);
        }

        return $row;
    }

    public function pesi(): HasOne {
        return $this->hasOne(Pesi::class, 'anno', 'anno')
            ->whereRaw('find_in_set("'.$this->propro.'",lista_propro)');
    }

    public function valutatore(): BelongsTo {
        // return $this->belongsTo(Valutatore::class);
        return $this->belongsTo(StabiDirigente::class, 'valutatore_id', 'id');
        // return $this->hasOne(StabiDirigente::class, 'id', 'valutatore_id');
    }

    public function valutatoreDefault(): HasOne {
        return $this->hasOne(StabiDirigente::class, 'stabi', 'stabi')
            ->where('repar', 0)
            ->where('anno', $this->anno);
    }

    /*
    public function codiciAspettative():\Illuminate\Database\Eloquent\Relations\HasMany {
        return $this->hasMany(CodiciAspettative::class, 'anno', 'anno');
        //return CodiciAspettative::where('anno',$this->anno);
    }
    */

    /**
     * Undocumented function.
     */
    public function assenze(): HasMany {
        return $this->hasMany(Assenze::class, 'anno', 'anno');
        // return CodiciAspettative::where('anno',$this->anno);
    }

    

    /**
     * Undocumented function.
     *
     * @return HasMany<Asz00k1>
     */
    public function asz():HasMany {
        $tbl = app(Asz00k1::class)->getTable();

        return $this->hasMany(Asz00k1::class, 'matr', 'matr')
            ->where($tbl.'.ente', $this->ente)
            ->whereRaw($tbl.'.aszann=""')
        ;
    }

    

    
    public function aszEff():HasMany
    {
        $lista_codici_aspettative=$this->listaCodiciAspettative();
        $asz=$this->asz()
                    ->whereRaw('find_in_set(concat(asztip,"-",aszcod),"'.$lista_codici_aspettative.'")');
        //$asz->ddRawSql();
        return $asz;
    }

}
