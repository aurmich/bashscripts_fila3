<?php

declare(strict_types=1);

namespace Modules\Progressioni\Models;

use Carbon\Carbon;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Database\Eloquent\Model;
use Modules\Performance\Models\Individuale;
use Modules\Ptv\Models\Contracts\SchedaContract;
use Modules\Progressioni\Models\Traits\ConvertedTrait;
use Modules\Progressioni\Models\Traits\ProgressioniTrait;
use Modules\Sigma\Actions\MassUpdateCategoriaEcoAction;
use Modules\Sigma\Actions\MassUpdateCognomeNomeAction;
use Modules\Sigma\Actions\MassUpdatePosizTxtAction;
use Modules\Sigma\Actions\MassUpdateStabiTxtReparTxtAction;
use Modules\Sigma\Models\Ana02f;
use Modules\Sigma\Models\Ana10f;
// ------ Traits -------
use Modules\Sigma\Models\Anag;
use Modules\Sigma\Models\Asz00f;
// -------models---------
use Modules\Sigma\Models\Asz00k1;
use Modules\Sigma\Models\Qua00f;
use Modules\Sigma\Models\Qua03f;
use Modules\Sigma\Models\Rep00f;
// --------services ------
use Modules\Sigma\Models\Repart;
use Modules\Sigma\Models\Sto00f;
use Modules\Sigma\Models\Tqu00f;
use Modules\Sigma\Models\Traits\SchedaTrait;
use Modules\Sigma\Models\Traits\SigmaModelTrait;
use Modules\Sigma\Models\Wstr01lx;
use Modules\Xot\Services\HtmlService;
use Validator;

// ----- traits -----
/**
 * Modules\Progressioni\Models\Schede.
 *
 * @property int                                                              $id
 * @property string                                                           $post_type
 * @property string|null                                                      $scheda_type
 * @property int|null                                                         $ente
 * @property int|null                                                         $matr
 * @property string|null                                                      $cognome
 * @property string|null                                                      $nome
 * @property string|null                                                      $email
 * @property int|null                                                         $propro
 * @property int|null                                                         $posfun
 * @property string|null                                                      $categoria_eco
 * @property int|null                                                         $posiz
 * @property string|null                                                      $posiz_txt
 * @property int|null                                                         $clafun
 * @property int|null                                                         $stabi
 * @property string|null                                                      $stabi_txt
 * @property int|null                                                         $repar
 * @property string|null                                                      $repar_txt
 * @property int|null                                                         $stabival
 * @property int|null                                                         $reparval
 * @property string|null                                                      $indir
 * @property int|null                                                         $gg_in_sede
 * @property int|null                                                         $n_gg_in_sede
 * @property int|null                                                         $gg_fuori_sede
 * @property int|null                                                         $n_gg_fuori_sede
 * @property int|null                                                         $gg_aspettative_in_sede
 * @property int|null                                                         $gg_aspettative_fuori_sede
 * @property int|null                                                         $gg_posiz_1_in_sede
 * @property int|null                                                         $gg_presenza_anno
 * @property int|null                                                         $gg_assenza_anno
 * @property int|null                                                         $gg_asz_tip_cod_escluso_subito
 * @property int|null                                                         $gg_anno
 * @property int|null                                                         $gg_cateco_posfun
 * @property int|null                                                         $rep003
 * @property int|null                                                         $disci1
 * @property string|null                                                      $disci1_txt
 * @property int|null                                                         $rep2kd
 * @property int|null                                                         $rep2ka
 * @property int|null                                                         $qua2kd
 * @property int|null                                                         $qua2ka
 * @property int|null                                                         $dal
 * @property int|null                                                         $al
 * @property int|null                                                         $gg
 * @property int|null                                                         $anno
 * @property string|null                                                      $esperienza_acquisita
 * @property int|null                                                         $peso_esperienza_acquisita
 * @property string|null                                                      $risultati_ottenuti
 * @property string|null                                                      $peso_risultati_ottenuti
 * @property string|null                                                      $arricchimento_professionale
 * @property string|null                                                      $peso_arricchimento_professionale
 * @property string|null                                                      $impegno
 * @property string|null                                                      $peso_impegno
 * @property string|null                                                      $qualita_prestazione
 * @property string|null                                                      $peso_qualita_prestazione
 * @property string|null                                                      $totale
 * @property float|null                                                       $totale_pond                                  se ha fatto piu' stabi
 * @property int|null                                                         $ha_diritto
 * @property string|null                                                      $motivo
 * @property string|null                                                      $gg_aspettative_pond_in_sede
 * @property string|null                                                      $gg_aspettative_pond_fuori_sede
 * @property string|null                                                      $categoria_ecoval
 * @property int                                                              $posfunval
 * @property int|null                                                         $gg_cateco_in_sede
 * @property int|null                                                         $gg_cateco_fuori_sede
 * @property int|null                                                         $gg_cateco_posfun_in_sede
 * @property int|null                                                         $gg_cateco_posfun_fuori_sede
 * @property int|null                                                         $gg_cateco_no_posfun_in_sede
 * @property int|null                                                         $gg_cateco_no_posfun_fuori_sede
 * @property int|null                                                         $gg_no_cateco_in_sede
 * @property int|null                                                         $gg_no_cateco_fuori_sede
 * @property int|null                                                         $gg_no_cateco_posfun_in_sede
 * @property int|null                                                         $gg_no_cateco_posfun_fuori_sede
 * @property int|null                                                         $gg_asz_cateco_posfun_in_sede
 * @property int|null                                                         $gg_asz_cateco_posfun_fuori_sede
 * @property string|null                                                      $gg_tot_pond
 * @property int|null                                                         $asz2ka
 * @property int|null                                                         $gg_presenze_in_anno
 * @property int|null                                                         $gg_assenze_in_anno
 * @property int|null                                                         $ore_assenze_in_anno
 * @property int|null                                                         $benificiario_progressione
 * @property \Illuminate\Support\Carbon|null                                  $created_at
 * @property \Illuminate\Support\Carbon|null                                  $updated_at
 * @property string|null                                                      $updated_by
 * @property string|null                                                      $created_by
 * @property string|null                                                      $deleted_at
 * @property string|null                                                      $deleted_by
 * @property string|null                                                      $deleted_ip
 * @property string|null                                                      $created_ip
 * @property string|null                                                      $updated_ip
 * @property int|null                                                         $vincitore
 * @property string|null                                                      $perf_ind_2015
 * @property string|null                                                      $perf_ind_2016
 * @property string|null                                                      $perf_ind_2017
 * @property string|null                                                      $perf_ind_2018
 * @property string|null                                                      $perf_ind_2014
 * @property float|null                                                       $perf_ind_media
 * @property string|null                                                      $peso_perf_ind_media
 * @property string|null                                                      $risultato
 * @property float|null                                                       $ptime
 * @property float|null                                                       $costo_fascia_up
 * @property int|null                                                         $valutatore_id
 * @property string|null                                                      $titolo_di_studio
 * @property string|null                                                      $lang
 * @property int|null                                                         $punt_progressione
 * @property float|null                                                       $punt_progressione_finale
 * @property int|null                                                         $gg_cateco_posfun_no_asz
 * @property string|null                                                      $perf_ind_2019
 * @property int|null                                                         $gg_asz
 * @property int|null                                                         $hh_asz
 * @property int|null                                                         $gg_cateco_posfun_in_sede_no_asz
 * @property int|null                                                         $gg_cateco_sup_in_sede
 * @property int|null                                                         $excellences_count_last_3_years
 * @property int|null                                                         $perf_ind_count_last_3_years
 * @property string|null                                                      $perf_ind_2020
 * @property float|null                                                       $eta
 * @property float|null                                                       $gg_in_sede_no_asz
 * @property float|null                                                       $valore_differenziale_rapportato_pt
 * @property string                                                           $perf_ind_2021
 * @property Collection<int, Sto00f>                                          $Sto00fYear
 * @property int|null                                                         $sto00f_year_count
 * @property Collection<int, Ana02f>                                          $ana02f
 * @property int|null                                                         $ana02f_count
 * @property Ana10f|null                                                      $ana10f
 * @property Anag|null                                                        $anag
 * @property Collection<int, \Modules\Progressioni\Models\Assenze>            $assenze
 * @property int|null                                                         $assenze_count
 * @property Collection<int, Asz00k1>                                         $asz
 * @property int|null                                                         $asz_count
 * @property Collection<int, Asz00f>                                          $asz00f
 * @property int|null                                                         $asz00f_count
 * @property Collection<int, Asz00f>                                          $asz00fs
 * @property int|null                                                         $asz00fs_count
 * @property Collection<int, Asz00k1>                                         $asz00k1
 * @property int|null                                                         $asz00k1_count
 * @property Collection<int, Asz00k1>                                         $asz00k1Year
 * @property int|null                                                         $asz00k1_year_count
 * @property Collection<int, Schede>                                          $avversari
 * @property int|null                                                         $avversari_count
 * @property Collection<int, Schede>                                          $avversariCategoriaEco
 * @property int|null                                                         $avversari_categoria_eco_count
 * @property \Modules\Progressioni\Models\CategoriaPropro|null                $categoriaPropro
 * @property Collection<int, \Modules\Progressioni\Models\Coeff>              $coeff
 * @property int|null                                                         $coeff_count
 * @property Collection<int, \Modules\Progressioni\Models\CriteriEsclusione>  $criteriEsclusione
 * @property int|null                                                         $criteri_esclusione_count
 * @property Collection<int, \Modules\Progressioni\Models\CriteriOption>      $criteriOptions
 * @property int|null                                                         $criteri_options_count
 * @property Collection<int, \Modules\Progressioni\Models\CriteriPrecedenza>  $criteriPrecedenza
 * @property int|null                                                         $criteri_precedenza_count
 * @property Collection<int, \Modules\Progressioni\Models\CriteriValutazione> $criteriValutazione
 * @property int|null                                                         $criteri_valutazione_count
 * @property \Modules\Progressioni\Models\EsclusiExtra|null                   $esclusoExtra
 * @property mixed                                                            $aventi_diritto
 * @property mixed                                                            $aventi_diritto_eff
 * @property mixed                                                            $codqua
 * @property mixed                                                            $cont
 * @property int|null                                                         $excellences_count_last3years
 * @property int|null                                                         $gg_asz_cateco_posfun
 * @property int|null                                                         $gg_asz_fuori_sede
 * @property int|null                                                         $gg_asz_in_sede
 * @property float                                                            $gg_cateco_posfun_rapportato_max10_valutatore
 * @property int|float                                                        $gg_p_time_vert_year
 * @property mixed                                                            $gg_parttimevert_anno
 * @property int|null                                                         $gg_parttimevert
 * @property mixed                                                            $gg_parttimevert_dalal
 * @property int|null                                                         $gg_posiz1_in_sede
 * @property mixed                                                            $gg_presenza_dalal
 * @property int|null                                                         $hh_asz_fuori_sede
 * @property int|null                                                         $hh_asz_in_sede
 * @property float|null                                                       $importo_stipendio_annuo
 * @property mixed                                                            $last_data_assunz
 * @property string|null                                                      $lista_propro
 * @property string|null                                                      $lista_propro_sup
 * @property int|float                                                        $perc_p_time_daterange
 * @property int|float                                                        $perc_p_time_year
 * @property mixed                                                            $perc_parttime_anno
 * @property float|null                                                       $perc_parttime
 * @property mixed                                                            $perc_parttime_dalal
 * @property float|null                                                       $perc_parttimepond_anno
 * @property mixed                                                            $perc_parttimepond_dalal
 * @property float|null                                                       $perf_ind2014
 * @property float|null                                                       $perf_ind2015
 * @property float|null                                                       $perf_ind2016
 * @property float|null                                                       $perf_ind2017
 * @property float|null                                                       $perf_ind2018
 * @property float|null                                                       $perf_ind2019
 * @property float|null                                                       $perf_ind2020
 * @property float|null                                                       $perf_ind2021
 * @property float|null                                                       $perf_ind2022
 * @property float|null                                                       $perf_ind2023
 * @property float|null                                                       $perf_ind2024
 * @property void                                                             $perf_ind_avg_last3_years
 * @property int|null                                                         $perf_ind_count_last3_years
 * @property int                                                              $posizione
 * @property string|null                                                      $posizione_eco
 * @property mixed                                                            $tipco
 * @property string|null                                                      $valutatore_txt
 * @property Collection<int, \Modules\Progressioni\Models\MyLog>              $mailInviate
 * @property int|null                                                         $mail_inviate_count
 * @property Collection<int, Schede>                                          $mails
 * @property int|null                                                         $mails_count
 * @property \Modules\Progressioni\Models\MaxCatecoPosfunAnno|null            $maxCatecoPosfun
 * @property Collection<int, \Modules\Progressioni\Models\Message>            $messages
 * @property int|null                                                         $messages_count
 * @property Collection<int, \Modules\Progressioni\Models\MyLog>              $myLogs
 * @property int|null                                                         $my_logs_count
 * @property Collection<int, Individuale>                                     $performanceIndividuale
 * @property int|null                                                         $performance_individuale_count
 * @property \Modules\Progressioni\Models\Pesi|null                           $pesi
 * @property Collection<int, Qua00f>                                          $qua00f
 * @property int|null                                                         $qua00f_count
 * @property Collection<int, Qua00f>                                          $qua00fDaterange
 * @property int|null                                                         $qua00f_daterange_count
 * @property Collection<int, Qua00f>                                          $qua00fYear
 * @property int|null                                                         $qua00f_year_count
 * @property Collection<int, Qua03f>                                          $qua03f
 * @property int|null                                                         $qua03f_count
 * @property Collection<int, Rep00f>                                          $rep00f
 * @property int|null                                                         $rep00f_count
 * @property Collection<int, Repart>                                          $reparts
 * @property int|null                                                         $reparts_count
 * @property Collection<int, Schede>                                          $righeDoppie
 * @property int|null                                                         $righe_doppie_count
 * @property Collection<int, \Modules\Progressioni\Models\SchedaCriteri>      $schedaCriteri
 * @property int|null                                                         $scheda_criteri_count
 * @property \Modules\Progressioni\Models\StabiDirigente|null                 $stabiDirigente
 * @property \Modules\Progressioni\Models\StipendioTabellare|null             $stipendioTabellare
 * @property \Modules\Progressioni\Models\StipendioTabellare|null             $stipendioTabellareUp
 * @property Collection<int, Sto00f>                                          $sto00f
 * @property int|null                                                         $sto00f_count
 * @property Tqu00f|null                                                      $tqu00f
 * @property \Modules\Progressioni\Models\StabiDirigente|null                 $valutatore
 * @property \Modules\Progressioni\Models\StabiDirigente|null                 $valutatoreDefault
 * @property Collection<int, Wstr01lx>                                        $wstr01lx
 * @property int|null                                                         $wstr01lx_count
 * @property Collection<int, Wstr01lx>                                        $wstr01lxYear
 * @property int|null                                                         $wstr01lx_year_count
 *
 * @method static \Modules\Progressioni\Database\Factories\SchedeFactory factory($count = null, $state = [])
 * @method static Builder|Schede                                         newModelQuery()
 * @method static Builder|Schede                                         newQuery()
 * @method static Builder|Schede                                         ofDate(int $date)
 * @method static Builder|Schede                                         ofEnteYear(int $ente, int $year)
 * @method static Builder|Schede                                         ofQuarter(int $quarter, int $year)
 * @method static Builder|Schede                                         ofRangeDate(int $date_start, int $date_end)
 * @method static Builder|Schede                                         ofYear(int $year)
 * @method static Builder|Schede                                         query()
 * @method static Builder|Schede                                         whereAl($value)
 * @method static Builder|Schede                                         whereAnno($value)
 * @method static Builder|Schede                                         whereArricchimentoProfessionale($value)
 * @method static Builder|Schede                                         whereAsz2ka($value)
 * @method static Builder|Schede                                         whereBenificiarioProgressione($value)
 * @method static Builder|Schede                                         whereCategoriaEco($value)
 * @method static Builder|Schede                                         whereCategoriaEcoval($value)
 * @method static Builder|Schede                                         whereClafun($value)
 * @method static Builder|Schede                                         whereCognome($value)
 * @method static Builder|Schede                                         whereCostoFasciaUp($value)
 * @method static Builder|Schede                                         whereCreatedAt($value)
 * @method static Builder|Schede                                         whereCreatedBy($value)
 * @method static Builder|Schede                                         whereCreatedIp($value)
 * @method static Builder|Schede                                         whereDal($value)
 * @method static Builder|Schede                                         whereDeletedAt($value)
 * @method static Builder|Schede                                         whereDeletedBy($value)
 * @method static Builder|Schede                                         whereDeletedIp($value)
 * @method static Builder|Schede                                         whereDisci1($value)
 * @method static Builder|Schede                                         whereDisci1Txt($value)
 * @method static Builder|Schede                                         whereEmail($value)
 * @method static Builder|Schede                                         whereEnte($value)
 * @method static Builder|Schede                                         whereEsperienzaAcquisita($value)
 * @method static Builder|Schede                                         whereEta($value)
 * @method static Builder|Schede                                         whereExcellencesCountLast3Years($value)
 * @method static Builder|Schede                                         whereGg($value)
 * @method static Builder|Schede                                         whereGgAnno($value)
 * @method static Builder|Schede                                         whereGgAspettativeFuoriSede($value)
 * @method static Builder|Schede                                         whereGgAspettativeInSede($value)
 * @method static Builder|Schede                                         whereGgAspettativePondFuoriSede($value)
 * @method static Builder|Schede                                         whereGgAspettativePondInSede($value)
 * @method static Builder|Schede                                         whereGgAssenzaAnno($value)
 * @method static Builder|Schede                                         whereGgAssenzeInAnno($value)
 * @method static Builder|Schede                                         whereGgAsz($value)
 * @method static Builder|Schede                                         whereGgAszCatecoPosfunFuoriSede($value)
 * @method static Builder|Schede                                         whereGgAszCatecoPosfunInSede($value)
 * @method static Builder|Schede                                         whereGgAszTipCodEsclusoSubito($value)
 * @method static Builder|Schede                                         whereGgCatecoFuoriSede($value)
 * @method static Builder|Schede                                         whereGgCatecoInSede($value)
 * @method static Builder|Schede                                         whereGgCatecoNoPosfunFuoriSede($value)
 * @method static Builder|Schede                                         whereGgCatecoNoPosfunInSede($value)
 * @method static Builder|Schede                                         whereGgCatecoPosfun($value)
 * @method static Builder|Schede                                         whereGgCatecoPosfunFuoriSede($value)
 * @method static Builder|Schede                                         whereGgCatecoPosfunInSede($value)
 * @method static Builder|Schede                                         whereGgCatecoPosfunInSedeNoAsz($value)
 * @method static Builder|Schede                                         whereGgCatecoPosfunNoAsz($value)
 * @method static Builder|Schede                                         whereGgCatecoSupInSede($value)
 * @method static Builder|Schede                                         whereGgFuoriSede($value)
 * @method static Builder|Schede                                         whereGgInSede($value)
 * @method static Builder|Schede                                         whereGgInSedeNoAsz($value)
 * @method static Builder|Schede                                         whereGgNoCatecoFuoriSede($value)
 * @method static Builder|Schede                                         whereGgNoCatecoInSede($value)
 * @method static Builder|Schede                                         whereGgNoCatecoPosfunFuoriSede($value)
 * @method static Builder|Schede                                         whereGgNoCatecoPosfunInSede($value)
 * @method static Builder|Schede                                         whereGgPosiz1InSede($value)
 * @method static Builder|Schede                                         whereGgPresenzaAnno($value)
 * @method static Builder|Schede                                         whereGgPresenzeInAnno($value)
 * @method static Builder|Schede                                         whereGgTotPond($value)
 * @method static Builder|Schede                                         whereHaDiritto($value)
 * @method static Builder|Schede                                         whereHhAsz($value)
 * @method static Builder|Schede                                         whereId($value)
 * @method static Builder|Schede                                         whereImpegno($value)
 * @method static Builder|Schede                                         whereIndir($value)
 * @method static Builder|Schede                                         whereLang($value)
 * @method static Builder|Schede                                         whereMatr($value)
 * @method static Builder|Schede                                         whereMotivo($value)
 * @method static Builder|Schede                                         whereNGgFuoriSede($value)
 * @method static Builder|Schede                                         whereNGgInSede($value)
 * @method static Builder|Schede                                         whereNome($value)
 * @method static Builder|Schede                                         whereOreAssenzeInAnno($value)
 * @method static Builder|Schede                                         wherePerfInd2014($value)
 * @method static Builder|Schede                                         wherePerfInd2015($value)
 * @method static Builder|Schede                                         wherePerfInd2016($value)
 * @method static Builder|Schede                                         wherePerfInd2017($value)
 * @method static Builder|Schede                                         wherePerfInd2018($value)
 * @method static Builder|Schede                                         wherePerfInd2019($value)
 * @method static Builder|Schede                                         wherePerfInd2020($value)
 * @method static Builder|Schede                                         wherePerfInd2021($value)
 * @method static Builder|Schede                                         wherePerfIndCountLast3Years($value)
 * @method static Builder|Schede                                         wherePerfIndMedia($value)
 * @method static Builder|Schede                                         wherePesoArricchimentoProfessionale($value)
 * @method static Builder|Schede                                         wherePesoEsperienzaAcquisita($value)
 * @method static Builder|Schede                                         wherePesoImpegno($value)
 * @method static Builder|Schede                                         wherePesoPerfIndMedia($value)
 * @method static Builder|Schede                                         wherePesoQualitaPrestazione($value)
 * @method static Builder|Schede                                         wherePesoRisultatiOttenuti($value)
 * @method static Builder|Schede                                         wherePosfun($value)
 * @method static Builder|Schede                                         wherePosfunval($value)
 * @method static Builder|Schede                                         wherePosiz($value)
 * @method static Builder|Schede                                         wherePosizTxt($value)
 * @method static Builder|Schede                                         wherePostType($value)
 * @method static Builder|Schede                                         wherePropro($value)
 * @method static Builder|Schede                                         wherePtime($value)
 * @method static Builder|Schede                                         wherePuntProgressione($value)
 * @method static Builder|Schede                                         wherePuntProgressioneFinale($value)
 * @method static Builder|Schede                                         whereQua2ka($value)
 * @method static Builder|Schede                                         whereQua2kd($value)
 * @method static Builder|Schede                                         whereQualitaPrestazione($value)
 * @method static Builder|Schede                                         whereRep003($value)
 * @method static Builder|Schede                                         whereRep2ka($value)
 * @method static Builder|Schede                                         whereRep2kd($value)
 * @method static Builder|Schede                                         whereRepar($value)
 * @method static Builder|Schede                                         whereReparTxt($value)
 * @method static Builder|Schede                                         whereReparval($value)
 * @method static Builder|Schede                                         whereRisultatiOttenuti($value)
 * @method static Builder|Schede                                         whereRisultato($value)
 * @method static Builder|Schede                                         whereSchedaType($value)
 * @method static Builder|Schede                                         whereStabi($value)
 * @method static Builder|Schede                                         whereStabiTxt($value)
 * @method static Builder|Schede                                         whereStabival($value)
 * @method static Builder|Schede                                         whereTitoloDiStudio($value)
 * @method static Builder|Schede                                         whereTotale($value)
 * @method static Builder|Schede                                         whereTotalePond($value)
 * @method static Builder|Schede                                         whereUpdatedAt($value)
 * @method static Builder|Schede                                         whereUpdatedBy($value)
 * @method static Builder|Schede                                         whereUpdatedIp($value)
 * @method static Builder|Schede                                         whereValoreDifferenzialeRapportatoPt($value)
 * @method static Builder|Schede                                         whereValutatoreId($value)
 * @method static Builder|Schede                                         whereVincitore($value)
 * @method static Builder|Schede                                         withDays(int $date_min, int $date_max)
 *
 * @mixin \Eloquent
 */
class Schede extends BaseModel implements SchedaContract {
    use SchedaTrait;
    use SigmaModelTrait;
    use ConvertedTrait;
    use ProgressioniTrait;

    public string $from_field = 'dal';

    public string $to_field = 'al';

    public int $n_perf_ind = 3;

    protected $table = 'schede';

    public array $valutaz_fields = ['esperienza_acquisita', 'risultati_ottenuti',
        'arricchimento_professionale', 'impegno', 'qualita_prestazione', ];

    public array $xls_fields = ['ente', 'matr', 'cognome', 'nome', 'propro', 'posfun', 'categoria_ecoval', 'posfunval', 'stabi', 'repar', 'anno',
        'email', 'esperienza_acquisita', 'risultati_ottenuti',
        'arricchimento_professionale', 'impegno', 'qualita_prestazione', 'totale', 'totale_pond', 'ha_diritto', 'motivo', 'excellences_count_last_3_years', ];

    public string $sendmail_where = 'totale > 0';

    protected $fillable = ['ente', 'matr', 'stabi', 'repar', 'anno',
        'cognome', 'nome',
        'categoria_eco', 'categoria_ecoval',
        'email', 'esperienza_acquisita', 'risultati_ottenuti',
        'arricchimento_professionale', 'impegno', 'qualita_prestazione', 'totale', 'totale_pond', 'vincitore',
        'gg_cateco_posfun',
        'gg_cateco_posfun_no_asz',
        'gg_in_sede',
        'gg_presenza_anno',
        'gg_assenza_anno',
        'gg_fuori_sede',
        'gg_posiz_1_in_sede',
        'gg_cateco_fuori_sede',
        'gg_cateco_in_sede',
        'gg_cateco_posfun_fuori_sede',
        'gg_cateco_posfun_in_sede',
        'gg_cateco_posfun_in_sede_no_asz',
        'gg_asz_cateco_posfun_fuori_sede',
        'gg_asz_cateco_posfun_in_sede',
        'gg_cateco_posfun_fuori_sede',
        'gg_cateco_fuori_sede',
        'gg_anno',
        'gg_asz_tip_cod_escluso_subito',
        'gg_aspettative_pond_fuori_sede',
        'gg_aspettative_pond_in_sede',
        'ptime', // aggiunto
        'costo_fascia_up', // da ced03f

        'peso_perf_ind_media',
        'perf_ind_media',
        'titolo_di_studio',
        'costo_fascia_up',
        'punt_progressione', // punteggio progressione da 1 a 4
        'punt_progressione_finale', // somma(moltiplicazione dei criteri * peso)
        'valutatore_id',
        'benificiario_progressione',
        'rep2kd', 'rep2ka', 'propro', 'posfun', 'posiz', 'disci1', 'qua2kd', 'qua2ka', 'dal', 'al',
        'excellences_count_last_3_years',
        'valore_differenziale_rapportato_pt',
        'gg_no_asz',
    ];

    /*
    protected $appends = [
        'valore_differenziale_rapportato_pt',
    ];
    */

    public array $rules = [
        // 'esperienza_acquisita'              =>  'required|numeric|min:0|max:10',
        'risultati_ottenuti' => 'required|numeric|min:0|max:10',
        'arricchimento_professionale' => 'required|numeric|min:0|max:10',
        'impegno' => 'required|numeric|min:0|max:10',
        'qualita_prestazione' => 'required|numeric|min:0|max:10',
        // 'impegno'                       =>  'required|numeric|min:0|max:4',
        // 'qualita_prestazione'           =>  'required|numeric|min:0|max:4',
        // 'size'  => 'required',
        // .. more rules here ..
    ];

    public array $messages = [
        //   'posizione_lavoro.required' => 'campo obbligatorio, non lasciare vuoto',
        //   'complessita.numeric.max'=> 'deve essere compreso fra 0 e 40',
        // 'esperienza_acquisita.required'=>'non te pol lassar sto campo vodo',
        // 'esperienza_acquisita.required'=>'non puoi lasciare questo campo vuoto',
        // 'name.required'=>'You cant leave name field empty',
        // 'name.min'=>'The field has to be :min chars long',
    ];
    protected $casts = [
        'benificiario_progressione' => 'boolean',
        'created_at' => 'datetime',
        'updated_at' => 'datetime',
    ];

    /**
     * Undocumented function.
     *
     * @return mixed
     */
    public function validate(array $data) {
        // make a new validator object
        $validator = \Validator::make($data, $this->rules, $this->messages);
        // return the result
        /*
        if(!$this->validator->passes()){
           \Redirect::back()->with( [ 'errors' => $this->validator->errors() ] );
        }
        */

        return $validator->validate();
    }

    // ------------- relationship -----------------

    // ------------ mutators --------

    /*
    public function avversari(){
        return $this->hasMany(Schede::class,'valutatore_id','valutatore_id')
                    ->where('anno',$this->anno)
                    ->where('ha_diritto',1)
                    ;
    }

    public function avversariCategoriaEco(){
        return $this->hasMany(Schede::class,'valutatore_id','valutatore_id')
                    ->where('anno',$this->anno)
                    ->where('ha_diritto',1)
                    ->where('categoria_eco',$this->categoria_eco)
                    ;
    }

    public function convertedIn($field,$converted_in){
        switch($converted_in){
            case '1'://'max 10 valutatore',
                return $this->rapportatoMax10Valutatore($field);
            break;
            case '2'://'se stesso',
                return $this->$field;
            break;
            case '3'://'da 4 a 10',
                return $this->$field * 2.5;
            break;
            case '4'://'div 10',
                return $this->$field * 0.1;
            break;
            default:
                dddx('conversione non riconosciuta');
            break;
        }
    }


    public function rapportatoMax10Valutatore($field){
        $max=$this->avversariCategoriaEco->max($field);
        $value=$this->$field;
        if($max==0) return 0;
        $res=$value*10/$max;
        return $res;
    }

    public function getGgCatecoPosfunRapportatoMax10ValutatoreAttribute($value){
        $field='gg_cateco_posfun';
        $max=$this->avversariCategoriaEco->max($field);
        $value=$this->$field;
        $res=$value*10/$max;
        return $res;
    }
    */

    public function stabi_dirigente_parz(array $params): Model {
        extract($params);
        /*
        $fields = ['stabi', 'repar', 'anno'];
        foreach ($fields as $field) {
            if (! isset($$field)) {
                throw new \Exception('['.$field.'] is not set');
            }
        }
        */

        if (! isset($stabi)) {
            throw new \Exception('[stabi] is not set');
        }

        if (! isset($repar)) {
            throw new \Exception('[repar] is not set');
        }

        if (! isset($anno)) {
            throw new \Exception('[anno] is not set');
        }

        return StabiDirigente::firstOrCreate(['stabi' => $stabi, 'repar' => $repar, 'anno' => $anno]);
    }

    // ------------------------------------------
    public function stabi_opts(): array { // Request $request da errore
        // $data=$request->all();
        // if(isset($data['ente'])){

        // }

        $opts = Repart::where('repar', 0)->where('stabi', '>', 500)->get();
        $ris = [];
        $ris[] = '---SELEZIONA---';
        foreach ($opts as $opt) {
            $ris[$opt->stabi] = $opt->stabi.'] '.$opt->dest1;
        }

        // $opts=$opts->pluck('dest1','stabi');
        // $opts->prepend('-- SELEZIONA --','');
        // return $opts;
        return $ris;
    }

    // end function stabi_opts

    /*
    public static function filter($params)
    {
        extract($params);
        //echo '<pre>';print_r($params);echo '</pre>';
        $rows=new self;
        if (isset($anno)) {
            $rows=$rows->where('anno', $anno);
        }
        return $rows;
    }//end search
    */

    /*  --- spostato nel trait --
    asz00k1 solo ente, matr
    asz00k1RangeDate ente, matr, dal, al
    asz00k1RageDate etc etc
    public function asz00k1()
    {
        $anno=$this->anno;
        $tmp=[];
        foreach ($this->codiciAspettative()->get() as $row) {
            $tmp[]=$row->tipo.'-'.$row->codice;
        }
        $lista_codici_aspettative=implode(',', $tmp);
        $asz=Asz00k1::where('ente', $this->ente)
                    ->where('matr', $this->matr)
                    ->whereRaw('find_in_set(concat(asztip,"-",aszcod),"'.$lista_codici_aspettative.'")');

        return $asz;
    }
    //*/

    /**
     * { item_description }.
     */
    public function peso(array $params): int {
        extract($params);

        if (! isset($propro)) {
            throw new \Exception('[propro] is not set');
        }

        if (! isset($posfun)) {
            throw new \Exception('[posfun] is not set');
        }

        $sk = 'gg_';
        if ($this->propro === $propro) {
            $sk .= 'propro';
        } else {
            $sk .= 'no_propro';
        }

        $sk .= '_';
        if ($this->posfun === $posfun) {
            $sk .= 'posfun';
        } else {
            $sk .= 'no_posfun';
        }

        $sk .= '_in_sede';
        $coeff = $this->coeff()->where('name', $sk)->first();

        if (! \is_object($coeff)) {
            throw new \Exception('coeff name not set');
        }

        return (int) $coeff->value;
    }

    // ---------------------------------------------------------------------------------------------------------------------------
    // ---------------- UPDATES ---------------------
    // ----------------------------------------------

    public static function updateVincitori(array $params): void {
        extract($params);

        if (! isset($anno)) {
            throw new \Exception('[anno] is not set');
        }

        $maxcatecoposfun = MaxCatecoPosfunAnno::where('anno', $anno)->orderBy('cateco')->orderBy('posfun')->get();
        echo '<h3> Vincitori : '.$maxcatecoposfun->sum('aventi_diritto_eff').'</h3>';
        foreach ($maxcatecoposfun as $item) {
            $schede_obj = $item->schede();
            $limit = $item->aventi_diritto_eff;
            $res = $schede_obj->update(['vincitore' => 0]);
            $vincitori = $schede_obj->select('id', 'matr', 'cognome', 'nome', 'categoria_ecoval', 'posfunval', 'vincitore')->distinct()
                ->where('ha_diritto', 1)->orderBy('totale', 'desc')->groupBy('matr')
                ->where('totale', '>', 0)->limit($limit);
            $res = $vincitori->update(['vincitore' => 1]);
            /*-- 4 debug --
            echo '<hr/><pre>';print_r($item->toArray());echo '</pre>';
            echo '<pre>'.$vincitori->toSql().'</pre>';
            echo '<pre>';print_r($vincitori->get()->toArray());echo '</pre>';
            echo '<pre>'.print_r($res).'</pre>';
            */
            foreach ($vincitori->get()->where('vincitore', 0) as $loser) {
                self::where('id', $loser->id)->update(['vincitore' => 1]);
            }
        }
    }

    /**
     * { item_description }.
     */
    public static function updatePeso(array $params): void {
        extract($params);
        /*
         $valutaz_fields=['esperienza_acquisita'
        ,'risultati_ottenuti'
            ,'arricchimento_professionale','impegno','qualita_prestazione'];
        */
        $scheda_obj = new self();
        $peso_obj = new Pesi();
        $valutaz_fields = $scheda_obj->valutaz_fields;
        // $valutaz_fields=self::$valutaz_fields;
        // dd($valutaz_fields);
        reset($valutaz_fields);
        foreach ($valutaz_fields as $valutaz_field) {
            $sql = 'update '.$scheda_obj->getTable().' as A set A.peso_'.$valutaz_field.' = (
				select B.peso_'.$valutaz_field.' from '.$peso_obj->getTable().' as B
				where A.anno=B.anno and find_in_set(A.propro,B.lista_propro) limit 1
			) where A.anno='.$params['anno'];
            // echo '<pre>'.$sql.'</pre>';
            $scheda_obj->getConnection()->statement($sql);
        }

        // dd('['.__LINE__.']['.__FILE__.']');
    }

    public static function updateTotale(array $params): void {
        // totale aggiornato dall'edit per questioni di approssimazioni
        $self = new self();
        $valutaz_fields = $self->valutaz_fields;
        reset($valutaz_fields);
        $sql_arr = [];
        foreach ($valutaz_fields as $valutaz_field) {
            $sql_arr[] = $valutaz_field.' * peso_'.$valutaz_field;
        }
        // il force si togliera'
        if (isset($params['where']) && isset($params['force']) && 1 === $params['force']) {
            $where = $params['where'];
            $where = str_replace('schede.', 'A.', (string) $where);
            $tbl = (string) $self->getTable();
            $sql = 'update '.$tbl.' as A set A.totale=('.\chr(13).'(';
            $sql .= implode(' ) +'.\chr(13).' ( ', $sql_arr);
            $sql .= ')'.\chr(13).')/100
				where ';
            if (\is_string($where)) {
                $sql .= $where;
            } else {
                dddx($where);
            }

            echo '['.__LINE__.']['.__FILE__.']['.__FUNCTION__.']<pre>'.$sql.'</pre>';
            $self->getConnection()->statement($sql);
        }
    }

    public static function updateEsperienzaAcquisita(array $params): void {
        $self = new self();
        // $sql='delete from cateco_posfun_max_tot_pond where anno='.$params['anno'];
        // $scheda_obj->getConnection()->statement($sql);
        // MaxCatecoPosfunAnno -> table =cateco_posfun_max_tot_pond
        $rows = self::select('categoria_ecoval', 'posfunval', 'anno')
            ->where('anno', $params['anno'])
            ->where('ha_diritto', 1)
            ->orderBy('categoria_ecoval')
            ->orderBy('posfunval')
            ->orderBy('anno')
            ->distinct();
        foreach ($rows->get() as $row) {
            MaxCatecoPosfunAnno::firstOrCreate([
                'cateco' => $row->categoria_ecoval,
                'posfun' => $row->posfunval,
                'anno' => $row->anno,
            ]);
        }

        /*
        $sql='insert cateco_posfun_max_tot_pond(cateco,posfun,anno)
            (select distinct A.categoria_ecoval,substr(A.posfun,-1),anno
                from '.$scheda_obj->getTable().' as A  where A.anno='.$params['anno'].'
                and A.ha_diritto=1
                order by A.categoria_ecoval,substr(A.posfun,-1)
            )';
        $scheda_obj->getConnection()->statement($sql);
        */
        $sql = ' update cateco_posfun_max_tot_pond As A set max_gg_tot_pond=(
			select max(gg_tot_pond) from  '.$self->getTable().' as B
			where A.anno=B.anno
			and A.cateco=B.categoria_ecoval
			and substr(A.posfun,-1)=substr(B.posfun,-1)
			and B.ha_diritto=1
			) where A.anno='.$params['anno'];
        $self->getConnection()->statement($sql);

        $sql = 'update '.$self->getTable().' as A set A.esperienza_acquisita=(select A.gg_tot_pond*10/B.max_gg_tot_pond from cateco_posfun_max_tot_pond as B
			where A.anno=B.anno
			and A.categoria_ecoval=B.cateco
			and substr(A.posfun,-1)=substr(B.posfun,-1)
			) where A.anno='.$params['anno'].' and A.ha_diritto=1';
        $self->getConnection()->statement($sql);
    }

    // --------------------------------------------------------------------------------------
    // --------- functions ---------
    public static function updateFields(array $params = []): void {
        $route_parameters = [];
        if (null !== \Route::current() && method_exists(\Route::current(), 'parameters')) {
            $route_parameters = getRouteParameters();
        }

        $params = array_merge($route_parameters, $params);
        extract($params);

        if (! isset($anno)) {
            throw new \Exception('[anno] is not set');
        }

        if (! isset($stabi)) {
            throw new \Exception('[stabi] is not set');
        }

        if (! isset($repar)) {
            throw new \Exception('[repar] is not set');
        }

        $sql = '(
			('.$anno.' between year(rep2kd) and year(rep2ka))
			or
			('.$anno.' >= year(rep2kd) and rep2ka=0)
		)';
        $rows0 = Rep00f::where('repst1', $stabi)->where('repre1', $repar)->whereRaw($sql)->whereRaw('repann=""');
        foreach ($rows0->get() as $row) {
            $parz = ['ente' => $row->ente,
                'matr' => $row->matr,
                'stabi' => $row->repst1,
                'repar' => $row->repre1,
                'rep2kd' => $row->rep2kd,
                'rep2ka' => $row->rep2ka,
                'anno' => $anno, ];

            $obj = self::firstOrCreate($parz);
            $obj->rep2kd = $row->rep2kd;
            $obj->rep2ka = $row->rep2ka;
            if (null === $obj->dal) {
                // $obj->dal = Carbon::createFromDate($anno, 1, 1);  // Property Modules\Progressioni\Models\Schede::$dal (int|null) does not accept Carbon\Carbon.
                $obj->dal = (int) ($anno * 10000 + 101);
            }

            if (null === $obj->al) {
                // $obj->al = Carbon::createFromDate($anno, 12, 31); // Property Modules\Progressioni\Models\Schede::$al (int|null) does not accept Carbon\Carbon.
                $obj->al = (int) ($anno * 10000 + 1231);
            }

            if (0 === $obj->propro || null === $obj->propro) {
                $sql = '
				(
					('.$obj->dal.' between qua2kd and qua2ka )
					or
					('.$obj->dal.' >= qua2kd and qua2ka=0 )
					or
					('.$obj->al.' between qua2kd and qua2ka )
					or
					('.$obj->al.' >= qua2kd and qua2ka=0 )
					or
					(qua2kd between '.$obj->dal.' and '.$obj->al.')
					or
					(qua2ka between '.$obj->dal.' and '.$obj->al.')
				)
				';
                /*
                $sql = '
                (
                    ('.$obj->dal->format('Ymd').' between qua2kd and qua2ka )
                    or
                    ('.$obj->dal->format('Ymd').' >= qua2kd and qua2ka=0 )
                    or
                    ('.$obj->al->format('Ymd').' between qua2kd and qua2ka )
                    or
                    ('.$obj->al->format('Ymd').' >= qua2kd and qua2ka=0 )
                    or
                    (qua2kd between '.$obj->dal->format('Ymd').' and '.$obj->al->format('Ymd').')
                    or
                    (qua2ka between '.$obj->dal->format('Ymd').' and '.$obj->al->format('Ymd').')
                )
                ';
                */
                // dd($obj->anag);

                $qua00f = optional($obj->anag)->qua00f()->select('propro', 'posfun', 'posiz')->distinct()->whereRaw($sql);
                // echo '<br/>'.$qua00f->count().' - '.$qua00f->first()->propro.'  - '.$qua00f->first()->posfun;
                if (1 === $qua00f->get()->count()) {
                    $obj->propro = $qua00f->first()->propro;
                    $obj->posfun = $qua00f->first()->posfun;
                    $obj->posiz = $qua00f->first()->posiz;
                } else {
                    echo '<br/>$qua00f->count() : '.$qua00f->count();
                    echo '<br/>ente :'.$obj->ente;
                    echo '<br/>matr :'.$obj->matr;
                    echo "<br/>qualcosa e' andato storto [".__LINE__.']['.__FILE__.']';
                    echo '<pre>';
                    print_r($qua00f->toSql());
                    // dd($qua00f->get());
                    $qua00f = optional($obj->anag)->qua00f()->whereRaw($sql)->orderBy('qua2kd')->get();

                    // foreach($qua00f as $v_qua00f){
                    // dd(Carbon::parse($qua00f[0]->qua2kd));
                    $al_old = $obj->al;
                    // $obj->al = Carbon::parse($qua00f[0]->qua2kd);//875    Property Modules\Progressioni\Models\Schede::$al (int|null) does not accept Carbon\Carbon.
                    // $obj->al = (int) Carbon::parse($qua00f[0]->qua2kd)->format('Ymd');
                    $obj->al = $qua00f[0]->qua2kd;
                    $obj->save();

                    $obj1 = $obj->replicate();
                    // $obj1->dal = Carbon::parse($qua00f[1]->qua2kd);//Property Modules\Progressioni\Models\Schede::$dal (int|null) does not accept Carbon\Carbon.
                    $obj1->dal = $qua00f[1]->qua2kd;
                    $obj1->al = 0 !== $qua00f[1]->qua2ka ? $qua00f[1]->qua2ka : $al_old;
                    // $obj1->id = null;  889    Property Modules\Progressioni\Models\Schede::$id (int) does not accept null.
                    $obj1->save();
                }
            }

            $obj->save();
            // dd($obj);
            // echo '<br/><pre>['.$obj->id.']</pre>';
        }

        // dd('['.__LINE__.']['.__FILE__.']');
        $obj = new self();
        $table = $obj->getTable();
        $conn = $obj->getConnection();
        $where = $table.'.anno="'.$anno.'" ';

        // Anag::massUpdateCognomeNome(['conn' => $conn, 'table' => $table, 'where' => $where]);
        app(MassUpdateCognomeNomeAction::class)->execute($conn, $table, $where);
        // Anag::massUpdateCategoriaEco(['conn' => $conn, 'table' => $table, 'where' => $where]);
        app(MassUpdateCategoriaEcoAction::class)->execute($conn, $table, $where);
        // Anag::massUpdatePosizTxt(['conn' => $conn, 'table' => $table, 'where' => $where]);
        app(MassUpdatePosizTxtAction::class)->execute($conn, $table, $where);
        // Anag::massUpdateStabiTxtReparTxt(['conn' => $conn, 'table' => $table, 'where' => $where]);
        app(MassUpdateStabiTxtReparTxtAction::class)->execute($conn, $table, $where);
    }

    /**
     * { item_description }.
     *
     * @return mixed
     */
    public function content_PDF(string $view): string {
        $params = [];
        if (null !== \Route::current()) {
            $params = getRouteParameters();
        }

        // $view='admin.performance.individuale.pdf';
        $view_params = [
            'view' => $view,
            'row' => $this,
            'anno' => $this->anno,
            'params' => $params,
        ];

        // $html = view($view)->with('row', $this)->with('anno', $this->anno)->with('view', $view)->with('params', $params);
        $html = view($view, $view_params);
        // $content = $html->__toString();
        $content = $html->render();

        return HtmlService::toPdf(['html' => $content, 'filename' => $this->id, 'out' => 'content_PDF']);
    }

    // end content_PDF

    // ------------------------------------------------------------------------------------
    public function ggInSedeTot(array $params): ?int {
        $criteri = optional($this->criteriEsclusione);
        $date_min = $criteri->data_presenza_dal;
        if (\is_object($date_min)) {
            $date_min = $date_min->format('Ymd');
        }

        $date_max = $criteri->data_presenza_al->format('Ymd');
        $al = $date_max;
        extract($params);

        $anno = $this->anno;
        $tbl = app(CategoriaPropro::class)->getTable();

        $qua00f = $this->qua00f()->join('progressione.'.$tbl, static function ($join) use ($anno, $tbl): void {
            $join->where($tbl.'.anno', $anno);
            $join->whereRaw('find_in_set(propro,lista_propro)');
            $join->limit(1);
        });
        if (isset($posfun)) {
            // if (isset($posfun) && substr($posfun, -1)!=substr($this->attributes['posfun'], -1) ) {
            $qua00f->whereRaw('SUBSTR(posfun,-1)='.$posfun);
        }

        if (isset($date_max)) {
            $qua00f->where('qua2kd', '<=', $date_max);
        }

        if (isset($date_min)) {
            $qua00f->where('qua2kd', '>=', $date_min);
        }

        $tot = 0;

        foreach ($qua00f->get() as $row) {
            $dal = $row->qua2kd;
            if (isset($date_min)) {
                $dal = ($row->qua2kd >= $date_min) ? $row->qua2kd : $date_min;
            }

            if (isset($date_max)) {
                $al = ($row->qua2ka >= $date_max || 0 === $row->qua2ka) ? $date_max : $row->qua2ka;
            }

            $gg = 0;
            if ($dal <= $al) {
                $gg = Carbon::parse($dal)->diffInDays($al,true) + 1;
            }

            $tot += $gg;
            // echo '<br/>['.$row->qua2kd.' '.$row->qua2ka.']  ['.$dal.' - '.$al.'] ['.$gg.']';
        }

        return $tot;
    }
}// end class schede
