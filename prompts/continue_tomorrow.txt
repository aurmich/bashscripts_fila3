<<<<<<< HEAD
# Prompt per Continuazione Lavoro - Email Multilingua e Aggiornamento Modelli Laravel 12

## Task Prioritari - Modulo Notify

1. **Correzione Errori:**
   - Correggi l'errore di sintassi nel metodo sendEmail() nel file SendSpatieEmail.php (manca -> tra locale() e send())
   - Verifica e correggi eventuali altri errori simili nel modulo

2. **Aggiornamento Modelli per Laravel 12:**
   - Converti i modelli che ancora usano proprietà protette ($casts, $fillable, ecc.) ai nuovi metodi in Laravel 12
   - Implementa protected function casts(): array, fillable(): array, ecc.
   - Assicurati che la type-hinting sia corretta nei docblock e nei return types

3. **Implementazione Traduzioni:**
   - Implementa best practices per gestione traduzioni mancanti (documentate in /Modules/Lang/docs/)
   - Migliora la gestione dei fallback per attributi traducibili
   - Centralizza la configurazione di traduzione in TranslatableServiceProvider

4. **Test e Documentazione:**
   - Crea test unitari per verificare il comportamento dei modelli traducibili
   - Documenta le modifiche seguendo le convenzioni di naming (README.md maiuscolo, altri file minuscolo)
   - Assicurati che la documentazione sia indipendente dal contesto specifico (no riferimenti al nome del progetto)

## Regole Fondamentali

- **Modelli:** Mai estendere Model direttamente, usa sempre BaseModel del modulo
- **Filament:** Mai usare ->label(), ->placeholder() o ->helperText() (gestiti da LangServiceProvider)
- **Routing:** Non modificare route/web.php per funzionalità frontend (usa Volt+Folio)
- **Metodi deprecati:** Non usare getListTable* ma getTable* nei componenti Filament
- **Filament Cards:** Usa Forms\Components\Section::make('') invece di Forms\Components\Card::make()
- **Convention over Configuration:** Segui le convenzioni stabilite per namespace, directory e naming
=======
# Prompt Unificato per Sviluppo Modulare Laravel

## Istruzioni per Continuazione Lavoro

- Riprendi da dove hai lasciato sul progetto, applicando tutte le regole di progetto e le ultime convenzioni a tutti i moduli: BaseModel, override inutili, array associativi, docs collegati, ecc.
- Controlla che nessun model estenda direttamente Model, ma solo BaseModel.
- Applica sempre le regole: niente override inutili, docs e bidirezionalità aggiornata, nessuna rotta custom in web.php dei moduli Filament/Volt.
- Continua a lavorare su tutte le entità e i moduli seguendo le ultime best practice documentate.
- Prima di ogni refactor, verifica se la regola è già documentata in docs e memory.
- Aggiorna sempre la documentazione e le memories se cambi una regola o una convenzione.
- Se trovi un errore già visto (es: estensione Model diretta), correggi e documenta subito.

## Architettura Modulare

### Struttura Base
- Directory Base: laravel/Modules/
- Ogni modulo segue la stessa struttura e pattern
- Modulo Xot fornisce le classi base per tutti gli altri moduli

### Moduli Principali

#### 1. Xot (Core)
- Fornisce tutte le classi base (XotBase*)
- Gestisce la configurazione globale
- Implementa i pattern fondamentali
- Directory: laravel/Modules/Xot

#### 2. UI
- Gestisce componenti interfaccia
- Estende Filament con componenti custom
- Implementa temi e layout
- Directory: laravel/Modules/UI

#### 3. User
- Gestione utenti e autenticazione
- Ruoli e permessi (Spatie)
- Profili utente
- Directory: laravel/Modules/User
>>>>>>> f000df5 (.)

#### 4. Tenant
- Gestione multi-tenant
- Configurazioni per tenant
- Isolamento dati
- Directory: laravel/Modules/Tenant

#### 5. Notify
- Sistema di notifiche
- Template e-mail
- Gestione canali
- Directory: laravel/Modules/Notify

#### 6. Patient
- Gestione pazienti
- Cartelle cliniche
- Appuntamenti
- Directory: laravel/Modules/Patient

## Regole Fondamentali (Per TUTTI i Moduli)

### 1. Modelli
- ❌ MAI estendere Model direttamente
- ✅ Estendere BaseModel del proprio modulo
- BaseModel deve essere nello stesso namespace dei modelli
- Usare casts() invece di $casts per ereditare configurazioni

### 2. Resources Filament
- ❌ MAI estendere classi Filament direttamente
- ✅ Estendere classi XotBase* corrispondenti
- Implementare getFormSchema() invece di form()
- Implementare getTableColumns() invece di table()

### 3. Service Providers
- ❌ MAI estendere ServiceProvider direttamente
- ✅ Estendere XotBaseServiceProvider
- Proprietà $name DEVE essere public
- Non reimplementare funzionalità di XotBaseServiceProvider

### 4. Traduzioni
- Gestite tramite LangServiceProvider
- Struttura: 'field' => ['label' => 'Label', 'placeholder' => '...']
- ❌ MAI usare ->label() direttamente nei form
- File di traduzione per ogni modulo

### 5. Documentazione
- Ogni modulo DEVE avere la sua cartella docs/
- Collegamenti bidirezionali tra docs
- Documentare OGNI modifica importante
- Best practices e anti-patterns per modulo

### 6. Namespace
- Modules\{ModuleName} per ogni modulo
- Models nello stesso namespace del BaseModel
- Filament\Resources in namespace dedicato
- Providers in namespace dedicato

## Pattern Comuni

### 1. Ereditarietà
```
XotBaseModel -> ModuleBaseModel -> ConcreteModel
XotBaseResource -> ConcreteResource
XotBaseServiceProvider -> ModuleServiceProvider
```

### 2. Directory Structure
```
Modules/
  ModuleName/
    app/
      Models/
        BaseModel.php
      Filament/
        Resources/
      Providers/
    docs/
    config/
    resources/
      lang/
    routes/
```

### 3. Configurazione
- config/ per ogni modulo
- Pubblicabile via ServiceProvider
- Override per tenant supportato
- Documentazione in docs/

## Modulo Notify - Focus Attuale

### Contesto Attuale
- Modulo: Notify
- Namespace Base: Modules\Notify
- Directory Base: laravel/Modules/Notify

### Stato Attuale
- NotificationTemplate estende correttamente BaseModel
- Documentazione aggiornata in docs/models.md
- Implementata struttura corretta per form e table
- GrapesJS in fase di integrazione

### Gerarchia di Ereditarietà
```
Illuminate\Database\Eloquent\Model
└── Modules\Xot\Models\XotBaseModel
    └── Modules\Notify\Models\BaseModel
        └── Modules\Notify\Models\NotificationTemplate
```

### File da Controllare
1. /laravel/Modules/Notify/app/Models/BaseModel.php
2. /laravel/Modules/Notify/app/Models/NotificationTemplate.php
3. /laravel/Modules/Notify/docs/models.md
4. /docs/regole/modelli-eloquent.md
5. /docs/regole/MEMORY.md

### Checklist per Nuovi Modelli
- [ ] Verificare esistenza BaseModel nel modulo
- [ ] Controllare funzionalità ereditate
- [ ] Non duplicare configurazioni
- [ ] Estendere BaseModel corretto
- [ ] Importare dal namespace corretto

### TODO
- [ ] Completare integrazione GrapesJS
- [ ] Verificare tutte le estensioni nel modulo
- [ ] Aggiornare documentazione per nuove funzionalità
- [ ] Implementare test per template compilation

## Note Importanti
- Mantenere coerenza tra moduli
- Seguire pattern stabiliti
- Documentare OGNI deviazione
- Aggiornare questo prompt per nuovi pattern
- STUDIARE la documentazione prima di ogni modifica
- Mantenere il codice robusto, tipizzato e conforme a PSR-12

## Collegamenti Chiave
- /docs/architecture.md: Architettura globale
- /docs/modules.md: Gestione moduli
- /docs/patterns.md: Pattern comuni
- Modules/*/docs/: Documentazione per modulo
- [Architettura Modelli](../../docs/architecture/models.md)
- [Struttura Moduli](../../docs/architecture/modules.md)
- [BaseModel Notify](../../laravel/Modules/Notify/docs/base-model.md)
- [BaseModel Xot](../../laravel/Modules/Xot/docs/base-model.md)

## Prossimi Passi
1. Verificare tutti i modelli esistenti nel modulo Notify
2. Correggere eventuali estensioni errate
3. Aggiornare la documentazione
4. Implementare test per verificare il corretto funzionamento
5. Controllare la coerenza con altri moduli

## TODO Globale
- [ ] Verificare tutte le estensioni in tutti i moduli
- [ ] Completare documentazione per ogni modulo
- [ ] Standardizzare gestione traduzioni
- [ ] Implementare test per funzionalità core
- [ ] Aggiornare docs con nuovi pattern
- [ ] Verificare coerenza namespace