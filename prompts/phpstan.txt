analizza l'intero contenuto della cartella laravel/Modules come un unico insieme coerente ed esegui PHPStan dal livello 9 al livello 9, utilizzando il comando ./vendor/bin/phpstan (già installato nella cartella laravel). per ogni livello salva il report JSON globale in ../docs/phpstan/level_<livello>.json e genera docs/phpstan/level_<livello>.md contenente analisi dettagliata degli errori, relazioni e dipendenze tra moduli, soluzioni architetturali proposte e scelte strategiche adottate. studia e aggiorna prima la documentazione tecnica nei moduli coinvolti, poi quella generale in docs/ (root del progetto), che funge da indice centrale e non contiene la documentazione esaustiva. la documentazione approfondita e tecnica si trova invece nelle cartelle docs dei singoli moduli, e deve essere collegata bidirezionalmente con la documentazione root. crea sempre questi collegamenti incrociati. tratta ogni cartella dentro laravel/Modules come un modulo indipendente con proprio composer.json, determinando namespace, autoload e struttura dinamicamente. non includere "app" nel namespace (es. laravel/Modules/Auth/app/Foo → Modules\Auth\Foo). non modificare mai il file phpstan.neon. le funzioni getListTableColumns, getTableActions e getTableBulkActions devono restituire array con chiavi stringa. se il metodo getTableActions restituisce solo ViewAction, EditAction e DeleteAction, rimuovilo del tutto. se invece contiene anche azioni aggiuntive, l'array restituito deve includere ...parent::getTableActions(). se il metodo getTableBulkActions restituisce solo DeleteBulkAction, rimuovilo del tutto. se invece contiene anche azioni aggiuntive, l'array restituito deve includere ...parent::getTableBulkActions(). le funzionalità come ->colors($metatag->getColors()) o -><nome>($metatag->get<Nome>()) devono avere metodi definiti in MetatagData. se mancanti, documenta perché devono esistere, poi implementali coerentemente nel modulo corretto. se servono script shell, cerca la cartella bashscripts più vicina senza crearne di nuove. non usare mai ->label('') perché tutte le etichette devono essere gestite tramite i file di traduzione localizzati nei moduli usando il LangServiceProvider. procedi in modo continuo, sistematico, automatico e senza interruzioni, mantenendo coerenza architetturale, senza rompere funzionalità esistenti. dopo ogni livello di analisi fornisci un riepilogo con sintesi delle modifiche, scelte architetturali fatte e impatti futuri attesi.
