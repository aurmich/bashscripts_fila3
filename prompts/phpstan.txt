analizza l'intero progetto a partire dalla root esegui phpstan su ogni modulo in laravel/Modules dal livello 1 al livello 10 phpstan è già installato dentro la cartella laravel eseguilo con ./vendor/bin/phpstan salva i report json generati da phpstan nella cartella docs/phpstan di ogni modulo con il nome level_<level>.json poi crea i file level_<level>.md con l'analisi degli errori e le soluzioni proposte studia e aggiorna la documentazione del modulo prima di implementare correzioni per ogni errore individua la cartella docs più vicina aggiorna e studia quella documentazione prima di fare qualsiasi modifica nella documentazione concentrati sul perché dei cambiamenti e sul cosa viene fatto evitando di replicare il codice o spiegare dettagliatamente il come documenta l'intento funzionale e le decisioni architetturali non i dettagli implementativi poi aggiorna anche la cartella docs principale nella root del progetto creando collegamenti bidirezionali ai file aggiornati della cartella docs locale mantenendo lo stesso approccio orientato al perché e al cosa una volta documentato tutto puoi procedere con l'implementazione della correzione mantenendo uno stile coerente con il resto del progetto e senza introdurre rotture all'interno della cartella laravel/Modules ogni sottocartella rappresenta un modulo indipendente ogni modulo ha il proprio composer.json che va analizzato e studiato per comprendere namespace autoload e path corretti ogni modulo ha una propria cartella app dove vanno collocate tutte le classi da registrare e una propria cartella docs contenente la documentazione specifica del modulo con collegamenti bidirezionali alla cartella docs della root del progetto tutte queste relazioni vanno mantenute aggiornate durante ogni intervento verifica ogni funzionalità mancante come ad esempio ->colors($metatag->getColors()) o -><nome>($metatag->get<nome>()) se in MetatagData manca tale funzione creala dopo aver studiato e documentato il perché e il suo scopo nella cartella docs adeguata la documentazione nei singoli moduli contiene specifiche tecniche e correzioni locali mentre la documentazione root contiene l'architettura generale roadmap epiche e filosofia del progetto verifica sempre che le correzioni non compromettano il funzionamento del sistema e scegli l'approccio architettonicamente superiore piuttosto che quello più semplice al termine dell'analisi e risoluzione di ogni errore phpstan fornisci un breve riepilogo delle modifiche effettuate e dei potenziali impatti spiegando il ragionamento che ha guidato le tue scelte procedi in modo continuo sistematico e senza interruzioni né richieste ulteriori