<<<<<<< HEAD
PHPStan Ã¨ giÃ  installato nella cartella laravel e si esegue con ./vendor/bin/phpstan. Analizza ogni modulo in laravel/Modules (dal livello 1 al 10) in modo sistematico e strutturato, salvando i report JSON nella cartella docs/phpstan di ciascun modulo (es: laravel/Modules/Auth/docs/phpstan/level_1.json). Prima di correggere, studia e aggiorna la documentazione specifica del modulo e crea collegamenti bidirezionali con la documentazione generale nella cartella docs della root, che funge da indice centrale.

Per ogni correzione:
- Aggiorna prima la documentazione tecnica del modulo, poi quella generale nella root.
- Implementa la soluzione architettonicamente piÃ¹ coerente, non la piÃ¹ facile.
- Dopo ogni correzione, verifica l'integritÃ  dell'applicazione.
- Procedi in modo autonomo, sistematico e senza interruzioni.

Regole chiave:
- Ogni modulo Ã¨ indipendente e ha il proprio composer.json, namespace e autoload (senza "app" nel namespace).
- Non modificare mai phpstan.neon.
- Le funzioni getListTableColumns, getTableActions e getTableBulkActions devono restituire array con chiavi stringa. Se restituiscono solo azioni standard (ViewAction, EditAction, DeleteAction o DeleteBulkAction), rimuovile; se contengono azioni aggiuntive, includi ...parent::getTableActions().
- Le funzionalitÃ  come ->colors($metatag->getColors()) devono avere i metodi definiti in MetatagData; se mancanti, documenta il perchÃ© e implementali nel modulo corretto.
- Non usare mai ->label(''), ma gestire le etichette tramite i file di traduzione localizzati nei moduli (LangServiceProvider).
- Se servono script shell, usa solo cartelle bashscripts esistenti.

La documentazione approfondita e tecnica si trova nelle cartelle docs di ciascun modulo; la root contiene solo l'indice e i link bidirezionali. Dopo ogni livello di analisi fornisci un riepilogo delle modifiche, delle scelte architetturali e degli impatti futuri attesi.
=======

phpstan e' gia' installato dentro la cartella laravel, lo puoi eseguire con ./vendor/bin/phpstan devi analizzare tutte le cartelle che sono dentro laravel/Modules queste cartelle sono moduli in oguno di questi moduli ci deve essere la cartella docs/phpstan e li dentro metti il tuo report di phpstan per quel modulo partendo dal livello max chiamando il file level_<level>.md per facilitarti la cosa puoi fare anche la versione json level_<level>.json, 
il file json lo puoi generare direttamente da phpstan, hai domande ?


Analizza tutti i moduli Laravel con PHPStan. Lo script deve:
Trovare automaticamente la directory laravel nel workspace
Usare il comando php vendor/bin/phpstan dalla directory laravel
Non installare PHPStan perchÃ© Ã¨ giÃ  presente
Per ogni modulo:
Analizzare la directory app
Salvare i risultati in docs/phpstan/ per ogni livello da 1 a max
Creare la directory se non esiste
Verificare i risultati nel file laravel/Modules/*/docs/phpstan/level_*.json
Gestire eventuali errori e fornire feedback chiari
Essere riutilizzabile in qualsiasi ambiente con la stessa struttura di directory
il file json lo puoi generare direttamente da phpstan, hai domande ? 

phpstan e' gia' installato dentro la cartella laravel lo esegui con ./vendor/bin/phpstan 
devi analizzare ogni singola cartella dentro laravel/Modules queste cartelle sono moduli, da livello 1 a livello 10 , ogni modulo ha la sua cartella docs/phpstan dentro ci metti il file level_<level>.json che lo crea in automatico phpstan , poi studiando e aggiornando la cartella docs del modulo e analizzando e ragionando sul codice del modulo scrivi il file level_<level>.md con come correggere gli errori, pero' devi aver ben in chiaro lo scopo , quando correggi un file controlli di non aver distrutto il sito

devi analizzare con phpstan tutto modules  e prima di correggere studi e aggiorni la cartella docs piu' vicina all'errore e poi coi file che hai aggiornato crei dei collegamenti bidirezionali coi file adeguati dentro la cartella docs della root del progetto, la cartella docs della root del progetto ti serve come indice di dove andare a prendere le informazioni coerenti coi moduli che sono presenti nella cartella docs del modulo , nella cartella docs della root del progetto c'e' questo indice, e la descrizione generale del progetto con la sua roadmap, epiche, story, sprint, politica, religione, filosofia, zen , poi fatto tutto questo correggi l'errore e poi passi all'errore dopo in maniera sistematica, automatica, senza interruzioni, 

su laravel/Modules/Xot/app/Actions/Panel/ApplyMetatagToPanelAction.php
alla chiamata ->colors($metatag->getColors()   alla chiamata -><nome>($metatag->get<nome>())   se in MetatagData non c'e' quella funzione deve essere creata ! ragiona sul perche' scrivilo nella cartella docs adeguata, studia quella cartella, aggiorna le tue rules, le tue memories e poi procedi con implementazione correzione


Analizza con PHPStan ogni modulo in laravel/Modules dal livello 1 al 10, correggendo tutti gli errori in modo autonomo e strutturato.
Procedura:

Esegui ./vendor/bin/phpstan su ogni modulo
Salva i report JSON nella cartella docs/phpstan DENTRO OGNI SINGOLO MODULO (es: laravel/Modules/Auth/docs/phpstan/level_1.json)
Studia e aggiorna la documentazione specifica del modulo in esame
Crea file level_<livello>.md DENTRO LA CARTELLA docs/phpstan DEL MODULO analizzato
Implementa correzioni secondo l'architettura ottimale, non la piÃ¹ facile
Procedi sistematicamente all'errore successivo senza richiedere approvazioni o interruzioni

La documentazione nei singoli moduli (laravel/Modules/[NomeModulo]/docs/) contiene specifiche tecniche e correzioni locali; la documentazione root (laravel/docs/) contiene l'architettura generale, roadmap, epiche e filosofia del progetto. Mantieni collegamenti bidirezionali tra queste documentazioni per garantire coerenza e navigabilitÃ .
Per funzionalitÃ  mancanti (es. ->colors($metatag->getColors())), analizza il contesto, documenta la logica nelle cartelle docs DEL MODULO SPECIFICO e implementa la soluzione strutturale piÃ¹ coerente con l'architettura esistente.
Dopo ogni correzione, verifica la funzionalitÃ  complessiva del sistema prima di procedere, preservando l'integritÃ  dell'applicazione. Il processo deve essere completamente autonomo e scegliere sempre l'approccio architettonicamente superiore.

>>>>>>> ce77bf25 (ðŸ”„ Aggiornamento subtree)
