analizza l'intero progetto a partire dalla root ed esegui phpstan su ogni modulo all’interno della cartella laravel/Modules dal livello 1 al livello 10. phpstan è già installato nella cartella laravel e va eseguito con il comando ./vendor/bin/phpstan. per ogni livello salva i report json nella cartella docs/phpstan del modulo con il nome level_<livello>.json e crea anche il file level_<livello>.md contenente l’analisi degli errori e le soluzioni proposte. prima di implementare correzioni, studia e aggiorna la documentazione del modulo, concentrandoti su ciò che viene fatto e perché viene fatto, senza includere dettagli implementativi o codice. successivamente aggiorna anche la cartella docs principale nella root del progetto aggiungendo collegamenti bidirezionali verso i file aggiornati della documentazione del modulo. ogni sottocartella in laravel/Modules rappresenta un modulo indipendente. ogni modulo ha il proprio composer.json che va analizzato per determinare correttamente namespace, autoload e struttura. il namespace delle classi non deve includere “app” anche se presente nel path: ad esempio, se un file è in laravel/Modules/<nome_modulo>/app/Filament, il namespace corretto sarà Modules<nome_modulo>\Filament. ogni modulo deve avere una cartella app per contenere le classi e una cartella docs con la documentazione tecnica e le correzioni locali. la documentazione nella root invece rappresenta l’architettura generale, la roadmap, le epiche e la filosofia del progetto. entrambe vanno mantenute aggiornate e allineate. per ogni errore phpstan, studia la documentazione locale più vicina, aggiorna il contenuto spiegando l’intento e le motivazioni architetturali, poi procedi con la correzione mantenendo coerenza con lo stile del progetto e senza introdurre rotture. verifica se sono presenti funzionalità mancanti come ->colors($metatag->getColors()) o -><nome>($metatag->get<nome>()). se mancano, studia la logica, documenta il perché e crea le funzioni necessarie nella struttura corretta del modulo. se è necessario creare uno script shell, deve essere creato all'interno della cartella bashscripts più vicina nel progetto, cercandola senza mai crearne una nuova. non modificare in alcun modo il file phpstan.neon. le funzioni getListTableColumns, getTableActions e getTableBulkActions devono restituire array in cui le chiavi sono stringhe, e questa struttura deve essere mantenuta in tutte le dichiarazioni, inferenze e implementazioni. al termine della correzione di ogni livello phpstan, fornisci un breve riepilogo delle modifiche effettuate e dei possibili impatti futuri, spiegando le scelte architetturali adottate. procedi in modo continuo, sistematico, automatico e senza interruzioni né richieste ulteriori.