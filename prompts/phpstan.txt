
--- singolo modulo
analizza l’intero progetto a partire dalla cartella root eseguendo phpstan dal livello 1 al livello 10 su ogni modulo all’interno della cartella laravel/Modules, utilizzando il comando ./vendor/bin/phpstan già presente nella cartella laravel, salvando per ogni livello i report json nella cartella docs/phpstan del modulo con il nome level_<livello>.json e scrivendo anche un file level_<livello>.md contenente l’analisi degli errori e le soluzioni proposte, dopo aver studiato e aggiornato la documentazione tecnica del modulo per comprenderne scopo e logica senza includere codice o dettagli implementativi, e aggiornando successivamente anche la documentazione generale nella cartella docs della root aggiungendo collegamenti bidirezionali con i file del modulo, assicurandoti che ogni modulo abbia una cartella app per le classi, una cartella docs per la documentazione tecnica e che ogni composer.json locale venga analizzato per rilevare il namespace corretto che non deve includere "app" anche se presente nel path, mantenendo la coerenza del namespace ad esempio come Modules\NomeModulo\Filament, verificando inoltre che ogni funzione getListTableColumns, getTableActions e getTableBulkActions restituisca array con chiavi stringa, senza mai modificare il file phpstan.neon e senza creare nuove cartelle bashscripts ma cercando quella più vicina se necessario generare uno script shell, analizzando per ogni errore la documentazione più prossima, aggiornandola con le motivazioni architetturali e implementando le correzioni senza rompere il sistema, procedendo in modo continuo e automatico fino alla completa risoluzione, e nel caso in cui vengano rilevate chiamate come ->colors($metatag->getColors()) o simili in ApplyMetatagToPanelAction.php, se mancano metodi corrispondenti in MetatagData devono essere creati e documentati nella cartella docs più pertinente, seguendo sempre la filosofia e le convenzioni del progetto.


-------- tutto modules 

analizza l’intero contenuto della cartella laravel/Modules come un unico insieme coerente ed esegui PHPStan dal livello 1 al livello 10, utilizzando il comando ./vendor/bin/phpstan (già installato nella cartella laravel). per ogni livello salva il report JSON globale in ../docs/phpstan/level_<livello>.json e genera docs/phpstan/level_<livello>.md contenente analisi dettagliata degli errori, relazioni e dipendenze tra moduli, soluzioni architetturali proposte e scelte strategiche adottate. studia e aggiorna prima la documentazione tecnica nei moduli coinvolti, poi quella generale in docs/ (root del progetto). crea collegamenti bidirezionali tra le documentazioni locali (Modules/*/docs/) e quella root (docs/). tratta ogni cartella dentro laravel/Modules come un modulo indipendente con proprio composer.json, determinando namespace, autoload e struttura dinamicamente. non includere “app” nel namespace (es. laravel/Modules/Auth/app/Foo → Modules\Auth\Foo). non modificare mai il file phpstan.neon. le funzioni getListTableColumns, getTableActions e getTableBulkActions devono restituire array con chiavi stringa. le funzionalità come ->colors($metatag->getColors()) o -><nome>($metatag->get<Nome>()) devono avere metodi definiti in MetatagData. se mancanti, documenta perché devono esistere, poi implementali coerentemente nel modulo corretto. se servono script shell, cerca la cartella bashscripts più vicina senza crearne di nuove. procedi in modo continuo, sistematico, automatico e senza interruzioni, mantenendo coerenza architetturale, senza rompere funzionalità esistenti. dopo ogni livello di analisi fornisci un riepilogo con sintesi delle modifiche, scelte architetturali fatte e impatti futuri attesi.