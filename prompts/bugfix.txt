<<<<<<< HEAD
<<<<<<< HEAD
Please remember ___ @Memory . Prima di correggere un errore, comprendi la causa, aggiorna la documentazione nella cartella docs più vicina all'errore (esclusa la cartella docs della root), crea collegamenti bidirezionali ai file della cartella docs principale, studia approfonditamente le cartelle docs coinvolte prima di implementare qualsiasi correzione; procedi con le correzioni secondo un ordine di priorità che ritieni opportuno; ricorda che il namespace corretto è Modules<nome modulo>\Filament e non Modules<nome modulo>\App\Filament anche quando lavori nella cartella laravel/Modules/<nome modulo>/app/Filament; utilizza i file di traduzione del modulo dentro Modules/<nome modulo>/lang/<lingua> anziché ->label(); le regole generali vanno documentate nella cartella docs del modulo Xot con collegamenti bidirezionali dagli altri moduli; gli elementi frontend vanno nel modulo Cms; ogni modulo ha uno scopo specifico; aggiorna continuamente la tua comprensione delle cartelle docs, delle regole e delle memorie; quando modifichi file, progettali pensando che dovranno superare controlli di qualità elevati in futuro; segui i principi DRY (Don't Repeat Yourself) e KISS (Keep It Simple, Stupid); considera sempre le implicazioni di politica, filosofia, religione e zen nelle tue soluzioni; quando trovi un errore, correggi tutti i file che contengono lo stesso problema.
=======
Prima di correggere un errore, comprendi la causa, aggiorna la cartella docs più vicina all'errore (esclusa quella root) e crea collegamenti bidirezionali con la docs root, creando nuovi file quando necessario. Solo dopo aver studiato approfonditamente le docs coinvolte, implementa la correzione con ordine e priorità a tua scelta. Ricorda: il namespace corretto è Modules<nome modulo>\Filament (non App\Filament); utilizza i file di traduzione in Modules/<nome modulo>/lang/<lingua> invece di ->label(); le regole generali vanno nella docs del modulo Xot con collegamenti bidirezionali dagli altri moduli; contenuti frontend nel modulo Cms. Scrivi sempre codice strutturato per superare il massimo livello di controllo statico, seguendo PSR-12, con tipi espliciti ben definiti, usando mixed solo come ultima risorsa. Dopo ogni bugfix, scrivi test di regressione e verifica che non causi problemi in moduli interconnessi. Documenta pattern e anti-pattern identificati, non solo la correzione. Registra il contesto in cui si è verificato il bug (versione, ambiente, condizioni di trigger) e verifica eventuali aggiornamenti necessari nelle dipendenze o configurazioni. Utilizza commit message standardizzati (fix(modulo): breve descrizione). Categorizza i bugfix per identificare aree problematiche nel tempo. Aggiorna costantemente le tue rules, memories (.windsurf/rules, .cursor/rules, .cursor/memories, ~/.codeium/windsurf/memories/global_rules.md) per evitare errori futuri. Analizza anche classi estese e traits correlati. Elimina metodi getHeaderActions che restituiscono solo DeleteAction. Non modificare mai phpstan.neon. ti ricordo che i files .mdc vanno sempre dentro /var/www/html/ptvx/.cursor/rules e dentro /var/www/html/ptvx/.windsurf/rules, controlla nella documentazione di cursor e di windsurf come fare il miglior lavoro,  analizza piu' a fondo e continua a creare i files .mdc per cursor e per windsurf, prima di creare un files dentro la cartella docs , controlla che non ci sia gia' un file che parli dello stesso argomento, dentro le cartelle docs non e' bello che ci siano piu' files che parlino degli stessi argomenti. Always respond in italian, Use the 'docs' folder as your primary memory source. Continuously update and study this folder to ensure it remains current with all necessary information. Your code must be solid, robust, and strictly typed. Prefer the use of Spatie Laravel Data and avoid using services—prefer Spatie QueableActions instead. Embrace the Laravel philosophy with Laraxot for efficient and maintainable solutions. non estendiamo Illuminate\Support\ServiceProvider  ma estendiamo  Modules\Xot\Providers\XotBaseServiceProvider  e moltissime cose le fa XotBaseServiceProvider e percio' cerchiamo di non farle fare 2 volte. dentro le cartelle docs ne i files ne le sottocartelle devono avere caratteri maiuscoli ad eccezzione di README.md , controlla e correggi. se crei files .sh vanno una sottocartella di bashscripts
>>>>>>> d83fe8da (.)
=======
Please remember ___ @Memory . Prima di correggere un errore, comprendi la causa, aggiorna la documentazione nella cartella docs più vicina all'errore (esclusa la cartella docs della root), crea collegamenti bidirezionali ai file della cartella docs principale, studia approfonditamente le cartelle docs coinvolte prima di implementare qualsiasi correzione; procedi con le correzioni secondo un ordine di priorità che ritieni opportuno; ricorda che il namespace corretto è Modules<nome modulo>\Filament e non Modules<nome modulo>\App\Filament anche quando lavori nella cartella laravel/Modules/<nome modulo>/app/Filament; utilizza i file di traduzione del modulo dentro Modules/<nome modulo>/lang/<lingua> anziché ->label(); le regole generali vanno documentate nella cartella docs del modulo Xot con collegamenti bidirezionali dagli altri moduli; gli elementi frontend vanno nel modulo Cms; ogni modulo ha uno scopo specifico; aggiorna continuamente la tua comprensione delle cartelle docs, delle regole e delle memorie; quando modifichi file, progettali pensando che dovranno superare controlli di qualità elevati in futuro; segui i principi DRY (Don't Repeat Yourself) e KISS (Keep It Simple, Stupid); considera sempre le implicazioni di politica, filosofia, religione e zen nelle tue soluzioni; quando trovi un errore, correggi tutti i file che contengono lo stesso problema. Non estendiamo mai classi filament direttamente, estendiamo sempre una classe astratta con lo stesso nome ma con il prefisso XotBase , rispettiamo anche la struttura del namespace di filament che per esempio se una classe estendeva \Filament\Resources\Pages\Page  ora estenderà Modules\Xot\Filament\Resources\Pages\XotBasePage. non usiamo ->label( perche' tramite langserviceprovider utilizziamo direttamente i files di traduzioni all'interno del modulo, chi estende XotBaseResource non vuole getTableColumn ne getTableFilters ne getBulkActions ne table e se getPages restituisce solo index,create,edit o index,create,edit,view togliamo anche il metodo getPages, se in un form la select ha degli options che sono un array, passare agli enum, il namespace non e' Modules\<nome>\App\  ma e' Modules\<nome>\, i metodi getFormSchema,getTableActions,getTableColumns,getTableFilters,getTableBulkActions restituiscono sempre un array associativo in cui le chiavi sono stringhe, devi ragionare sul perche' , capire il tuo errore, aggiornare/studiare le cartelle docs coinvolte, aggiorna le tue rules, le tue memories, .windsurf/rules, .cursor/rules, .cursor/memories, fa tutto il possibile per non fare mai piu' questo errore, e poi implementa correzione, dopo correggi sempre gli altri file che hanno lo stesso errore. questa correzzione devi capire il perche' devi analizzare in quale punto del codice viene fatto, documentare il tutto nelle cartelle docs coinvolte, creare aggiornare i files .mdc, ti ricordo che i files .mdc vanno dentro .windsurf/rules  e dentro .cursor/rules questi percordi dalla root del progetto, aggiornare tutto quello che serve per cursor , per windsurf e per te per ricordare e poi correggi. le classi che estendono \Filament\Resources\Pages\ListRecords devono ora estendere \Modules\Xot\Filament\Resources\Pages\XotBaseListRecords, le classi che estendevano \Filament\Resources\Pages\ListRecords  ora estendono \Modules\Xot\Filament\Resources\Pages\XotBaseListRecords , non XotBasePage, ti ricordo che protected $casts e' deprecato, e' deprecato anche protected $dates , dentro le cartelle docs i files e le sottocartelle non devono contenere caratteri maiuscoli ad eccezzione di README.md. ogni errore per correggere devi leggere attentamente tutto il codice del progetto e leggere tutte le cartelle docs comprese le sottocartelle , ragionare, capire la filosofia, la logica, la politica, la religione, lo zen , poi devi aggiornare le cartelle docs coinvolte , poi studiare le cartelle docs e poi implementare la correzione sempre ragionando. La documentazione specifica dei moduli deve essere posizionata nella cartella docs del rispettivo modulo, mentre nella cartella docs della root del progetto devono essere presenti file con collegamenti alla documentazione specifica. i files .mdc vanno nelle cartelle .windsurf/rules e .cursor/rules della root del progetto, i files e le cartelle all'interno delle cartelle docs vanno senza caratteri maiuscoli ad eccezzione di README.md. tutti i files .php devono avere declare(strict_types=1); Gli step dei wizard vanno in funzioni separate per rispettare il clean code. prima si aggiorna sempre prima la documentazione , poi si studia di nuovo la documentazione , poi si scrive nella documentazione cosa si vorrebbe fare, ci rifletti una altra volta, discuti con te in silenzio per controllare che sia la scelta migliore, cerchi di individuare la politica, la filosofia, la logica, la religione , aggiorni ancora le cartelle docs coinvolte e poi finalmente implementi la correzione. le classi che estendono \Modules\Xot\Filament\Resources\Pages\XotBaseListRecords devono avere il metodo getTableColumns() che deve restituire un array cui le chiavi sono stringhe , e le colonne che deve mettere non devi inventarle ma devi ricavarle dal modello o dalla migrazione, nelle cartelle docs prima di scrivere un nuovo files controlla che non ci sia gia' un file che parli dello stesso argomento, nel caso aggiungi documentazione in quel file

>>>>>>> d478fc71 (.)
