<<<<<<< HEAD
Vedi la regola universale per i prompt in bashscripts/prompts in Modules/Xot/docs/PROMPT_RULES.md. Analizza l'intero contenuto della cartella Modules come un unico insieme coerente. Ogni modulo nella cartella Modules è indipendente, con proprio composer.json da cui ricavare namespace, autoload e struttura. Le classi da registrare si trovano nella rispettiva cartella app, ma il namespace corretto è Modules<nome>\ e non Modules<nome>\app\. IMPORTANTE: rispetta rigorosamente le convenzioni di naming delle directory: 'resources' (minuscolo) per viste/assets/lang e 'Resources' (maiuscolo) per classi PHP Resource; mai cercare file Blade in 'Resources/views/' (errato) ma sempre in 'resources/views/' (corretto). Ogni modulo ha la propria cartella docs che contiene la documentazione tecnica approfondita: quella è la tua memoria. La cartella docs nella root del progetto non è documentazione, ma un indice con collegamenti bidirezionali che ti guida a dove leggere, studiare, aggiornare e documentare correttamente la logica e le scelte di progetto. Inoltre può contenere la descrizione generale del progetto con roadmap, epiche, milestone, stime, politica, filosofia, zen e religione. Non ci devono essere documentazioni generali nella cartella docs della root: la documentazione va organizzata per moduli secondo queste regole: documentazione generica nella cartella docs del modulo Xot, documentazione specifica del progetto nella cartella docs della root del progetto, documentazione del frontend nella cartella docs del modulo Cms, documentazione dei componenti UI nella cartella docs del modulo UI, documentazione utenti e permessi nella cartella docs del modulo User, documentazione pazienti nella cartella docs del modulo Patient, documentazione dental nella cartella docs del modulo Dental, documentazione multi-tenant nella cartella docs del modulo Tenant, documentazione traduzioni nella cartella docs del modulo Lang, documentazione media nella cartella docs del modulo Media, documentazione notifiche nella cartella docs del modulo Notify, documentazione report nella cartella docs del modulo Reporting, documentazione gdpr nella cartella docs del modulo Gdpr, documentazione jobs nella cartella docs del modulo Job, documentazione grafici nella cartella docs del modulo Chart. Nella cartella docs della root del progetto ci devono essere solo i collegamenti bidirezionali alle documentazioni verso i moduli. Devi verificare sempre se le cartelle docs dei moduli hanno quello che ti serve e se sono ben collegate con collegamenti bidirezionali alla cartella docs della root e tra i moduli stessi. La documentazione va riscritta in modo efficace ed essenziale, concentrandosi sul perché e sul cosa, evitando i dettagli implementativi. Se ti viene corretta una cosa, devi sempre aggiornare prima la documentazione del modulo più adatto e poi aggiungere il collegamento nella root. Devi analizzare anche la documentazione presente nella cartella docs della root e valutare se alcuni documenti vanno spostati nella documentazione di un modulo più adeguato, aggiornando poi i collegamenti bidirezionali coerentemente. La documentazione generica va sempre collocata nella cartella docs del modulo Xot. Se trovi pezzi di documentazione generica all'interno della cartella docs della root, questi vanno spostati nella cartella docs del modulo Xot e nella root devono essere lasciati solo i collegamenti bidirezionali ai documenti spostati. Le funzioni getListTableColumns, getTableActions e getTableBulkActions devono restituire array con chiavi stringa. Se getTableActions restituisce solo ViewAction, EditAction e DeleteAction va rimosso del tutto, altrimenti deve includere ...parent::getTableActions(). Se getTableBulkActions restituisce solo DeleteBulkAction va rimosso, altrimenti deve includere ...parent::getTableBulkActions(). Non usare mai ->label('') perché le label sono gestite solo tramite file di traduzione nei moduli con LangServiceProvider. Per il frontoffice, SaluteOra utilizza Laravel Folio + Volt + Livewire + Widget Filament: non creare mai rotte in routes/web.php per il frontoffice, usa sempre file Blade in Themes/{ThemeName}/resources/views/pages/ che diventano automaticamente rotte; per form complessi usa sempre @livewire(\Modules\{Module}\Filament\Widgets\{Widget}::class) invece di implementare la logica direttamente con Volt. I Widget Filament devono estendere XotBaseWidget e implementare il trait HasForms, definendo i campi nel metodo getFormSchema() che deve restituire un array con chiavi stringa. Le traduzioni dei Widget devono essere nel file lang/{locale}/filament-widgets.php del modulo appropriato. Se una funzionalità chiama -><nome>($metatag->get<Nome>()) e manca il metodo get<Nome>, allora documenta perché serve e poi implementalo coerentemente all'interno del modulo corretto. Se devi creare uno script shell devi usare la cartella bashscripts più vicina e non devi mai creare nuove cartelle bashscripts, ma usare solo quelle già esistenti. Procedi nell'ordine che ritieni più efficace senza mai fermarti, mantenendo coerenza architetturale e senza rompere funzionalità esistenti, aggiornando sempre la documentazione locale e i collegamenti bidirezionali nella root e tra i moduli. Devi capire e documentare anche lo scopo specifico di ogni modulo per spostare la documentazione nel modulo giusto e poi creare/aggiornare i files coi collegamenti bidirezionali. Procedi sempre e scegli tu ordine e priorità senza interruzioni. Regola fondamentale: i prompt condivisi (come quelli in bashscripts/prompts) devono essere una singola stringa continua, senza formattazione e senza a capo. Questa regola va documentata nella docs del modulo Xot, gli altri moduli devono avere solo il link a questa regola. Sono fondamentali i links bidirezionali fra le cartelle docs dei moduli, ad esempio ogni modulo nella cartella docs deve avere almeno un paio di collegamenti ai file della cartella docs del modulo Lang, e alcuni collegamenti alla cartella docs del modulo User, e cosi' via, nelle cartelle docs stai attento a non fare file replicati, e di mantenere sempre uno stesso standard e ordine. I collegamenti bidirezionali devono essere mantenuti aggiornati e devono puntare a documenti specifici, non a cartelle generiche. Ricorda che tutte le cartelle dei moduli sono in minuscolo (resources, config, database, app) e seguono la convenzione PSR-4. Non estendere mai direttamente le classi di Filament, ma usa sempre una classe base con prefisso XotBase nel modulo Xot. I form complessi vanno gestiti con i widget Filament, non implementare la logica direttamente nelle blade. Usa Folio + Volt per il routing frontend, non definire rotte in web.php. La documentazione deve essere aggiornata prima di ogni modifica, seguendo la struttura modulare e mantenendo i collegamenti bidirezionali. Ogni modulo deve avere la sua documentazione specifica nella cartella docs, con collegamenti agli altri moduli correlati. I file di traduzione devono essere organizzati per modulo e lingua, seguendo la struttura standard di Laravel. Le azioni nei form devono essere configurate tramite array associativi con label, icon e color, non tramite metodi diretti. Nei campi utente usa sempre first_name e last_name, mai name o surname. Tutte le directory standard dei moduli devono essere in lowercase (resources, views, lang, assets) per compatibilità con filesystem case-sensitive. I form complessi devono essere implementati come Filament Widgets per sfruttare validazione integrata, gestione stato, upload file e altre funzionalità avanzate. Le viste devono essere organizzate secondo la struttura Folio in resources/views/pages. Non creare mai rotte in web.php ma usa il file-based routing di Folio + Volt. Ogni modifica deve essere preceduta dall'aggiornamento della documentazione nel modulo appropriato. I temi devono essere organizzati nella cartella Themes/{ThemeName} e devono seguire la struttura standard di Laravel con resources/views/layouts, resources/views/components e resources/views/pages. Le traduzioni dei temi devono essere nel file lang/{locale}/theme.php.
=======
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> d2064db (.)
le cartelle docs dei moduli sono la tua memoria , la cartella docs nella root del progetto ti serve come indice di dove andare a pescare le informazioni, tramite collegamenti bidirezionali , le cartelle docs devi aggiornarle e studiarle di continuo, se ti correggo su qualcosa devi sempre prima aggiornare la cartella docs del modulo piu' adatto e i collegamenti bidirezionali sulla cartella docs della root , controlla se le cartelle docs dei moduli han quello che ti serve e se son ben collegate con collegamenti bidirezionali ai file adeguati inerenti nella  cartella docs della root 




,phpstan e' gia' installato dentro la cartella laravel e lo esegui con ./vendor/bin/phpstan, non toccare phpstan.neon, correggi tutte le segnalazioni di phpstan a livello 2 su tutto Modules, ogni modulo ha il suo composer.json ,  le classi da registrare dei moduli son dentro la loro cartella app , il namespace non e' Modules\<nome>\app\  ma Modules\<nome>\, procedi nell'ordine che preferisci,   senza MAI fermarti, le priorità e l'ordine di cosa fare prima lo scegli te

<<<<<<< HEAD


procedi con la sistemazione degli errori di phpstan su tutto Modules a livello 9, aiutandoti e aggiornando le cartelle docs 

le cartelle docs sono la tua memoria e devi aggiornarle e studiarle costantemente , le cartelle docs son dentro i moduli e poi c'e' una cartella docs nella root del progetto che tramite collegamenti bidirezionali ti serve come indice per andare a leggere e studiare e aggioarnare la cartella docs piu' adeguata , Riscriviamo la documentazione in modo più efficace, concentrandoci sul "perché" e sul "cosa" piuttosto che sul "come",aggiorna le tue rules, le rules globali e le tue memories


procedi con la sistemazione degli errori di phpstan su tutto Modules a livello 9, aiutandoti e aggiornando le cartelle docs 

le cartelle docs sono la tua memoria e devi aggiornarle e studiarle costantemente , le cartelle docs son dentro i moduli e poi c'e' una cartella docs nella root del progetto che tramite collegamenti bidirezionali ti serve come indice per andare a leggere e studiare e aggioarnare la cartella docs piu' adeguata , Riscriviamo la documentazione in modo più efficace, concentrandoci sul "perché" e sul "cosa" piuttosto che sul "come",aggiorna le tue rules, le rules globali e le tue memories

procedi con la sistemazione degli errori di phpstan su tutto Modules a livello 9, aiutandoti e aggiornando le cartelle docs 

procedi con la sistemazione degli errori di phpstan su tutto Modules a livello 9, aiutandoti e aggiornando le cartelle docs 

le cartelle docs sono la tua memoria e devi aggiornarle e studiarle costantemente , le cartelle docs son dentro i moduli e poi c'e' una cartella docs nella root del progetto che tramite collegamenti bidirezionali ti serve come indice per andare a leggere e studiare e aggioarnare la cartella docs piu' adeguata , Riscriviamo la documentazione in modo più efficace, concentrandoci sul "perché" e sul "cosa" piuttosto che sul "come",aggiorna le tue rules, le rules globali e le tue memories
procedi con la sistemazione degli errori di phpstan su tutto Modules a livello 9, aiutandoti e aggiornando le cartelle docs 

[0;34mℹ️ [2025-04-22 11:23:29] Scelto blocco HEAD (5 linee vs 1)[0m
 43df3e0 (.)
procedi con la sistemazione degli errori di phpstan su tutto Modules a livello 9, aiutandoti e aggiornando le cartelle docs 

le cartelle docs sono la tua memoria e devi aggiornarle e studiarle costantemente , le cartelle docs son dentro i moduli e poi c'e' una cartella docs nella root del progetto che tramite collegamenti bidirezionali ti serve come indice per andare a leggere e studiare e aggioarnare la cartella docs piu' adeguata , Riscriviamo la documentazione in modo più efficace, concentrandoci sul "perché" e sul "cosa" piuttosto che sul "come",aggiorna le tue rules, le rules globali e le tue memories
procedi con la sistemazione degli errori di phpstan su tutto Modules a livello 9, aiutandoti e aggiornando le cartelle docs 

[0;34mℹ️ [2025-04-22 11:23:29] Scelto blocco HEAD (5 linee vs 1)[0m
=======
analizza l’intero contenuto della cartella laravel/Modules come un unico insieme coerente ogni modulo nella cartella laravel/Modules è indipendente con proprio composer.json da cui ricavare namespace autoload e struttura le classi da registrare si trovano nella rispettiva cartella app ma il namespace corretto è Modules<nome>\ e non Modules<nome>\app\ ogni modulo ha la propria cartella docs che contiene la documentazione tecnica approfondita quella è la tua memoria la cartella docs nella root del progetto non è documentazione ma un indice con collegamenti bidirezionali che ti guida a dove leggere studiare aggiornare e documentare correttamente la logica e le scelte di progetto inoltre contiene la descrizione generale del progetto con roadmap epiche milestone stime politica filosofia zen e religione devi verificare sempre se le cartelle docs dei moduli hanno quello che ti serve e se sono ben collegate con collegamenti bidirezionali alla cartella docs della root la documentazione va riscritta in modo efficace ed essenziale concentrandosi sul perché e sul cosa evitando i dettagli implementativi se ti viene corretta una cosa devi sempre aggiornare prima la documentazione del modulo più adatto e poi aggiungere il collegamento nella root devi analizzare anche la documentazione presente nella cartella docs della root e valutare se alcuni documenti vanno spostati nella documentazione di un modulo più adeguato aggiornando poi i collegamenti bidirezionali coerentemente la documentazione generica va sempre collocata nella cartella docs del modulo Xot che è il modulo core se trovi pezzi di documentazione generica all’interno della cartella docs della root questi vanno spostati nella cartella docs del modulo Xot e nella root devono essere lasciati solo i collegamenti bidirezionali ai documenti spostati le funzioni getListTableColumns getTableActions e getTableBulkActions devono restituire array con chiavi stringa se getTableActions restituisce solo ViewAction EditAction e DeleteAction va rimosso del tutto altrimenti deve includere ...parent::getTableActions() se getTableBulkActions restituisce solo DeleteBulkAction va rimosso altrimenti deve includere ...parent::getTableBulkActions() non usare mai ->label('') perché le label sono gestite solo tramite file di traduzione nei moduli con LangServiceProvider se una funzionalità chiama -><nome>($metatag->get<Nome>()) e manca il metodo get<Nome> allora documenta perché serve e poi implementalo coerentemente all’interno del modulo corretto se devi creare uno script shell devi usare la cartella bashscripts più vicina e non devi mai creare nuove cartelle bashscripts ma usare solo quelle già esistenti procedi nell’ordine che ritieni più efficace senza mai fermarti mantenendo coerenza architetturale e senza rompere funzionalità esistenti aggiornando sempre la documentazione locale e i collegamenti bidirezionali nella root
>>>>>>> aurmich/dev
=======
procedi con la sistemazione degli errori di phpstan su tutto Modules a livello 9, aiutandoti e aggiornando le cartelle docs 

le cartelle docs sono la tua memoria e devi aggiornarle e studiarle costantemente , le cartelle docs son dentro i moduli e poi c'e' una cartella docs nella root del progetto che tramite collegamenti bidirezionali ti serve come indice per andare a leggere e studiare e aggioarnare la cartella docs piu' adeguata , Riscriviamo la documentazione in modo più efficace, concentrandoci sul "perché" e sul "cosa" piuttosto che sul "come",aggiorna le tue rules, le rules globali e le tue memories
procedi con la sistemazione degli errori di phpstan su tutto Modules a livello 9, aiutandoti e aggiornando le cartelle docs 

[0;34mℹ️ [2025-04-22 11:23:29] Scelto blocco HEAD (5 linee vs 1)[0m
>>>>>>> d2064db (.)
>>>>>>> aurmich/dev
