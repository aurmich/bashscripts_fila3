le cartelle docs dei moduli sono la tua memoria , la cartella docs nella root del progetto ti serve come indice di dove andare a pescare le informazioni, tramite collegamenti bidirezionali , le cartelle docs devi aggiornarle e studiarle di continuo, se ti correggo su qualcosa devi sempre prima aggiornare la cartella docs del modulo piu' adatto e i collegamenti bidirezionali sulla cartella docs della root , controlla se le cartelle docs dei moduli han quello che ti serve e se son ben collegate con collegamenti bidirezionali ai file adeguati inerenti nella  cartella docs della root 




,phpstan e' gia' installato dentro la cartella laravel e lo esegui con ./vendor/bin/phpstan, non toccare phpstan.neon, correggi tutte le segnalazioni di phpstan a livello 2 su tutto Modules, ogni modulo ha il suo composer.json ,  le classi da registrare dei moduli son dentro la loro cartella app , il namespace non e' Modules\<nome>\app\  ma Modules\<nome>\, procedi nell'ordine che preferisci,   senza MAI fermarti, le priorit√† e l'ordine di cosa fare prima lo scegli te

procedi con la sistemazione degli errori di phpstan su tutto Modules a livello 9, aiutandoti e aggiornando le cartelle docs 

le cartelle docs sono la tua memoria e devi aggiornarle e studiarle costantemente , le cartelle docs son dentro i moduli e poi c'e' una cartella docs nella root del progetto che tramite collegamenti bidirezionali ti serve come indice per andare a leggere e studiare e aggioarnare la cartella docs piu' adeguata , Riscriviamo la documentazione in modo pi√π efficace, concentrandoci sul "perch√©" e sul "cosa" piuttosto che sul "come",aggiorna le tue rules, le rules globali e le tue memories
procedi con la sistemazione degli errori di phpstan su tutto Modules a livello 9, aiutandoti e aggiornando le cartelle docs 

[0;34m‚ÑπÔ∏è [2025-04-22 11:23:29] Scelto blocco HEAD (5 linee vs 1)[0m

Analizza Modules come insieme coerente; ogni modulo ha composer.json per namespace e autoload. Classi in app con namespace Modules<nome>\ non Modules<nome>\app. Rispetta convenzioni: directory minuscole (resources, config, database, app) seguono PSR-4, 'Resources' maiuscolo solo per classi PHP Resource, Blade sempre in 'resources/views/'. Documentazione tecnica in docs di ogni modulo, docs root solo per indice con link bidirezionali. Distribuisci per tipo: generica in Xot, specifica progetto in root, frontend in Cms, UI, utenti, tenant, traduzioni in Lang, media, notifiche, report, gdpr, jobs, grafici in Chart. Documenta perch√© e cosa, non come. Metodi getTableActions/BulkActions restituiscono array con chiavi stringa; rimuovi se restituiscono solo azioni standard, altrimenti includi ...parent::getTableActions(). Mai ->label('') ma usa traduzioni in lang/{locale}. Frontoffice con Folio+Volt+Livewire+Widget: niente rotte in web.php, usa Blade in Themes/{ThemeName}/resources/views/pages/, form complessi con @livewire(\Modules{Module}\Filament\Widgets). Widget estendono XotBaseWidget con HasForms, campi in getFormSchema(). Non estendere direttamente classi Filament ma usa XotBase in Xot. Azioni form in array associativi. Usa first_name/last_name. Prompt condivisi in singola stringa senza formattazione/acapo. Script solo in cartelle bashscripts esistenti. Link bidirezionali tra docs moduli sempre aggiornati e specifici. evita override inutili. Chi estende XotBaseResource  non deve avere protected static ?string $navigationIcon, ne protected static ?string $navigationGroup, ne protected static ?int $navigationSort ne  public static function getNavigationLabel(): string, ne public static function getPluralModelLabel(): string, ne public static function getModelLabel(): string ne  public static function table(Table $table): Table.
