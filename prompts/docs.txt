<<<<<<< HEAD
- Usare traduzioni in lang/{locale} - Convenzione naming chiavi: modulo::risorsa.fields.campo.label ## Frontend - Frontoffice usa Folio+Volt+Livewire+Widget - Niente rotte in web.php - Template in Themes/{Theme}/resources/views/pages/ - Widget devono estendere XotBaseWidget con HasForms - Non estendere direttamente classi Filament ## Componenti UI - Usare sempre componenti nativi Filament: - x-filament::icon - x-filament::button - x-filament::dropdown - x-filament::avatar - MAI utilizzare componenti inesistenti - Per separatori nei dropdown: div class="border-t border-gray-200 dark:border-gray-700 my-1" ## Volt e Folio - La direttiva @volt deve essere SEMPRE la prima cosa nel file Folio - NON utilizzare @volt all'interno del markup HTML - Utilizzare SEMPRE i layout corretti: - <x-layouts.app> - <x-layouts.guest> - MAI utilizzare layout inesistenti ## Localizzazione - Usare mcamara/laravel-localization - Metodi: LaravelLocalization::getCurrentLocale() e getSupportedLocales() - URL devono includere prefisso lingua: /{locale}/{sezione}/{risorsa} ## Routing e Controller - MAI creare rotte in web.php - Filament e Folio gestiscono automaticamente le rotte - MAI creare controller personalizzati ## Business Logic - Usare SEMPRE spatie/laravel-queueable-action (mai Service) - Componenti Livewire in app/Http/Livewire del modulo - Namespace NON deve includere 'app' - Actions nella directory corretta secondo convenzioni ## Sezioni e Blocchi - Documentazione tecnica in: - Themes/{Theme}/docs/sections - Modules/Cms/docs/sections - Link bidirezionali tra le due - JSON configurazione sezioni: - Ogni blocco deve avere attributo "view" - Blocchi raggruppati per locale - Filtrare con app()->getLocale() ## Struttura Directory - Provider in app/Providers/ - Percorso pubblico in public_html/ (non in public di Laravel) ## Vite Config In vite.config.js dei temi: emptyOutDir: false, manifest: 'manifest.json', build: { outDir: './public' } ## Best Practices - Usare Modules\Xot\Contracts\UserContract - Ottenere classe User con XotData::make()->getUserClass() - Documentare decisioni architetturali - Enfatizzare il "perché" non solo il "come" - Aggiornare documentazione con ogni modifica - Mantenere coerenza codice-docs - Documentare breaking changes - Ottimizzare per: - Accessibilità - Sicurezza - Prestazioni ## Configurazione IDE Prima di implementare correzioni: 1. Regole in .windsurf/rules/*.md per Windsurf 2. Regole in .cursor/rules/*.md per Cursor 3. Memorie in .cursor/memories/*.md per Cursor ## Validazione dei Percorsi - Verificare percorsi relativi - Rimuovere riferimenti al nome del progetto - Assicurare compatibilità cross-platform - Mantenere coerenza struttura directory - Usare validatori markdown - Implementare pre-commit hooks ## Correzione Errori Ordine di aggiornamento: 1. Documentazione nel modulo 2. Collegamenti bidirezionali nella root 3. Regole configurazione IDE 4. Codice effettivo ## Manutenzione Documentazione - File docs root solo collegamenti bidirezionali - Spostare documenti generici a Xot - Analizzare Modules come insieme coerente - Documentare prima nel modulo, poi con collegamenti - Concentrarsi su "perché" e "cosa" - Evitare dettagli implementativi - Usare cartella bashscripts più vicina - Documentare metodi mancanti - Gestire correttamente array in: - getListTableColumns - getTableActions - getTableBulkActions
=======
Le cartelle docs dei moduli sono la tua memoria tecnica. La cartella docs nella root del progetto serve come indice centrale con collegamenti bidirezionali alle documentazioni specifiche. Studia e aggiorna continuamente queste cartelle docs. Quando ricevi correzioni, prima aggiorna la documentazione nel modulo appropriato e i collegamenti bidirezionali nella root. I backlinks seguono queste convenzioni: nella root usa [[Modules/{NomeModulo}/docs/{categoria}/{file}]] con tag #modulo-{nomemodulo} #categoria-{nomecategoria}; nei moduli usa [[../../../{AltroModulo}/docs/{categoria}/{file}]] per altri moduli e [[../../../../docs/{categoria}/{file}]] per la root, con tag #root-{nomecategoria}. Verifica che le cartelle docs dei moduli contengano le informazioni necessarie e siano correttamente collegate. PHPStan è già installato in laravel, eseguilo con ./vendor/bin/phpstan. Non modificare phpstan.neon. Correggi tutte le segnalazioni di PHPStan a livello 9 su tutto Modules. Ogni modulo ha il proprio composer.json. Le classi dei moduli sono nella cartella app con namespace Modules<nome>\ (non Modules<nome>\app). La struttura dei moduli segue le specifiche di laravelmodules.com. Procedi nell'ordine che preferisci senza mai fermarti, stabilisci autonomamente priorità e sequenza di lavoro. Documenta le dipendenze tra moduli nei file .md. Integra le correzioni PHPStan nella documentazione generale. Organizza la documentazione sia per funzionalità che per casi d'uso. Aggiorna la documentazione dopo aver completato tutte le correzioni. Includi sezioni dedicate alle decisioni architetturali e ai pattern utilizzati. Concentrati sul "perché" e sul "cosa" piuttosto che sul "come". Analizza Modules come insieme coerente, rispettando le convenzioni di directory e namespace PSR-4. Documenta specificamente per tipo: generica in Xot, specifica progetto in root, frontend in Cms, UI, utenti in tenant, traduzioni in Lang, con altri componenti specializzati in moduli dedicati. Evita override inutili nelle classi che estendono XotBaseResource. Usa traducibili invece di label hardcoded. Per il frontoffice usa Folio+Volt+Livewire+Widget con template Blade in Themes/{ThemeName}/resources/views/pages/. I widget devono estendere XotBaseWidget con HasForms. Non estendere direttamente le classi Filament ma usa XotBase in Xot.
>>>>>>> 3a208a9 (.)
=======
- Usare traduzioni in lang/{locale} - Convenzione naming chiavi: modulo::risorsa.fields.campo.label ## Frontend - Frontoffice usa Folio+Volt+Livewire+Widget - Niente rotte in web.php - Template in Themes/{Theme}/resources/views/pages/ - Widget devono estendere XotBaseWidget con HasForms - Non estendere direttamente classi Filament ## Componenti UI - Usare sempre componenti nativi Filament: - x-filament::icon - x-filament::button - x-filament::dropdown - x-filament::avatar - MAI utilizzare componenti inesistenti - Per separatori nei dropdown: div class="border-t border-gray-200 dark:border-gray-700 my-1" ## Volt e Folio - La direttiva @volt deve essere SEMPRE la prima cosa nel file Folio - NON utilizzare @volt all'interno del markup HTML - Utilizzare SEMPRE i layout corretti: - <x-layouts.app> - <x-layouts.guest> - MAI utilizzare layout inesistenti ## Localizzazione - Usare mcamara/laravel-localization - Metodi: LaravelLocalization::getCurrentLocale() e getSupportedLocales() - URL devono includere prefisso lingua: /{locale}/{sezione}/{risorsa} ## Routing e Controller - MAI creare rotte in web.php - Filament e Folio gestiscono automaticamente le rotte - MAI creare controller personalizzati ## Business Logic - Usare SEMPRE spatie/laravel-queueable-action (mai Service) - Componenti Livewire in app/Http/Livewire del modulo - Namespace NON deve includere 'app' - Actions nella directory corretta secondo convenzioni ## Sezioni e Blocchi - Documentazione tecnica in: - Themes/{Theme}/docs/sections - Modules/Cms/docs/sections - Link bidirezionali tra le due - JSON configurazione sezioni: - Ogni blocco deve avere attributo "view" - Blocchi raggruppati per locale - Filtrare con app()->getLocale() ## Struttura Directory - Provider in app/Providers/ - Percorso pubblico in public_html/ (non in public di Laravel) ## Vite Config In vite.config.js dei temi: emptyOutDir: false, manifest: 'manifest.json', build: { outDir: './public' } ## Best Practices - Usare Modules\Xot\Contracts\UserContract - Ottenere classe User con XotData::make()->getUserClass() - Documentare decisioni architetturali - Enfatizzare il "perché" non solo il "come" - Aggiornare documentazione con ogni modifica - Mantenere coerenza codice-docs - Documentare breaking changes - Ottimizzare per: - Accessibilità - Sicurezza - Prestazioni ## Configurazione IDE Prima di implementare correzioni: 1. Regole in .windsurf/rules/*.md per Windsurf 2. Regole in .cursor/rules/*.md per Cursor 3. Memorie in .cursor/memories/*.md per Cursor ## Validazione dei Percorsi - Verificare percorsi relativi - Rimuovere riferimenti al nome del progetto - Assicurare compatibilità cross-platform - Mantenere coerenza struttura directory - Usare validatori markdown - Implementare pre-commit hooks ## Correzione Errori Ordine di aggiornamento: 1. Documentazione nel modulo 2. Collegamenti bidirezionali nella root 3. Regole configurazione IDE 4. Codice effettivo ## Manutenzione Documentazione - File docs root solo collegamenti bidirezionali - Spostare documenti generici a Xot - Analizzare Modules come insieme coerente - Documentare prima nel modulo, poi con collegamenti - Concentrarsi su "perché" e "cosa" - Evitare dettagli implementativi - Usare cartella bashscripts più vicina - Documentare metodi mancanti - Gestire correttamente array in: - getListTableColumns - getTableActions - getTableBulkActions
>>>>>>> Stashed changes
=======
le cartelle docs dei moduli sono la tua memoria , la cartella docs nella root del progetto ti serve come indice di dove andare a pescare le informazioni, tramite collegamenti bidirezionali , le cartelle docs devi aggiornarle e studiarle di continuo, se ti correggo su qualcosa devi sempre prima aggiornare la cartella docs del modulo piu' adatto e i collegamenti bidirezionali sulla cartella docs della root , controlla se le cartelle docs dei moduli han quello che ti serve e se son ben collegate con collegamenti bidirezionali ai file adeguati inerenti nella  cartella docs della root 




,phpstan e' gia' installato dentro la cartella laravel e lo esegui con ./vendor/bin/phpstan, non toccare phpstan.neon, correggi tutte le segnalazioni di phpstan a livello 2 su tutto Modules, ogni modulo ha il suo composer.json ,  le classi da registrare dei moduli son dentro la loro cartella app , il namespace non e' Modules\<nome>\app\  ma Modules\<nome>\, procedi nell'ordine che preferisci,   senza MAI fermarti, le priorità e l'ordine di cosa fare prima lo scegli te

<<<<<<< HEAD

procedi con la sistemazione degli errori di phpstan su tutto Modules a livello 9, aiutandoti e aggiornando le cartelle docs 

le cartelle docs sono la tua memoria e devi aggiornarle e studiarle costantemente , le cartelle docs son dentro i moduli e poi c'e' una cartella docs nella root del progetto che tramite collegamenti bidirezionali ti serve come indice per andare a leggere e studiare e aggioarnare la cartella docs piu' adeguata , Riscriviamo la documentazione in modo più efficace, concentrandoci sul "perché" e sul "cosa" piuttosto che sul "come",aggiorna le tue rules, le rules globali e le tue memories


procedi con la sistemazione degli errori di phpstan su tutto Modules a livello 9, aiutandoti e aggiornando le cartelle docs 

le cartelle docs sono la tua memoria e devi aggiornarle e studiarle costantemente , le cartelle docs son dentro i moduli e poi c'e' una cartella docs nella root del progetto che tramite collegamenti bidirezionali ti serve come indice per andare a leggere e studiare e aggioarnare la cartella docs piu' adeguata , Riscriviamo la documentazione in modo più efficace, concentrandoci sul "perché" e sul "cosa" piuttosto che sul "come",aggiorna le tue rules, le rules globali e le tue memories

procedi con la sistemazione degli errori di phpstan su tutto Modules a livello 9, aiutandoti e aggiornando le cartelle docs 
<<<<<<< HEAD
>>>>>>> ce77bf25 (🔄 Aggiornamento subtree)
=======
=======
procedi con la sistemazione degli errori di phpstan su tutto Modules a livello 9, aiutandoti e aggiornando le cartelle docs 

le cartelle docs sono la tua memoria e devi aggiornarle e studiarle costantemente , le cartelle docs son dentro i moduli e poi c'e' una cartella docs nella root del progetto che tramite collegamenti bidirezionali ti serve come indice per andare a leggere e studiare e aggioarnare la cartella docs piu' adeguata , Riscriviamo la documentazione in modo più efficace, concentrandoci sul "perché" e sul "cosa" piuttosto che sul "come",aggiorna le tue rules, le rules globali e le tue memories
procedi con la sistemazione degli errori di phpstan su tutto Modules a livello 9, aiutandoti e aggiornando le cartelle docs 

[0;34mℹ️ [2025-04-22 11:23:29] Scelto blocco HEAD (5 linee vs 1)[0m
>>>>>>> 43df3e0 (.)
>>>>>>> 975498ad (fix: auto resolve conflict)
