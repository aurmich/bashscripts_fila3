Analizza Modules come insieme coerente; ogni modulo ha composer.json per namespace e autoload. Classi in app con namespace Modules<nome>\ non Modules<nome>\app. Rispetta convenzioni: directory minuscole (resources, config, database, app) seguono PSR-4, 'Resources' maiuscolo solo per classi PHP Resource, Blade sempre in 'resources/views/'. Documentazione tecnica in docs di ogni modulo, docs root solo per indice con link bidirezionali. Distribuisci per tipo: generica in Xot, specifica progetto in root, frontend in Cms, UI, utenti, tenant, traduzioni in Lang, media, notifiche, report, gdpr, jobs, grafici in Chart. Documenta perchÃ© e cosa, non come. Metodi getTableActions/BulkActions restituiscono array con chiavi stringa; rimuovi se restituiscono solo azioni standard, altrimenti includi ...parent::getTableActions(). Mai ->label('') ma usa traduzioni in lang/{locale}. Frontoffice con Folio+Volt+Livewire+Widget: niente rotte in web.php, usa Blade in Themes/{ThemeName}/resources/views/pages/, form complessi con @livewire(\Modules{Module}\Filament\Widgets). Widget estendono XotBaseWidget con HasForms, campi in getFormSchema(). Non estendere direttamente classi Filament ma usa XotBase in Xot. Azioni form in array associativi. Usa first_name/last_name. Prompt condivisi in singola stringa senza formattazione/acapo. Script solo in cartelle bashscripts esistenti. Link bidirezionali tra docs moduli sempre aggiornati e specifici. evita override inutili. Chi estende XotBaseResource  non deve avere protected static ?string $navigationIcon, ne protected static ?string $navigationGroup, ne protected static ?int $navigationSort ne  public static function getNavigationLabel(): string, ne public static function getPluralModelLabel(): string, ne public static function getModelLabel(): string ne  public static function table(Table $table): Table.