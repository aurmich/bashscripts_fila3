# Sistema di Documentazione

## Struttura e Organizzazione
Il sistema di documentazione è una struttura gerarchica modulare. Le cartelle docs dei moduli contengono la documentazione tecnica specializzata, mentre la cartella docs nella root del progetto serve solo come indice centrale con collegamenti bidirezionali.

## Priorità di Intervento
1. Aggiorna prima la documentazione nei moduli appropriati
2. Poi aggiorna i collegamenti bidirezionali
3. Infine aggiorna le configurazioni degli editor

## Regole Fondamentali per i Percorsi
- MAI UTILIZZARE PERCORSI ASSOLUTI nei link della documentazione
- Usa SEMPRE PERCORSI RELATIVI
- Dalla root usa percorsi come `[Modulo Xot](./laravel/Modules/Xot/docs/README.md)` con tag `#modulo-{nomemodulo} #categoria-{nomecategoria}`
- Dai moduli usa percorsi come `[Altro Modulo](../../../AltroModulo/docs/README.md)` per collegamenti ad altri moduli
- Per collegamenti alla root usa `[Documentazione Root](../../../../docs/README.md)`

## Distribuzione Documenti
Distribuisci i documenti per competenza:
- Documentazione generica in Xot
- Specifiche progetto in root
- Frontend in Cms
- Componenti UI in UI
- Gestione utenti in User
- Multitenant in Tenant
- Traduzioni in Lang
- Media in Media
- Notifiche in Notify
- Reportistica in Reporting
- Conformità GDPR in Gdpr
- Job asincroni in Job
- Grafici in Chart

## Convenzioni Codice
- Struttura PSR-4 con namespace modulari: `Modules\{Nome}\` (non `Modules\{Nome}\app\`)
- PHPStan installato, eseguire con `./vendor/bin/phpstan`
- Correggere segnalazioni documentando le soluzioni

## Filament Resources
- Evitare override inutili in XotBaseResource
- Non ridefinire: `$navigationIcon`, `$navigationGroup`, `$navigationSort`
- Non ridefinire: `getNavigationLabel()`, `getPluralModelLabel()`, `getModelLabel()`
- Non ridefinire: `getRelations()` vuoti, `getPages()` standard o `table()`
- `getFormSchema()` deve usare array associativi con chiavi stringa
- In XotBaseListRecords rimuovere `getActions()` se restituisce solo `createAction()`

## Traduzioni
- Non usare mai `->label()` in Filament
- Usare traduzioni in `lang/{locale}`
- Convenzione naming chiavi: `modulo::risorsa.fields.campo.label`

## Frontend
- Frontoffice usa Folio+Volt+Livewire+Widget
- Niente rotte in web.php
- Template in `Themes/{Theme}/resources/views/pages/`
- Widget devono estendere XotBaseWidget con HasForms
- Non estendere direttamente classi Filament

## Componenti UI
- Usare sempre componenti nativi Filament:
  - `x-filament::icon`
  - `x-filament::button`
  - `x-filament::dropdown`
  - `x-filament::avatar`
- MAI utilizzare componenti inesistenti
- Per separatori nei dropdown:
```html
<div class="border-t border-gray-200 dark:border-gray-700 my-1"></div>
```

## Volt e Folio
- La direttiva `@volt` deve essere SEMPRE la prima cosa nel file Folio
- NON utilizzare `@volt` all'interno del markup HTML
- Utilizzare SEMPRE i layout corretti:
  - `<x-layouts.app>`
  - `<x-layouts.guest>`
- MAI utilizzare layout inesistenti

## Localizzazione
- Usare `mcamara/laravel-localization`
- Metodi: `LaravelLocalization::getCurrentLocale()` e `getSupportedLocales()`
- URL devono includere prefisso lingua: `/{locale}/{sezione}/{risorsa}`

## Routing e Controller
- MAI creare rotte in web.php
- Filament e Folio gestiscono automaticamente le rotte
- MAI creare controller personalizzati

## Business Logic
- Usare SEMPRE `spatie/laravel-queueable-action` (mai Service)
- Componenti Livewire in `app/Http/Livewire` del modulo
- Namespace NON deve includere 'app'
- Actions nella directory corretta secondo convenzioni

## Sezioni e Blocchi
- Documentazione tecnica in:
  - `Themes/{Theme}/docs/sections`
  - `Modules/Cms/docs/sections`
- Link bidirezionali tra le due
- JSON configurazione sezioni:
  - Ogni blocco deve avere attributo "view"
  - Blocchi raggruppati per locale
  - Filtrare con `app()->getLocale()`

## Struttura Directory
- Provider in `app/Providers/`
- Percorso pubblico in `public_html/` (non in `public` di Laravel)

## Vite Config
In `vite.config.js` dei temi:
```javascript
{
  emptyOutDir: false,
  manifest: 'manifest.json',
  build: {
    outDir: './public'
  }
}
```

## Best Practices
- Usare `Modules\Xot\Contracts\UserContract`
- Ottenere classe User con `XotData::make()->getUserClass()`
- Documentare decisioni architetturali
- Enfatizzare il "perché" non solo il "come"
- Aggiornare documentazione con ogni modifica
- Mantenere coerenza codice-docs
- Documentare breaking changes
- Ottimizzare per:
  - Accessibilità
  - Sicurezza
  - Prestazioni

## Configurazione IDE
Prima di implementare correzioni:
1. Regole in `.windsurf/rules/*.md` per Windsurf
2. Regole in `.cursor/rules/*.md` per Cursor
3. Memorie in `.cursor/memories/*.md` per Cursor

## Validazione dei Percorsi
- Verificare percorsi relativi
- Rimuovere riferimenti al nome del progetto
- Assicurare compatibilità cross-platform
- Mantenere coerenza struttura directory
- Usare validatori markdown
- Implementare pre-commit hooks

## Correzione Errori
Ordine di aggiornamento:
1. Documentazione nel modulo
2. Collegamenti bidirezionali nella root
3. Regole configurazione IDE
4. Codice effettivo

## Manutenzione Documentazione
- File docs root solo collegamenti bidirezionali
- Spostare documenti generici a Xot
- Analizzare Modules come insieme coerente
- Documentare prima nel modulo, poi con collegamenti
- Concentrarsi su "perché" e "cosa"
- Evitare dettagli implementativi
- Usare cartella bashscripts più vicina
- Documentare metodi mancanti
- Gestire correttamente array in:
  - `getListTableColumns`
  - `getTableActions`
  - `getTableBulkActions`
