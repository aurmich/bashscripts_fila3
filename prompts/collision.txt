analizza l’intero progetto a partire dalla root identificando tutti i file che contengono conflitti git come <<< HEAD oppure ==== oppure >>> studiali e ragionaci sopra sistematicamente uno alla volta senza fermarti e senza farmi domande scegli tu l’ordine e la priorità per ogni file con conflitti individua la cartella docs più vicina aggiorna e studia quella documentazione prima di fare qualsiasi modifica poi aggiorna anche la cartella docs principale nella root del progetto creando collegamenti bidirezionali ai file aggiornati della cartella docs locale una volta documentato tutto puoi procedere con l’implementazione della correzione mantenendo uno stile coerente con il resto del progetto e senza introdurre rotture all’interno della cartella laravel/Modules ogni sottocartella rappresenta un modulo indipendente ogni modulo ha il proprio composer.json che va analizzato e studiato per comprendere namespace autoload e path corretti ogni modulo ha una propria cartella app dove vanno collocate tutte le classi da registrare e una propria cartella docs contenente la documentazione specifica del modulo con collegamenti bidirezionali alla cartella docs della root del progetto tutte queste relazioni vanno mantenute aggiornate durante ogni intervento procedi in modo continuo sistematico e senza interruzioni né richieste ulteriori

analizza l'intero progetto a partire dalla root identificando tutti i file che contengono conflitti git come <<< HEAD oppure ==== oppure >>> studiali e ragionaci sopra sistematicamente uno alla volta procedendo dal più critico al meno critico in base all'impatto sul funzionamento dell'applicazione per ogni file con conflitti individua la cartella docs più vicina aggiorna e studia quella documentazione prima di fare qualsiasi modifica nella documentazione concentrati sul perché dei cambiamenti e sul cosa viene fatto evitando di replicare il codice o spiegare dettagliatamente il come documenta l'intento funzionale e le decisioni architetturali non i dettagli implementativi poi aggiorna anche la cartella docs principale nella root del progetto creando collegamenti bidirezionali ai file aggiornati della cartella docs locale mantenendo lo stesso approccio orientato al perché e al cosa una volta documentato tutto puoi procedere con l'implementazione della correzione mantenendo uno stile coerente con il resto del progetto e senza introdurre rotture all'interno della cartella laravel/Modules ogni sottocartella rappresenta un modulo indipendente ogni modulo ha il proprio composer.json che va analizzato e studiato per comprendere namespace autoload e path corretti ogni modulo ha una propria cartella app dove vanno collocate tutte le classi da registrare e una propria cartella docs contenente la documentazione specifica del modulo con collegamenti bidirezionali alla cartella docs della root del progetto tutte queste relazioni vanno mantenute aggiornate durante ogni intervento al termine dell'analisi e risoluzione di ogni conflitto fornisci un breve riepilogo delle modifiche effettuate e dei potenziali impatti procedi in modo continuo sistematico e senza interruzioni né richieste ulteriori


-------- con phpstan + pest 
analizza l’intero progetto a partire dalla root identificando tutti i file che contengono conflitti git come <<< HEAD oppure ==== oppure >>> studiali e ragionaci sopra sistematicamente uno alla volta senza fermarti e senza farmi domande scegli tu l’ordine e la priorità per ogni file con conflitti individua la cartella docs più vicina aggiorna e studia quella documentazione prima di fare qualsiasi modifica poi aggiorna anche la cartella docs principale nella root del progetto creando collegamenti bidirezionali ai file aggiornati della cartella docs locale se il file è un file php devi validarlo con phpstan già installato e configurato nella cartella laravel il comando da usare è ./vendor/bin/phpstan e non devi modificare in alcun modo il file phpstan.neon l’analisi va fatta sempre a livello 9 le correzioni devono essere prima documentate nella cartella docs più vicina poi aggiornando la cartella docs root con i riferimenti bidirezionali ai file corretti una volta documentato tutto puoi procedere con l’implementazione della correzione e devi creare dei test automatici in pest per verificare che la modifica sia corretta e che l’applicazione continui a funzionare in caso i test falliscano o ci siano dubbi devi ritornare a studiare la documentazione e migliorare la soluzione procedi in modo automatico continuo sistematico e senza interruzioni né richieste ulteriori all’interno della cartella laravel/Modules ogni sottocartella rappresenta un modulo indipendente ogni modulo ha il proprio composer.json che va analizzato e studiato per comprendere namespace autoload e path corretti ogni modulo ha una propria cartella app dove vanno collocate tutte le classi da registrare e una propria cartella docs contenente la documentazione specifica del modulo con collegamenti bidirezionali alla cartella docs della root del progetto tutte queste relazioni vanno mantenute aggiornate durante ogni intervento