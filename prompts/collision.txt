<<<<<<< HEAD
Trova tutti i file contenenti git collision partendo dalla root del progetto. Analizza ciascun file con conflitti dando priorità in base all'impatto funzionale. Studia attentamente le differenze tra le versioni in conflitto per comprenderne lo scopo e il contesto. Ogni conflitto deve essere analizzato e risolto manualmente con ragionamento: non è ammesso l'uso di risoluzioni automatiche né la generazione di script per l'automazione. Per ogni file identifica la cartella "docs" più vicina, leggila e aggiornala con informazioni relative agli obiettivi funzionali e alle decisioni architetturali, evitando dettagli implementativi. Aggiorna anche la cartella "docs" principale nella root del progetto creando collegamenti bidirezionali tra la documentazione locale e quella globale, includendo anche le altre documentazioni eventualmente interessate. Nella cartella "laravel/Modules" ogni sottocartella è un modulo indipendente con proprio "composer.json", namespace, autoload, cartella "app" per le classi e documentazione dedicata. Mantieni aggiornate le relazioni tra la documentazione del modulo e quella principale tramite backlink bidirezionali. Dopo aver aggiornato tutta la documentazione, implementa manualmente una correzione coerente con lo stile e l'architettura del progetto. Durante la scansione della documentazione assicurati che ogni file ".md" abbia almeno due collegamenti in ingresso provenienti da altri file ".md". Se mancano, crea i backlink più significativi in base al contenuto e al contesto. Procedi in modo sistematico e continuo ma senza alcuna automazione cieca. Al termine fornisci un riepilogo con i file corretti, la documentazione aggiornata, i backlink creati, gli impatti rilevati e le motivazioni delle scelte adottate. Si devi sistemare e migliorare tutti i files che hanno collisioni, quando tocchi un file devi sempre farlo pensandolo per phpstan a livello 10.
=======
<<<<<<< HEAD
<<<<<<< Updated upstream
<<<<<<< HEAD
Trova tutti i file contenenti git collision partendo dalla root del progetto. Analizza ciascun file con conflitti dando priorità in base all'impatto funzionale. Studia attentamente le differenze tra le versioni in conflitto per comprenderne lo scopo e il contesto. Ogni conflitto deve essere analizzato e risolto manualmente con ragionamento: non è ammesso l'uso di risoluzioni automatiche né la generazione di script per l'automazione. Per ogni file identifica la cartella "docs" più vicina, leggila e aggiornala con informazioni relative agli obiettivi funzionali e alle decisioni architetturali, evitando dettagli implementativi. Aggiorna anche la cartella "docs" principale nella root del progetto creando collegamenti bidirezionali tra la documentazione locale e quella globale, includendo anche le altre documentazioni eventualmente interessate. Nella cartella "laravel/Modules" ogni sottocartella è un modulo indipendente con proprio "composer.json", namespace, autoload, cartella "app" per le classi e documentazione dedicata. Mantieni aggiornate le relazioni tra la documentazione del modulo e quella principale tramite backlink bidirezionali. Dopo aver aggiornato tutta la documentazione, implementa manualmente una correzione coerente con lo stile e l'architettura del progetto. Durante la scansione della documentazione assicurati che ogni file ".md" abbia almeno due collegamenti in ingresso provenienti da altri file ".md". Se mancano, crea i backlink più significativi in base al contenuto e al contesto. Procedi in modo sistematico e continuo ma senza alcuna automazione cieca. Al termine fornisci un riepilogo con i file corretti, la documentazione aggiornata, i backlink creati, gli impatti rilevati e le motivazioni delle scelte adottate. Si devi sistemare e migliorare tutti i files che hanno collisioni, quando tocchi un file devi sempre farlo pensandolo per phpstan a livello 10.
=======
Trova tutti i file contenenti git collision partendo dalla root del progetto. Analizza ciascun file con conflitti dando priorità in base all’impatto funzionale. Studia attentamente le differenze tra le versioni in conflitto per comprenderne lo scopo e il contesto. Ogni conflitto deve essere analizzato e risolto manualmente con ragionamento: non è ammesso l’uso di risoluzioni automatiche né la generazione di script per l’automazione. Per ogni file identifica la cartella "docs" più vicina, leggila e aggiornala con informazioni relative agli obiettivi funzionali e alle decisioni architetturali, evitando dettagli implementativi. Aggiorna anche la cartella "docs" principale nella root del progetto creando collegamenti bidirezionali tra la documentazione locale e quella globale, includendo anche le altre documentazioni eventualmente interessate. Nella cartella "laravel/Modules" ogni sottocartella è un modulo indipendente con proprio "composer.json", namespace, autoload, cartella "app" per le classi e documentazione dedicata. Mantieni aggiornate le relazioni tra la documentazione del modulo e quella principale tramite backlink bidirezionali. Dopo aver aggiornato tutta la documentazione, implementa manualmente una correzione coerente con lo stile e l’architettura del progetto. Durante la scansione della documentazione assicurati che ogni file ".md" abbia almeno due collegamenti in ingresso provenienti da altri file ".md". Se mancano, crea i backlink più significativi in base al contenuto e al contesto. Procedi in modo sistematico e continuo ma senza alcuna automazione cieca. Al termine fornisci un riepilogo con i file corretti, la documentazione aggiornata, i backlink creati, gli impatti rilevati e le motivazioni delle scelte adottate.
>>>>>>> 3a208a9 (.)
=======
Trova tutti i file contenenti git collision partendo dalla root del progetto. Analizza ciascun file con conflitti dando priorità in base all'impatto funzionale. Studia attentamente le differenze tra le versioni in conflitto per comprenderne lo scopo e il contesto. Ogni conflitto deve essere analizzato e risolto manualmente con ragionamento: non è ammesso l'uso di risoluzioni automatiche né la generazione di script per l'automazione. Per ogni file identifica la cartella "docs" più vicina, leggila e aggiornala con informazioni relative agli obiettivi funzionali e alle decisioni architetturali, evitando dettagli implementativi. Aggiorna anche la cartella "docs" principale nella root del progetto creando collegamenti bidirezionali tra la documentazione locale e quella globale, includendo anche le altre documentazioni eventualmente interessate. Nella cartella "laravel/Modules" ogni sottocartella è un modulo indipendente con proprio "composer.json", namespace, autoload, cartella "app" per le classi e documentazione dedicata. Mantieni aggiornate le relazioni tra la documentazione del modulo e quella principale tramite backlink bidirezionali. Dopo aver aggiornato tutta la documentazione, implementa manualmente una correzione coerente con lo stile e l'architettura del progetto. Durante la scansione della documentazione assicurati che ogni file ".md" abbia almeno due collegamenti in ingresso provenienti da altri file ".md". Se mancano, crea i backlink più significativi in base al contenuto e al contesto. Procedi in modo sistematico e continuo ma senza alcuna automazione cieca. Al termine fornisci un riepilogo con i file corretti, la documentazione aggiornata, i backlink creati, gli impatti rilevati e le motivazioni delle scelte adottate. Si devi sistemare e migliorare tutti i files che hanno collisioni, quando tocchi un file devi sempre farlo pensandolo per phpstan a livello 10.
>>>>>>> Stashed changes
=======
analizza l'intero progetto a partire dalla root identificando tutti i file che contengono conflitti git come <<< HEAD oppure ==== oppure >>> studiali e ragionaci sopra sistematicamente uno alla volta procedendo dal più critico al meno critico in base all'impatto sul funzionamento dell'applicazione ogni conflitto va studiato nel dettaglio esaminando le differenze tra le versioni in conflitto e comprendendo lo scopo funzionale di ciascuna modifica non utilizzare risoluzioni automatiche o semplicistiche ma ragiona sul contesto delle modifiche il loro intento e la storia dei cambiamenti per ogni file con conflitti individua la cartella docs più vicina aggiorna e studia quella documentazione prima di fare qualsiasi modifica nella documentazione concentrati sul perché dei cambiamenti e sul cosa viene fatto evitando di replicare il codice o spiegare dettagliatamente il come documenta l'intento funzionale e le decisioni architetturali non i dettagli implementativi poi aggiorna anche la cartella docs principale nella root del progetto creando collegamenti bidirezionali ai file aggiornati della cartella docs locale mantenendo lo stesso approccio orientato al perché e al cosa una volta documentato tutto puoi procedere con l'implementazione della correzione mantenendo uno stile coerente con il resto del progetto e senza introdurre rotture all'interno della cartella laravel/Modules ogni sottocartella rappresenta un modulo indipendente ogni modulo ha il proprio composer.json che va analizzato e studiato per comprendere namespace autoload e path corretti ogni modulo ha una propria cartella app dove vanno collocate tutte le classi da registrare e una propria cartella docs contenente la documentazione specifica del modulo con collegamenti bidirezionali alla cartella docs della root del progetto tutte queste relazioni vanno mantenute aggiornate durante ogni intervento al termine dell'analisi e risoluzione di ogni conflitto fornisci un breve riepilogo delle modifiche effettuate e dei potenziali impatti spiegando il ragionamento che ha guidato le tue scelte procedi in modo continuo sistematico e senza interruzioni né richieste ulteriori


-------- con phpstan + pest 
analizza l’intero progetto a partire dalla root identificando tutti i file che contengono conflitti git come <<< HEAD oppure ==== oppure >>> studiali e ragionaci sopra sistematicamente uno alla volta senza fermarti e senza farmi domande scegli tu l’ordine e la priorità per ogni file con conflitti individua la cartella docs più vicina aggiorna e studia quella documentazione prima di fare qualsiasi modifica poi aggiorna anche la cartella docs principale nella root del progetto creando collegamenti bidirezionali ai file aggiornati della cartella docs locale se il file è un file php devi validarlo con phpstan già installato e configurato nella cartella laravel il comando da usare è ./vendor/bin/phpstan e non devi modificare in alcun modo il file phpstan.neon l’analisi va fatta sempre a livello 9 le correzioni devono essere prima documentate nella cartella docs più vicina poi aggiornando la cartella docs root con i riferimenti bidirezionali ai file corretti una volta documentato tutto puoi procedere con l’implementazione della correzione e devi creare dei test automatici in pest per verificare che la modifica sia corretta e che l’applicazione continui a funzionare in caso i test falliscano o ci siano dubbi devi ritornare a studiare la documentazione e migliorare la soluzione procedi in modo automatico continuo sistematico e senza interruzioni né richieste ulteriori all’interno della cartella laravel/Modules ogni sottocartella rappresenta un modulo indipendente ogni modulo ha il proprio composer.json che va analizzato e studiato per comprendere namespace autoload e path corretti ogni modulo ha una propria cartella app dove vanno collocate tutte le classi da registrare e una propria cartella docs contenente la documentazione specifica del modulo con collegamenti bidirezionali alla cartella docs della root del progetto tutte queste relazioni vanno mantenute aggiornate durante ogni intervento
>>>>>>> 53079ab (.)
>>>>>>> 7404b54 (.)
