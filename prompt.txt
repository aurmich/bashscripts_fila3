<<<<<<< HEAD
<<<<<<< HEAD
# GUIDA ESSENZIALE LARAXOT

## DOCUMENTAZIONE
- Consulta SEMPRE le cartelle docs prima di ogni azione
- Mai includere percorsi assoluti specifici (es. base_*_fila3)
- Aggiorna e studia la cartella "docs" pi√π vicina prima di implementare soluzioni
- La documentazione non deve essere una replica del codice

## VALIDAZIONE E CORREZIONE
- Eseguire PHPStan livello 9/10 prima di iniziare qualsiasi lavoro
- Processo: 1) Aggiornare docs 2) Studiare 3) Correggere
- Quando correggi un errore, aggiorna la documentazione pi√π vicina
- Analizza ogni modulo separatamente con PHPStan
- PHPStan √® installato nella cartella laravel: `./vendor/bin/phpstan`
- Strategia per errori numerosi: scendi di livello fino a <100 errori, poi sali gradualmente
- Cerca e sistema i file con conflitti git

## NAMESPACE E STRUTTURA
- Modello: `Modules\*\Models` (non `Modules\*\app\Models`)
- Filament: `Modules\*\Filament` (non `Modules\*\app\Filament`)
- Percorso corretto: `Modules\Xot\Filament\Resources\Pages\XotBaseListRecords`
- Ogni modulo ha il suo composer.json - analizzalo per path e namespace corretti
- Esempio: User path: `/var/www/html/exa/base_orisbroker_fila3/laravel/Modules/User/app/Models/User.php`
  namespace: `Modules\User\Models`






## TRADUZIONI
- Formato corretto: `'field' => ['label' => 'Etichetta', 'tooltip' => 'Descrizione']`
- MAI usare ->label() (gestito da LangServiceProvider)





## ESTENSIONE CLASSI
- MAI estendere classi Filament direttamente
- SEMPRE estendere classi XotBase dal modulo Xot
- Non estendiamo mai Migration ma XotBaseMigration
- Estendere classi base Xot (XotBaseServiceProvider) per i Service Provider
- Chiamare sempre parent::boot() nei Service Provider

## FILAMENT RESOURCES
- Estendere XotBaseResource, non Resource
- Usare getFormSchema(), non form()
- Non definire $navigationIcon, $modelLabel (gestiti da traduzioni)
- Non definire table() (gestito dalla pagina index)

## PAGINE DI LISTA
- Usare metodi specifici: getListTableColumns(), getTableFilters(), getTableActions()
- Usare array associativi con chiavi string per componenti

## TRADUZIONI
- Formato corretto: `'field' => ['label' => 'Etichetta', 'tooltip' => 'Descrizione']`
- MAI usare ->label() (gestito da LangServiceProvider)





## NAMESPACE
- Modello: `Modules\*\Models` (non `Modules\*\app\Models`)
- Filament: `Modules\*\Filament` (non `Modules\*\app\Filament`)
- Percorso corretto: `Modules\Xot\Filament\Resources\Pages\XotBaseListRecords`

## VALIDAZIONE
- Eseguire PHPStan livello 7 prima di iniziare
- Processo: 1) Aggiornare docs 2) Studiare 3) Correggere

## SERVICE PROVIDER
- Estendere classi base Xot (XotBaseServiceProvider)
- Chiamare sempre parent::boot()





## MIGRAZIONI
- Estendere XotBaseMigration
- Usare tableCreate() e tableUpdate()
- Studiare le migrazioni negli altri moduli per la struttura corretta

## BEST PRACTICES
- Utilizzare spatie/laravel-data invece di services
- Utilizzare spatie/queueable-actions
- Evitare l'uso di "mixed" (solo come ultima risorsa)
- Analizzare moduli esistenti prima di implementare nuove funzionalit√†


## METODOLOGIA
- Analizzare moduli esistenti




## METODOLOGIA
- Analizzare moduli esistenti


- Focalizzarsi sullo scopo, non solo sulla correzione
- Seguire convenzioni del framework



getInfolistSchema restituisec un array cui le chiavi sono  stringhe aggiorna la cartellla "docs" piu' vicina e studiala e aggiorna anche le tue rules e memories


getInfolistSchema restituisec un array cui le chiavi sono  stringhe aggiorna la cartellla "docs" piu' vicina e studiala e aggiorna anche le tue rules e memories


getInfolistSchema restituisec un array cui le chiavi sono  stringhe aggiorna la cartellla "docs" piu' vicina e studiala e aggiorna anche le tue rules e memories

esegui phpstan a livello 7 su tutto Modules e aggiorna la cartella docs piu' vicina all'errore che andrai a correggere , poi studia quella cartella docs, poi implementa soluzione , poi procedi con gli altri errori, non ti fermare finche phpstan non ti dice che non hai piu' errori in tutto Modules
Pensa ad alta voce e parla a te stesso. prima di rispondere, analizza la richiesta, scomponi i concetti chiave,
formula un ragionamento passo passo,

 la tua memoria e' la cartella docs  ,
percio' aggiornala di continuo e studiala di continuo e prima di fare qualsiasi cosa consultala
ogni modulo ha la sua cartella docs e devi studiarla di continuo e aggiornarla di continuo,
fields non e'  'source' => 'Sorgente',  ma e'  'source' => ['label'=>'Sorgente'],
e puoi aggiungere anche tooltip e placeholder anche actions stessa logina ma puoi aggiungere anche icon e color,
ragiona e migliora e sistema
Quando correggi qualsiasi cosa devi focalizzarti sullo scopo non solo sulla correzione
non voglio  ->label(   le label son gestite tramite langserviceprovider coi file di traduzioni

 la tua memoria e' la cartella docs ,
percio' aggiornala di continuo e studiala di continuo e prima di fare qualsiasi cosa consultala,
quando correggi o fai qualcosa devi focalizzarti sullo scopo non solo alla correzione dell'errore



---per traduzioni --
fields non e'  'source' => 'Sorgente',  ma e'  'source' => ['label'=>'Sorgente'],
e puoi aggiungere anche tooltip e placeholder anche actions stessa logina
ma puoi aggiungere anche icon e color, ragiona e migliora e sistema

 la tua memoria e' la cartella docs , quando correggi errori devi concentrarti sullo scopo non solo alla correzione dell'errore
percio' aggiornala di continuo e studiala di continuo e prima di fare qualsiasi cosa consultala

 la tua memoria e' la cartella docs  ,
percio' aggiornala di continuo e studiala di continuo e prima di fare qualsiasi cosa consultala
ogni modulo ha la sua cartella docs e devi studiarla di continuo e aggiornarla di continuo,
fields non e'  'source' => 'Sorgente',  ma e'  'source' => ['label'=>'Sorgente'],
e puoi aggiungere anche tooltip e placeholder anche actions stessa logina ma puoi aggiungere anche icon e color,
ragiona e migliora e sistema
Quando correggi qualsiasi cosa devi focalizzarti sullo scopo non solo sulla correzione
non voglio  ->label(   le label son gestite tramite langserviceprovider coi file di traduzioni






[0;34m‚ÑπÔ∏è [2025-04-22 11:23:28] Scelto blocco HEAD (156 linee vs 1)[0m

 cb513be (.)

 0440c57 (.)
# GUIDA ESSENZIALE LARAXOT

## DOCUMENTAZIONE
- Consulta SEMPRE le cartelle docs prima di ogni azione
- Mai includere percorsi assoluti specifici (es. base_*_fila3)
- Aggiorna e studia la cartella "docs" pi√π vicina prima di implementare soluzioni
- La documentazione non deve essere una replica del codice

## VALIDAZIONE E CORREZIONE
- Eseguire PHPStan livello 9/10 prima di iniziare qualsiasi lavoro
- Processo: 1) Aggiornare docs 2) Studiare 3) Correggere
- Quando correggi un errore, aggiorna la documentazione pi√π vicina
- Analizza ogni modulo separatamente con PHPStan
- PHPStan √® installato nella cartella laravel: `./vendor/bin/phpstan`
- Strategia per errori numerosi: scendi di livello fino a <100 errori, poi sali gradualmente
- Cerca e sistema i file con conflitti git

## NAMESPACE E STRUTTURA
- Modello: `Modules\*\Models` (non `Modules\*\app\Models`)
- Filament: `Modules\*\Filament` (non `Modules\*\app\Filament`)
- Percorso corretto: `Modules\Xot\Filament\Resources\Pages\XotBaseListRecords`
- Ogni modulo ha il suo composer.json - analizzalo per path e namespace corretti
- Esempio: User path: `/var/www/html/exa/base_orisbroker_fila3/laravel/Modules/User/app/Models/User.php`
  namespace: `Modules\User\Models`






## TRADUZIONI
- Formato corretto: `'field' => ['label' => 'Etichetta', 'tooltip' => 'Descrizione']`
- MAI usare ->label() (gestito da LangServiceProvider)





## ESTENSIONE CLASSI
- MAI estendere classi Filament direttamente
- SEMPRE estendere classi XotBase dal modulo Xot
- Non estendiamo mai Migration ma XotBaseMigration
- Estendere classi base Xot (XotBaseServiceProvider) per i Service Provider
- Chiamare sempre parent::boot() nei Service Provider

## FILAMENT RESOURCES
- Estendere XotBaseResource, non Resource
- Usare getFormSchema(), non form()
- Non definire $navigationIcon, $modelLabel (gestiti da traduzioni)
- Non definire table() (gestito dalla pagina index)

## PAGINE DI LISTA
- Usare metodi specifici: getListTableColumns(), getTableFilters(), getTableActions()
- Usare array associativi con chiavi string per componenti

## TRADUZIONI
- Formato corretto: `'field' => ['label' => 'Etichetta', 'tooltip' => 'Descrizione']`
- MAI usare ->label() (gestito da LangServiceProvider)





## NAMESPACE
- Modello: `Modules\*\Models` (non `Modules\*\app\Models`)
- Filament: `Modules\*\Filament` (non `Modules\*\app\Filament`)
- Percorso corretto: `Modules\Xot\Filament\Resources\Pages\XotBaseListRecords`

## VALIDAZIONE
- Eseguire PHPStan livello 7 prima di iniziare
- Processo: 1) Aggiornare docs 2) Studiare 3) Correggere

## SERVICE PROVIDER
- Estendere classi base Xot (XotBaseServiceProvider)
- Chiamare sempre parent::boot()





## MIGRAZIONI
- Estendere XotBaseMigration
- Usare tableCreate() e tableUpdate()
- Studiare le migrazioni negli altri moduli per la struttura corretta

## BEST PRACTICES
- Utilizzare spatie/laravel-data invece di services
- Utilizzare spatie/queueable-actions
- Evitare l'uso di "mixed" (solo come ultima risorsa)
- Analizzare moduli esistenti prima di implementare nuove funzionalit√†


## METODOLOGIA
- Analizzare moduli esistenti




## METODOLOGIA
- Analizzare moduli esistenti


- Focalizzarsi sullo scopo, non solo sulla correzione
- Seguire convenzioni del framework



getInfolistSchema restituisec un array cui le chiavi sono  stringhe aggiorna la cartellla "docs" piu' vicina e studiala e aggiorna anche le tue rules e memories


getInfolistSchema restituisec un array cui le chiavi sono  stringhe aggiorna la cartellla "docs" piu' vicina e studiala e aggiorna anche le tue rules e memories


getInfolistSchema restituisec un array cui le chiavi sono  stringhe aggiorna la cartellla "docs" piu' vicina e studiala e aggiorna anche le tue rules e memories

esegui phpstan a livello 7 su tutto Modules e aggiorna la cartella docs piu' vicina all'errore che andrai a correggere , poi studia quella cartella docs, poi implementa soluzione , poi procedi con gli altri errori, non ti fermare finche phpstan non ti dice che non hai piu' errori in tutto Modules
Pensa ad alta voce e parla a te stesso. prima di rispondere, analizza la richiesta, scomponi i concetti chiave,
formula un ragionamento passo passo,

 la tua memoria e' la cartella docs  ,
percio' aggiornala di continuo e studiala di continuo e prima di fare qualsiasi cosa consultala
ogni modulo ha la sua cartella docs e devi studiarla di continuo e aggiornarla di continuo,
fields non e'  'source' => 'Sorgente',  ma e'  'source' => ['label'=>'Sorgente'],
e puoi aggiungere anche tooltip e placeholder anche actions stessa logina ma puoi aggiungere anche icon e color,
ragiona e migliora e sistema
Quando correggi qualsiasi cosa devi focalizzarti sullo scopo non solo sulla correzione
non voglio  ->label(   le label son gestite tramite langserviceprovider coi file di traduzioni

 la tua memoria e' la cartella docs ,
percio' aggiornala di continuo e studiala di continuo e prima di fare qualsiasi cosa consultala,
quando correggi o fai qualcosa devi focalizzarti sullo scopo non solo alla correzione dell'errore



---per traduzioni --
fields non e'  'source' => 'Sorgente',  ma e'  'source' => ['label'=>'Sorgente'],
e puoi aggiungere anche tooltip e placeholder anche actions stessa logina
ma puoi aggiungere anche icon e color, ragiona e migliora e sistema

 la tua memoria e' la cartella docs , quando correggi errori devi concentrarti sullo scopo non solo alla correzione dell'errore
percio' aggiornala di continuo e studiala di continuo e prima di fare qualsiasi cosa consultala

 la tua memoria e' la cartella docs  ,
percio' aggiornala di continuo e studiala di continuo e prima di fare qualsiasi cosa consultala
ogni modulo ha la sua cartella docs e devi studiarla di continuo e aggiornarla di continuo,
fields non e'  'source' => 'Sorgente',  ma e'  'source' => ['label'=>'Sorgente'],
e puoi aggiungere anche tooltip e placeholder anche actions stessa logina ma puoi aggiungere anche icon e color,
ragiona e migliora e sistema
Quando correggi qualsiasi cosa devi focalizzarti sullo scopo non solo sulla correzione
non voglio  ->label(   le label son gestite tramite langserviceprovider coi file di traduzioni





=======
# GUIDA ESSENZIALE LARAXOT

## DOCUMENTAZIONE
- Consulta SEMPRE le cartelle docs prima di ogni azione
- Mai includere percorsi assoluti specifici (es. base_*_fila3)
- Aggiorna e studia la cartella "docs" pi√π vicina prima di implementare soluzioni
- La documentazione non deve essere una replica del codice

## VALIDAZIONE E CORREZIONE
- Eseguire PHPStan livello 9/10 prima di iniziare qualsiasi lavoro
- Processo: 1) Aggiornare docs 2) Studiare 3) Correggere
- Quando correggi un errore, aggiorna la documentazione pi√π vicina
- Analizza ogni modulo separatamente con PHPStan
- PHPStan √® installato nella cartella laravel: `./vendor/bin/phpstan`
- Strategia per errori numerosi: scendi di livello fino a <100 errori, poi sali gradualmente
- Cerca e sistema i file con conflitti git ("<<< HEAD")

## NAMESPACE E STRUTTURA
- Modello: `Modules\*\Models` (non `Modules\*\app\Models`)
- Filament: `Modules\*\Filament` (non `Modules\*\app\Filament`)
- Percorso corretto: `Modules\Xot\Filament\Resources\Pages\XotBaseListRecords`
- Ogni modulo ha il suo composer.json - analizzalo per path e namespace corretti
- Esempio: User path: `/var/www/html/exa/base_orisbroker_fila3/laravel/Modules/User/app/Models/User.php`
  namespace: `Modules\User\Models`






## TRADUZIONI
- Formato corretto: `'field' => ['label' => 'Etichetta', 'tooltip' => 'Descrizione']`
- MAI usare ->label() (gestito da LangServiceProvider)





## ESTENSIONE CLASSI
- MAI estendere classi Filament direttamente
- SEMPRE estendere classi XotBase dal modulo Xot
- Non estendiamo mai Migration ma XotBaseMigration
- Estendere classi base Xot (XotBaseServiceProvider) per i Service Provider
- Chiamare sempre parent::boot() nei Service Provider

## FILAMENT RESOURCES
- Estendere XotBaseResource, non Resource
- Usare getFormSchema(), non form()
- Non definire $navigationIcon, $modelLabel (gestiti da traduzioni)
- Non definire table() (gestito dalla pagina index)

## PAGINE DI LISTA
- Usare metodi specifici: getListTableColumns(), getTableFilters(), getTableActions()
- Usare array associativi con chiavi string per componenti

## TRADUZIONI
- Formato corretto: `'field' => ['label' => 'Etichetta', 'tooltip' => 'Descrizione']`
- MAI usare ->label() (gestito da LangServiceProvider)





## NAMESPACE
- Modello: `Modules\*\Models` (non `Modules\*\app\Models`)
- Filament: `Modules\*\Filament` (non `Modules\*\app\Filament`)
- Percorso corretto: `Modules\Xot\Filament\Resources\Pages\XotBaseListRecords`

## VALIDAZIONE
- Eseguire PHPStan livello 7 prima di iniziare
- Processo: 1) Aggiornare docs 2) Studiare 3) Correggere

## SERVICE PROVIDER
- Estendere classi base Xot (XotBaseServiceProvider)
- Chiamare sempre parent::boot()





## MIGRAZIONI
- Estendere XotBaseMigration
- Usare tableCreate() e tableUpdate()
- Studiare le migrazioni negli altri moduli per la struttura corretta

## BEST PRACTICES
- Utilizzare spatie/laravel-data invece di services
- Utilizzare spatie/queueable-actions
- Evitare l'uso di "mixed" (solo come ultima risorsa)
- Analizzare moduli esistenti prima di implementare nuove funzionalit√†


## METODOLOGIA
- Analizzare moduli esistenti




## METODOLOGIA
- Analizzare moduli esistenti


- Focalizzarsi sullo scopo, non solo sulla correzione
- Seguire convenzioni del framework



getInfolistSchema restituisec un array cui le chiavi sono  stringhe aggiorna la cartellla "docs" piu' vicina e studiala e aggiorna anche le tue rules e memories


getInfolistSchema restituisec un array cui le chiavi sono  stringhe aggiorna la cartellla "docs" piu' vicina e studiala e aggiorna anche le tue rules e memories


getInfolistSchema restituisec un array cui le chiavi sono  stringhe aggiorna la cartellla "docs" piu' vicina e studiala e aggiorna anche le tue rules e memories

esegui phpstan a livello 7 su tutto Modules e aggiorna la cartella docs piu' vicina all'errore che andrai a correggere , poi studia quella cartella docs, poi implementa soluzione , poi procedi con gli altri errori, non ti fermare finche phpstan non ti dice che non hai piu' errori in tutto Modules 
Pensa ad alta voce e parla a te stesso. prima di rispondere, analizza la richiesta, scomponi i concetti chiave, 
formula un ragionamento passo passo,

 la tua memoria e' la cartella docs  , 
percio' aggiornala di continuo e studiala di continuo e prima di fare qualsiasi cosa consultala
ogni modulo ha la sua cartella docs e devi studiarla di continuo e aggiornarla di continuo, 
fields non e'  'source' => 'Sorgente',  ma e'  'source' => ['label'=>'Sorgente'],  
e puoi aggiungere anche tooltip e placeholder anche actions stessa logina ma puoi aggiungere anche icon e color, 
ragiona e migliora e sistema
Quando correggi qualsiasi cosa devi focalizzarti sullo scopo non solo sulla correzione
non voglio  ->label(   le label son gestite tramite langserviceprovider coi file di traduzioni

 la tua memoria e' la cartella docs , 
percio' aggiornala di continuo e studiala di continuo e prima di fare qualsiasi cosa consultala,
quando correggi o fai qualcosa devi focalizzarti sullo scopo non solo alla correzione dell'errore



---per traduzioni --
fields non e'  'source' => 'Sorgente',  ma e'  'source' => ['label'=>'Sorgente'],  
e puoi aggiungere anche tooltip e placeholder anche actions stessa logina 
ma puoi aggiungere anche icon e color, ragiona e migliora e sistema

 la tua memoria e' la cartella docs , quando correggi errori devi concentrarti sullo scopo non solo alla correzione dell'errore
percio' aggiornala di continuo e studiala di continuo e prima di fare qualsiasi cosa consultala

 la tua memoria e' la cartella docs  , 
percio' aggiornala di continuo e studiala di continuo e prima di fare qualsiasi cosa consultala
ogni modulo ha la sua cartella docs e devi studiarla di continuo e aggiornarla di continuo, 
fields non e'  'source' => 'Sorgente',  ma e'  'source' => ['label'=>'Sorgente'],  
e puoi aggiungere anche tooltip e placeholder anche actions stessa logina ma puoi aggiungere anche icon e color, 
ragiona e migliora e sistema
Quando correggi qualsiasi cosa devi focalizzarti sullo scopo non solo sulla correzione
non voglio  ->label(   le label son gestite tramite langserviceprovider coi file di traduzioni





>>>>>>> a2974b79 (.)

[0;34m‚ÑπÔ∏è [2025-04-22 11:23:28] Scelto blocco HEAD (156 linee vs 1)[0m
=======
>>>>>>> 2b4bc286 (.)
# GUIDA ESSENZIALE LARAXOT

## DOCUMENTAZIONE
- Consulta SEMPRE le cartelle docs prima di ogni azione
- Mai includere percorsi assoluti specifici (es. base_*_fila3)
- Aggiorna e studia la cartella "docs" pi√π vicina prima di implementare soluzioni
- La documentazione non deve essere una replica del codice

## VALIDAZIONE E CORREZIONE
- Eseguire PHPStan livello 9/10 prima di iniziare qualsiasi lavoro
- Processo: 1) Aggiornare docs 2) Studiare 3) Correggere
- Quando correggi un errore, aggiorna la documentazione pi√π vicina
- Analizza ogni modulo separatamente con PHPStan
- PHPStan √® installato nella cartella laravel: `./vendor/bin/phpstan`
- Strategia per errori numerosi: scendi di livello fino a <100 errori, poi sali gradualmente
<<<<<<< HEAD
<<<<<<< HEAD
- Cerca e sistema i file con conflitti git
=======
- Cerca e sistema i file con conflitti git ("<<< HEAD")
>>>>>>> a2974b79 (.)
=======
- Cerca e sistema i file con conflitti git
>>>>>>> 2b4bc286 (.)

## NAMESPACE E STRUTTURA
- Modello: `Modules\*\Models` (non `Modules\*\app\Models`)
- Filament: `Modules\*\Filament` (non `Modules\*\app\Filament`)
- Percorso corretto: `Modules\Xot\Filament\Resources\Pages\XotBaseListRecords`
- Ogni modulo ha il suo composer.json - analizzalo per path e namespace corretti
- Esempio: User path: `/var/www/html/exa/base_orisbroker_fila3/laravel/Modules/User/app/Models/User.php`
  namespace: `Modules\User\Models`






## TRADUZIONI
- Formato corretto: `'field' => ['label' => 'Etichetta', 'tooltip' => 'Descrizione']`
- MAI usare ->label() (gestito da LangServiceProvider)





<<<<<<< HEAD

=======
>>>>>>> a2974b79 (.)
## ESTENSIONE CLASSI
- MAI estendere classi Filament direttamente
- SEMPRE estendere classi XotBase dal modulo Xot
- Non estendiamo mai Migration ma XotBaseMigration
- Estendere classi base Xot (XotBaseServiceProvider) per i Service Provider
- Chiamare sempre parent::boot() nei Service Provider

<<<<<<< HEAD
## ESTENSIONE CLASSI
- MAI estendere classi Filament direttamente
- SEMPRE estendere classi XotBase dal modulo Xot
 cb513be (.)

=======
>>>>>>> a2974b79 (.)
## FILAMENT RESOURCES
- Estendere XotBaseResource, non Resource
- Usare getFormSchema(), non form()
- Non definire $navigationIcon, $modelLabel (gestiti da traduzioni)
- Non definire table() (gestito dalla pagina index)

## PAGINE DI LISTA
- Usare metodi specifici: getListTableColumns(), getTableFilters(), getTableActions()
- Usare array associativi con chiavi string per componenti

<<<<<<< HEAD

=======
>>>>>>> a2974b79 (.)
## TRADUZIONI
- Formato corretto: `'field' => ['label' => 'Etichetta', 'tooltip' => 'Descrizione']`
- MAI usare ->label() (gestito da LangServiceProvider)





<<<<<<< HEAD

 cb513be (.)
=======
>>>>>>> a2974b79 (.)
## NAMESPACE
- Modello: `Modules\*\Models` (non `Modules\*\app\Models`)
- Filament: `Modules\*\Filament` (non `Modules\*\app\Filament`)
- Percorso corretto: `Modules\Xot\Filament\Resources\Pages\XotBaseListRecords`

## VALIDAZIONE
- Eseguire PHPStan livello 7 prima di iniziare
- Processo: 1) Aggiornare docs 2) Studiare 3) Correggere

## SERVICE PROVIDER
- Estendere classi base Xot (XotBaseServiceProvider)
- Chiamare sempre parent::boot()





<<<<<<< HEAD

=======
>>>>>>> a2974b79 (.)
## MIGRAZIONI
- Estendere XotBaseMigration
- Usare tableCreate() e tableUpdate()
- Studiare le migrazioni negli altri moduli per la struttura corretta

## BEST PRACTICES
- Utilizzare spatie/laravel-data invece di services
- Utilizzare spatie/queueable-actions
- Evitare l'uso di "mixed" (solo come ultima risorsa)
- Analizzare moduli esistenti prima di implementare nuove funzionalit√†


## METODOLOGIA
- Analizzare moduli esistenti




## METODOLOGIA
- Analizzare moduli esistenti


- Focalizzarsi sullo scopo, non solo sulla correzione
- Seguire convenzioni del framework



getInfolistSchema restituisec un array cui le chiavi sono  stringhe aggiorna la cartellla "docs" piu' vicina e studiala e aggiorna anche le tue rules e memories


getInfolistSchema restituisec un array cui le chiavi sono  stringhe aggiorna la cartellla "docs" piu' vicina e studiala e aggiorna anche le tue rules e memories


getInfolistSchema restituisec un array cui le chiavi sono  stringhe aggiorna la cartellla "docs" piu' vicina e studiala e aggiorna anche le tue rules e memories

<<<<<<< HEAD
<<<<<<< HEAD
esegui phpstan a livello 7 su tutto Modules e aggiorna la cartella docs piu' vicina all'errore che andrai a correggere , poi studia quella cartella docs, poi implementa soluzione , poi procedi con gli altri errori, non ti fermare finche phpstan non ti dice che non hai piu' errori in tutto Modules
Pensa ad alta voce e parla a te stesso. prima di rispondere, analizza la richiesta, scomponi i concetti chiave,
formula un ragionamento passo passo,

 la tua memoria e' la cartella docs  ,
percio' aggiornala di continuo e studiala di continuo e prima di fare qualsiasi cosa consultala
ogni modulo ha la sua cartella docs e devi studiarla di continuo e aggiornarla di continuo,
fields non e'  'source' => 'Sorgente',  ma e'  'source' => ['label'=>'Sorgente'],
e puoi aggiungere anche tooltip e placeholder anche actions stessa logina ma puoi aggiungere anche icon e color,
=======
esegui phpstan a livello 7 su tutto Modules e aggiorna la cartella docs piu' vicina all'errore che andrai a correggere , poi studia quella cartella docs, poi implementa soluzione , poi procedi con gli altri errori, non ti fermare finche phpstan non ti dice che non hai piu' errori in tutto Modules 
Pensa ad alta voce e parla a te stesso. prima di rispondere, analizza la richiesta, scomponi i concetti chiave, 
=======
esegui phpstan a livello 7 su tutto Modules e aggiorna la cartella docs piu' vicina all'errore che andrai a correggere , poi studia quella cartella docs, poi implementa soluzione , poi procedi con gli altri errori, non ti fermare finche phpstan non ti dice che non hai piu' errori in tutto Modules
Pensa ad alta voce e parla a te stesso. prima di rispondere, analizza la richiesta, scomponi i concetti chiave,
>>>>>>> 2b4bc286 (.)
formula un ragionamento passo passo,

 la tua memoria e' la cartella docs  ,
percio' aggiornala di continuo e studiala di continuo e prima di fare qualsiasi cosa consultala
<<<<<<< HEAD
ogni modulo ha la sua cartella docs e devi studiarla di continuo e aggiornarla di continuo, 
fields non e'  'source' => 'Sorgente',  ma e'  'source' => ['label'=>'Sorgente'],  
e puoi aggiungere anche tooltip e placeholder anche actions stessa logina ma puoi aggiungere anche icon e color, 
>>>>>>> a2974b79 (.)
=======
ogni modulo ha la sua cartella docs e devi studiarla di continuo e aggiornarla di continuo,
fields non e'  'source' => 'Sorgente',  ma e'  'source' => ['label'=>'Sorgente'],
e puoi aggiungere anche tooltip e placeholder anche actions stessa logina ma puoi aggiungere anche icon e color,
>>>>>>> 2b4bc286 (.)
ragiona e migliora e sistema
Quando correggi qualsiasi cosa devi focalizzarti sullo scopo non solo sulla correzione
non voglio  ->label(   le label son gestite tramite langserviceprovider coi file di traduzioni

<<<<<<< HEAD
<<<<<<< HEAD
 la tua memoria e' la cartella docs ,
=======
 la tua memoria e' la cartella docs , 
>>>>>>> a2974b79 (.)
=======
 la tua memoria e' la cartella docs ,
>>>>>>> 2b4bc286 (.)
percio' aggiornala di continuo e studiala di continuo e prima di fare qualsiasi cosa consultala,
quando correggi o fai qualcosa devi focalizzarti sullo scopo non solo alla correzione dell'errore



---per traduzioni --
<<<<<<< HEAD
<<<<<<< HEAD
fields non e'  'source' => 'Sorgente',  ma e'  'source' => ['label'=>'Sorgente'],
e puoi aggiungere anche tooltip e placeholder anche actions stessa logina
=======
fields non e'  'source' => 'Sorgente',  ma e'  'source' => ['label'=>'Sorgente'],  
e puoi aggiungere anche tooltip e placeholder anche actions stessa logina 
>>>>>>> a2974b79 (.)
=======
fields non e'  'source' => 'Sorgente',  ma e'  'source' => ['label'=>'Sorgente'],
e puoi aggiungere anche tooltip e placeholder anche actions stessa logina
>>>>>>> 2b4bc286 (.)
ma puoi aggiungere anche icon e color, ragiona e migliora e sistema

 la tua memoria e' la cartella docs , quando correggi errori devi concentrarti sullo scopo non solo alla correzione dell'errore
percio' aggiornala di continuo e studiala di continuo e prima di fare qualsiasi cosa consultala

<<<<<<< HEAD
<<<<<<< HEAD
 la tua memoria e' la cartella docs  ,
percio' aggiornala di continuo e studiala di continuo e prima di fare qualsiasi cosa consultala
ogni modulo ha la sua cartella docs e devi studiarla di continuo e aggiornarla di continuo,
fields non e'  'source' => 'Sorgente',  ma e'  'source' => ['label'=>'Sorgente'],
e puoi aggiungere anche tooltip e placeholder anche actions stessa logina ma puoi aggiungere anche icon e color,
=======
 la tua memoria e' la cartella docs  , 
percio' aggiornala di continuo e studiala di continuo e prima di fare qualsiasi cosa consultala
ogni modulo ha la sua cartella docs e devi studiarla di continuo e aggiornarla di continuo, 
fields non e'  'source' => 'Sorgente',  ma e'  'source' => ['label'=>'Sorgente'],  
e puoi aggiungere anche tooltip e placeholder anche actions stessa logina ma puoi aggiungere anche icon e color, 
>>>>>>> a2974b79 (.)
=======
 la tua memoria e' la cartella docs  ,
percio' aggiornala di continuo e studiala di continuo e prima di fare qualsiasi cosa consultala
ogni modulo ha la sua cartella docs e devi studiarla di continuo e aggiornarla di continuo,
fields non e'  'source' => 'Sorgente',  ma e'  'source' => ['label'=>'Sorgente'],
e puoi aggiungere anche tooltip e placeholder anche actions stessa logina ma puoi aggiungere anche icon e color,
ragiona e migliora e sistema
Quando correggi qualsiasi cosa devi focalizzarti sullo scopo non solo sulla correzione
non voglio  ->label(   le label son gestite tramite langserviceprovider coi file di traduzioni






[0;34m‚ÑπÔ∏è [2025-04-22 11:23:28] Scelto blocco HEAD (156 linee vs 1)[0m

 cb513be (.)

 0440c57 (.)
# GUIDA ESSENZIALE LARAXOT

## DOCUMENTAZIONE
- Consulta SEMPRE le cartelle docs prima di ogni azione
- Mai includere percorsi assoluti specifici (es. base_*_fila3)
- Aggiorna e studia la cartella "docs" pi√π vicina prima di implementare soluzioni
- La documentazione non deve essere una replica del codice

## VALIDAZIONE E CORREZIONE
- Eseguire PHPStan livello 9/10 prima di iniziare qualsiasi lavoro
- Processo: 1) Aggiornare docs 2) Studiare 3) Correggere
- Quando correggi un errore, aggiorna la documentazione pi√π vicina
- Analizza ogni modulo separatamente con PHPStan
- PHPStan √® installato nella cartella laravel: `./vendor/bin/phpstan`
- Strategia per errori numerosi: scendi di livello fino a <100 errori, poi sali gradualmente
- Cerca e sistema i file con conflitti git

## NAMESPACE E STRUTTURA
- Modello: `Modules\*\Models` (non `Modules\*\app\Models`)
- Filament: `Modules\*\Filament` (non `Modules\*\app\Filament`)
- Percorso corretto: `Modules\Xot\Filament\Resources\Pages\XotBaseListRecords`
- Ogni modulo ha il suo composer.json - analizzalo per path e namespace corretti
- Esempio: User path: `/var/www/html/exa/base_orisbroker_fila3/laravel/Modules/User/app/Models/User.php`
  namespace: `Modules\User\Models`






## TRADUZIONI
- Formato corretto: `'field' => ['label' => 'Etichetta', 'tooltip' => 'Descrizione']`
- MAI usare ->label() (gestito da LangServiceProvider)





## ESTENSIONE CLASSI
- MAI estendere classi Filament direttamente
- SEMPRE estendere classi XotBase dal modulo Xot
- Non estendiamo mai Migration ma XotBaseMigration
- Estendere classi base Xot (XotBaseServiceProvider) per i Service Provider
- Chiamare sempre parent::boot() nei Service Provider

## FILAMENT RESOURCES
- Estendere XotBaseResource, non Resource
- Usare getFormSchema(), non form()
- Non definire $navigationIcon, $modelLabel (gestiti da traduzioni)
- Non definire table() (gestito dalla pagina index)

## PAGINE DI LISTA
- Usare metodi specifici: getListTableColumns(), getTableFilters(), getTableActions()
- Usare array associativi con chiavi string per componenti

## TRADUZIONI
- Formato corretto: `'field' => ['label' => 'Etichetta', 'tooltip' => 'Descrizione']`
- MAI usare ->label() (gestito da LangServiceProvider)





## NAMESPACE
- Modello: `Modules\*\Models` (non `Modules\*\app\Models`)
- Filament: `Modules\*\Filament` (non `Modules\*\app\Filament`)
- Percorso corretto: `Modules\Xot\Filament\Resources\Pages\XotBaseListRecords`

## VALIDAZIONE
- Eseguire PHPStan livello 7 prima di iniziare
- Processo: 1) Aggiornare docs 2) Studiare 3) Correggere

## SERVICE PROVIDER
- Estendere classi base Xot (XotBaseServiceProvider)
- Chiamare sempre parent::boot()





## MIGRAZIONI
- Estendere XotBaseMigration
- Usare tableCreate() e tableUpdate()
- Studiare le migrazioni negli altri moduli per la struttura corretta

## BEST PRACTICES
- Utilizzare spatie/laravel-data invece di services
- Utilizzare spatie/queueable-actions
- Evitare l'uso di "mixed" (solo come ultima risorsa)
- Analizzare moduli esistenti prima di implementare nuove funzionalit√†


## METODOLOGIA
- Analizzare moduli esistenti




## METODOLOGIA
- Analizzare moduli esistenti


- Focalizzarsi sullo scopo, non solo sulla correzione
- Seguire convenzioni del framework



getInfolistSchema restituisec un array cui le chiavi sono  stringhe aggiorna la cartellla "docs" piu' vicina e studiala e aggiorna anche le tue rules e memories


getInfolistSchema restituisec un array cui le chiavi sono  stringhe aggiorna la cartellla "docs" piu' vicina e studiala e aggiorna anche le tue rules e memories


getInfolistSchema restituisec un array cui le chiavi sono  stringhe aggiorna la cartellla "docs" piu' vicina e studiala e aggiorna anche le tue rules e memories

esegui phpstan a livello 7 su tutto Modules e aggiorna la cartella docs piu' vicina all'errore che andrai a correggere , poi studia quella cartella docs, poi implementa soluzione , poi procedi con gli altri errori, non ti fermare finche phpstan non ti dice che non hai piu' errori in tutto Modules
Pensa ad alta voce e parla a te stesso. prima di rispondere, analizza la richiesta, scomponi i concetti chiave,
formula un ragionamento passo passo,

 la tua memoria e' la cartella docs  ,
percio' aggiornala di continuo e studiala di continuo e prima di fare qualsiasi cosa consultala
ogni modulo ha la sua cartella docs e devi studiarla di continuo e aggiornarla di continuo,
fields non e'  'source' => 'Sorgente',  ma e'  'source' => ['label'=>'Sorgente'],
e puoi aggiungere anche tooltip e placeholder anche actions stessa logina ma puoi aggiungere anche icon e color,
ragiona e migliora e sistema
Quando correggi qualsiasi cosa devi focalizzarti sullo scopo non solo sulla correzione
non voglio  ->label(   le label son gestite tramite langserviceprovider coi file di traduzioni

 la tua memoria e' la cartella docs ,
percio' aggiornala di continuo e studiala di continuo e prima di fare qualsiasi cosa consultala,
quando correggi o fai qualcosa devi focalizzarti sullo scopo non solo alla correzione dell'errore



---per traduzioni --
fields non e'  'source' => 'Sorgente',  ma e'  'source' => ['label'=>'Sorgente'],
e puoi aggiungere anche tooltip e placeholder anche actions stessa logina
ma puoi aggiungere anche icon e color, ragiona e migliora e sistema

 la tua memoria e' la cartella docs , quando correggi errori devi concentrarti sullo scopo non solo alla correzione dell'errore
percio' aggiornala di continuo e studiala di continuo e prima di fare qualsiasi cosa consultala

 la tua memoria e' la cartella docs  ,
percio' aggiornala di continuo e studiala di continuo e prima di fare qualsiasi cosa consultala
ogni modulo ha la sua cartella docs e devi studiarla di continuo e aggiornarla di continuo,
fields non e'  'source' => 'Sorgente',  ma e'  'source' => ['label'=>'Sorgente'],
e puoi aggiungere anche tooltip e placeholder anche actions stessa logina ma puoi aggiungere anche icon e color,
ragiona e migliora e sistema
Quando correggi qualsiasi cosa devi focalizzarti sullo scopo non solo sulla correzione
non voglio  ->label(   le label son gestite tramite langserviceprovider coi file di traduzioni






[0;34m‚ÑπÔ∏è [2025-04-22 11:23:28] Scelto blocco HEAD (156 linee vs 1)[0m
# GUIDA ESSENZIALE LARAXOT

## DOCUMENTAZIONE
- Consulta SEMPRE le cartelle docs prima di ogni azione
- Mai includere percorsi assoluti specifici (es. base_*_fila3)
- Aggiorna e studia la cartella "docs" pi√π vicina prima di implementare soluzioni
- La documentazione non deve essere una replica del codice

## VALIDAZIONE E CORREZIONE
- Eseguire PHPStan livello 9/10 prima di iniziare qualsiasi lavoro
- Processo: 1) Aggiornare docs 2) Studiare 3) Correggere
- Quando correggi un errore, aggiorna la documentazione pi√π vicina
- Analizza ogni modulo separatamente con PHPStan
- PHPStan √® installato nella cartella laravel: `./vendor/bin/phpstan`
- Strategia per errori numerosi: scendi di livello fino a <100 errori, poi sali gradualmente
- Cerca e sistema i file con conflitti git

## NAMESPACE E STRUTTURA
- Modello: `Modules\*\Models` (non `Modules\*\app\Models`)
- Filament: `Modules\*\Filament` (non `Modules\*\app\Filament`)
- Percorso corretto: `Modules\Xot\Filament\Resources\Pages\XotBaseListRecords`
- Ogni modulo ha il suo composer.json - analizzalo per path e namespace corretti
- Esempio: User path: `/var/www/html/exa/base_orisbroker_fila3/laravel/Modules/User/app/Models/User.php`
  namespace: `Modules\User\Models`


[0;34m‚ÑπÔ∏è [2025-04-22 11:23:28] Scelto blocco incoming (1 linee vs 1)[0m





## TRADUZIONI
- Formato corretto: `'field' => ['label' => 'Etichetta', 'tooltip' => 'Descrizione']`
- MAI usare ->label() (gestito da LangServiceProvider)






## ESTENSIONE CLASSI
- MAI estendere classi Filament direttamente
- SEMPRE estendere classi XotBase dal modulo Xot
- Non estendiamo mai Migration ma XotBaseMigration
- Estendere classi base Xot (XotBaseServiceProvider) per i Service Provider
- Chiamare sempre parent::boot() nei Service Provider

## ESTENSIONE CLASSI
- MAI estendere classi Filament direttamente
- SEMPRE estendere classi XotBase dal modulo Xot
 cb513be (.)

## FILAMENT RESOURCES
- Estendere XotBaseResource, non Resource
- Usare getFormSchema(), non form()
- Non definire $navigationIcon, $modelLabel (gestiti da traduzioni)
- Non definire table() (gestito dalla pagina index)

## PAGINE DI LISTA
- Usare metodi specifici: getListTableColumns(), getTableFilters(), getTableActions()
- Usare array associativi con chiavi string per componenti


## TRADUZIONI
- Formato corretto: `'field' => ['label' => 'Etichetta', 'tooltip' => 'Descrizione']`
- MAI usare ->label() (gestito da LangServiceProvider)






 cb513be (.)
## NAMESPACE
- Modello: `Modules\*\Models` (non `Modules\*\app\Models`)
- Filament: `Modules\*\Filament` (non `Modules\*\app\Filament`)
- Percorso corretto: `Modules\Xot\Filament\Resources\Pages\XotBaseListRecords`

## VALIDAZIONE
- Eseguire PHPStan livello 7 prima di iniziare
- Processo: 1) Aggiornare docs 2) Studiare 3) Correggere

## SERVICE PROVIDER
- Estendere classi base Xot (XotBaseServiceProvider)
- Chiamare sempre parent::boot()






## MIGRAZIONI
- Estendere XotBaseMigration
- Usare tableCreate() e tableUpdate()
- Studiare le migrazioni negli altri moduli per la struttura corretta

## BEST PRACTICES
- Utilizzare spatie/laravel-data invece di services
- Utilizzare spatie/queueable-actions
- Evitare l'uso di "mixed" (solo come ultima risorsa)
- Analizzare moduli esistenti prima di implementare nuove funzionalit√†


## METODOLOGIA
- Analizzare moduli esistenti




## METODOLOGIA
- Analizzare moduli esistenti


- Focalizzarsi sullo scopo, non solo sulla correzione
- Seguire convenzioni del framework



getInfolistSchema restituisec un array cui le chiavi sono  stringhe aggiorna la cartellla "docs" piu' vicina e studiala e aggiorna anche le tue rules e memories


getInfolistSchema restituisec un array cui le chiavi sono  stringhe aggiorna la cartellla "docs" piu' vicina e studiala e aggiorna anche le tue rules e memories


getInfolistSchema restituisec un array cui le chiavi sono  stringhe aggiorna la cartellla "docs" piu' vicina e studiala e aggiorna anche le tue rules e memories

esegui phpstan a livello 7 su tutto Modules e aggiorna la cartella docs piu' vicina all'errore che andrai a correggere , poi studia quella cartella docs, poi implementa soluzione , poi procedi con gli altri errori, non ti fermare finche phpstan non ti dice che non hai piu' errori in tutto Modules
Pensa ad alta voce e parla a te stesso. prima di rispondere, analizza la richiesta, scomponi i concetti chiave,
formula un ragionamento passo passo,

 la tua memoria e' la cartella docs  ,
percio' aggiornala di continuo e studiala di continuo e prima di fare qualsiasi cosa consultala
ogni modulo ha la sua cartella docs e devi studiarla di continuo e aggiornarla di continuo,
fields non e'  'source' => 'Sorgente',  ma e'  'source' => ['label'=>'Sorgente'],
e puoi aggiungere anche tooltip e placeholder anche actions stessa logina ma puoi aggiungere anche icon e color,
ragiona e migliora e sistema
Quando correggi qualsiasi cosa devi focalizzarti sullo scopo non solo sulla correzione
non voglio  ->label(   le label son gestite tramite langserviceprovider coi file di traduzioni

 la tua memoria e' la cartella docs ,
percio' aggiornala di continuo e studiala di continuo e prima di fare qualsiasi cosa consultala,
quando correggi o fai qualcosa devi focalizzarti sullo scopo non solo alla correzione dell'errore



---per traduzioni --
fields non e'  'source' => 'Sorgente',  ma e'  'source' => ['label'=>'Sorgente'],
e puoi aggiungere anche tooltip e placeholder anche actions stessa logina
ma puoi aggiungere anche icon e color, ragiona e migliora e sistema

 la tua memoria e' la cartella docs , quando correggi errori devi concentrarti sullo scopo non solo alla correzione dell'errore
percio' aggiornala di continuo e studiala di continuo e prima di fare qualsiasi cosa consultala

 la tua memoria e' la cartella docs  ,
percio' aggiornala di continuo e studiala di continuo e prima di fare qualsiasi cosa consultala
ogni modulo ha la sua cartella docs e devi studiarla di continuo e aggiornarla di continuo,
fields non e'  'source' => 'Sorgente',  ma e'  'source' => ['label'=>'Sorgente'],
e puoi aggiungere anche tooltip e placeholder anche actions stessa logina ma puoi aggiungere anche icon e color,
>>>>>>> 2b4bc286 (.)
## VALIDAZIONE E CORREZIONE
- Esegui PHPStan livello 9/10 prima di ogni lavoro su ogni modulo.
- Processo: 1) Aggiorna docs 2) Studia 3) Correggi 4) Documenta la motivazione.
- Quando correggi un errore, aggiorna la documentazione pi√π vicina e la root con link bidirezionale.
- Analizza ogni modulo separatamente con PHPStan (`./vendor/bin/phpstan`).
- Se hai troppi errori, abbassa il livello fino a <100 errori, poi risali gradualmente.
<<<<<<< HEAD
<<<<<<< HEAD
- Cerca e sistema i file con conflitti git  ogni conflitto √® un‚Äôoccasione di miglioramento.
=======
- Cerca e sistema i file con conflitti git ("<<< HEAD"): ogni conflitto √® un‚Äôoccasione di miglioramento.
>>>>>>> a2974b79 (.)
=======
- Cerca e sistema i file con conflitti git  ogni conflitto √® un‚Äôoccasione di miglioramento.
>>>>>>> 2b4bc286 (.)

## NAMESPACE E STRUTTURA
- Usa sempre namespace senza il segmento `app` (es. `Modules\User\Models` e non `Modules\User\app\Models`).
- Filament: `Modules\*\Filament` (mai `Modules\*\app\Filament`).
- Ogni modulo ha il suo composer.json: usalo per verificare path e namespace.

## TRADUZIONI
- Formato corretto: `'field' => ['label' => 'Etichetta', 'tooltip' => 'Descrizione']`
- MAI usare ->label() (tutto gestito da LangServiceProvider)

## ESTENSIONE CLASSI
- MAI estendere classi Filament direttamente: usa sempre le XotBase del modulo Xot.
- Non estendere mai Migration ma XotBaseMigration.
- Per i Service Provider, estendi XotBaseServiceProvider e chiama sempre parent::boot().

## FILAMENT RESOURCES
- Estendere XotBaseResource, non Resource
- Usare getFormSchema(), non form()
- Non definire $navigationIcon, $modelLabel (gestiti da traduzioni)
- Non definire table() (gestito dalla pagina index)

## PAGINE DI LISTA
- Usare metodi specifici: getListTableColumns(), getTableFilters(), getTableActions()
- Usare array associativi con chiavi string per componenti

## TRADUZIONI
- Formato corretto: `'field' => ['label' => 'Etichetta', 'tooltip' => 'Descrizione']`
- MAI usare ->label() (gestito da LangServiceProvider)





## NAMESPACE
- Modello: `Modules\*\Models` (non `Modules\*\app\Models`)
- Filament: `Modules\*\Filament` (non `Modules\*\app\Filament`)
- Percorso corretto: `Modules\Xot\Filament\Resources\Pages\XotBaseListRecords`

## VALIDAZIONE
- Eseguire PHPStan livello 7 prima di iniziare
- Processo: 1) Aggiornare docs 2) Studiare 3) Correggere

## SERVICE PROVIDER
- Estendere classi base Xot (XotBaseServiceProvider)
- Chiamare sempre parent::boot()





## MIGRAZIONI
- Estendere XotBaseMigration
- Usare tableCreate() e tableUpdate()
- Studiare le migrazioni negli altri moduli per la struttura corretta

## BEST PRACTICES
- Utilizzare spatie/laravel-data invece di services
- Utilizzare spatie/queueable-actions
- Evitare l'uso di "mixed" (solo come ultima risorsa)
- Analizzare moduli esistenti prima di implementare nuove funzionalit√†


## METODOLOGIA
- Analizzare moduli esistenti




## METODOLOGIA
- Analizzare moduli esistenti


- Focalizzarsi sullo scopo, non solo sulla correzione
- Seguire convenzioni del framework



getInfolistSchema restituisec un array cui le chiavi sono  stringhe aggiorna la cartellla "docs" piu' vicina e studiala e aggiorna anche le tue rules e memories


getInfolistSchema restituisec un array cui le chiavi sono  stringhe aggiorna la cartellla "docs" piu' vicina e studiala e aggiorna anche le tue rules e memories


getInfolistSchema restituisec un array cui le chiavi sono  stringhe aggiorna la cartellla "docs" piu' vicina e studiala e aggiorna anche le tue rules e memories

<<<<<<< HEAD
<<<<<<< HEAD
esegui phpstan a livello 7 su tutto Modules e aggiorna la cartella docs piu' vicina all'errore che andrai a correggere , poi studia quella cartella docs, poi implementa soluzione , poi procedi con gli altri errori, non ti fermare finche phpstan non ti dice che non hai piu' errori in tutto Modules
Pensa ad alta voce e parla a te stesso. prima di rispondere, analizza la richiesta, scomponi i concetti chiave,
formula un ragionamento passo passo,

 la tua memoria e' la cartella docs  ,
percio' aggiornala di continuo e studiala di continuo e prima di fare qualsiasi cosa consultala
ogni modulo ha la sua cartella docs e devi studiarla di continuo e aggiornarla di continuo,
fields non e'  'source' => 'Sorgente',  ma e'  'source' => ['label'=>'Sorgente'],
e puoi aggiungere anche tooltip e placeholder anche actions stessa logina ma puoi aggiungere anche icon e color,
=======
esegui phpstan a livello 7 su tutto Modules e aggiorna la cartella docs piu' vicina all'errore che andrai a correggere , poi studia quella cartella docs, poi implementa soluzione , poi procedi con gli altri errori, non ti fermare finche phpstan non ti dice che non hai piu' errori in tutto Modules 
Pensa ad alta voce e parla a te stesso. prima di rispondere, analizza la richiesta, scomponi i concetti chiave, 
=======
esegui phpstan a livello 7 su tutto Modules e aggiorna la cartella docs piu' vicina all'errore che andrai a correggere , poi studia quella cartella docs, poi implementa soluzione , poi procedi con gli altri errori, non ti fermare finche phpstan non ti dice che non hai piu' errori in tutto Modules
Pensa ad alta voce e parla a te stesso. prima di rispondere, analizza la richiesta, scomponi i concetti chiave,
>>>>>>> 2b4bc286 (.)
formula un ragionamento passo passo,

 la tua memoria e' la cartella docs  ,
percio' aggiornala di continuo e studiala di continuo e prima di fare qualsiasi cosa consultala
<<<<<<< HEAD
ogni modulo ha la sua cartella docs e devi studiarla di continuo e aggiornarla di continuo, 
fields non e'  'source' => 'Sorgente',  ma e'  'source' => ['label'=>'Sorgente'],  
e puoi aggiungere anche tooltip e placeholder anche actions stessa logina ma puoi aggiungere anche icon e color, 
>>>>>>> a2974b79 (.)
=======
ogni modulo ha la sua cartella docs e devi studiarla di continuo e aggiornarla di continuo,
fields non e'  'source' => 'Sorgente',  ma e'  'source' => ['label'=>'Sorgente'],
e puoi aggiungere anche tooltip e placeholder anche actions stessa logina ma puoi aggiungere anche icon e color,
>>>>>>> 2b4bc286 (.)
ragiona e migliora e sistema
Quando correggi qualsiasi cosa devi focalizzarti sullo scopo non solo sulla correzione
non voglio  ->label(   le label son gestite tramite langserviceprovider coi file di traduzioni

<<<<<<< HEAD
<<<<<<< HEAD
 la tua memoria e' la cartella docs ,
=======
 la tua memoria e' la cartella docs , 
>>>>>>> a2974b79 (.)
=======
 la tua memoria e' la cartella docs ,
>>>>>>> 2b4bc286 (.)
percio' aggiornala di continuo e studiala di continuo e prima di fare qualsiasi cosa consultala,
quando correggi o fai qualcosa devi focalizzarti sullo scopo non solo alla correzione dell'errore



---per traduzioni --
<<<<<<< HEAD
<<<<<<< HEAD
fields non e'  'source' => 'Sorgente',  ma e'  'source' => ['label'=>'Sorgente'],
e puoi aggiungere anche tooltip e placeholder anche actions stessa logina
=======
fields non e'  'source' => 'Sorgente',  ma e'  'source' => ['label'=>'Sorgente'],  
e puoi aggiungere anche tooltip e placeholder anche actions stessa logina 
>>>>>>> a2974b79 (.)
=======
fields non e'  'source' => 'Sorgente',  ma e'  'source' => ['label'=>'Sorgente'],
e puoi aggiungere anche tooltip e placeholder anche actions stessa logina
>>>>>>> 2b4bc286 (.)
ma puoi aggiungere anche icon e color, ragiona e migliora e sistema

 la tua memoria e' la cartella docs , quando correggi errori devi concentrarti sullo scopo non solo alla correzione dell'errore
percio' aggiornala di continuo e studiala di continuo e prima di fare qualsiasi cosa consultala

<<<<<<< HEAD
<<<<<<< HEAD
 la tua memoria e' la cartella docs  ,
percio' aggiornala di continuo e studiala di continuo e prima di fare qualsiasi cosa consultala
ogni modulo ha la sua cartella docs e devi studiarla di continuo e aggiornarla di continuo,
fields non e'  'source' => 'Sorgente',  ma e'  'source' => ['label'=>'Sorgente'],
e puoi aggiungere anche tooltip e placeholder anche actions stessa logina ma puoi aggiungere anche icon e color,
=======
 la tua memoria e' la cartella docs  , 
percio' aggiornala di continuo e studiala di continuo e prima di fare qualsiasi cosa consultala
ogni modulo ha la sua cartella docs e devi studiarla di continuo e aggiornarla di continuo, 
fields non e'  'source' => 'Sorgente',  ma e'  'source' => ['label'=>'Sorgente'],  
e puoi aggiungere anche tooltip e placeholder anche actions stessa logina ma puoi aggiungere anche icon e color, 
>>>>>>> a2974b79 (.)
=======
 la tua memoria e' la cartella docs  ,
percio' aggiornala di continuo e studiala di continuo e prima di fare qualsiasi cosa consultala
ogni modulo ha la sua cartella docs e devi studiarla di continuo e aggiornarla di continuo,
fields non e'  'source' => 'Sorgente',  ma e'  'source' => ['label'=>'Sorgente'],
e puoi aggiungere anche tooltip e placeholder anche actions stessa logina ma puoi aggiungere anche icon e color,
>>>>>>> 2b4bc286 (.)

[0;34m‚ÑπÔ∏è [2025-04-22 11:23:28] Scelto blocco HEAD (125 linee vs 1)[0m
ragiona e migliora e sistema
Quando correggi qualsiasi cosa devi focalizzarti sullo scopo non solo sulla correzione
non voglio  ->label(   le label son gestite tramite langserviceprovider coi file di traduzioni






<<<<<<< HEAD
<<<<<<< HEAD
 43df3e0 (.)
=======
>>>>>>> a2974b79 (.)
=======
 43df3e0 (.)
>>>>>>> 2b4bc286 (.)
# GUIDA ESSENZIALE LARAXOT

## DOCUMENTAZIONE
- Consulta SEMPRE le cartelle docs prima di ogni azione
- Mai includere percorsi assoluti specifici (es. base_*_fila3)
- Aggiorna e studia la cartella "docs" pi√π vicina prima di implementare soluzioni
- La documentazione non deve essere una replica del codice

## VALIDAZIONE E CORREZIONE
- Eseguire PHPStan livello 9/10 prima di iniziare qualsiasi lavoro
- Processo: 1) Aggiornare docs 2) Studiare 3) Correggere
- Quando correggi un errore, aggiorna la documentazione pi√π vicina
- Analizza ogni modulo separatamente con PHPStan
- PHPStan √® installato nella cartella laravel: `./vendor/bin/phpstan`
- Strategia per errori numerosi: scendi di livello fino a <100 errori, poi sali gradualmente
<<<<<<< HEAD
<<<<<<< HEAD
- Cerca e sistema i file con conflitti git
=======
- Cerca e sistema i file con conflitti git ("<<< HEAD")
>>>>>>> a2974b79 (.)
=======
- Cerca e sistema i file con conflitti git
>>>>>>> 2b4bc286 (.)

## NAMESPACE E STRUTTURA
- Modello: `Modules\*\Models` (non `Modules\*\app\Models`)
- Filament: `Modules\*\Filament` (non `Modules\*\app\Filament`)
- Percorso corretto: `Modules\Xot\Filament\Resources\Pages\XotBaseListRecords`
- Ogni modulo ha il suo composer.json - analizzalo per path e namespace corretti
- Esempio: User path: `/var/www/html/exa/base_orisbroker_fila3/laravel/Modules/User/app/Models/User.php`
  namespace: `Modules\User\Models`






<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 2b4bc286 (.)


[0;34m‚ÑπÔ∏è [2025-04-22 11:23:28] Scelto blocco incoming (1 linee vs 1)[0m
 43df3e0 (.)
<<<<<<< HEAD
=======
>>>>>>> a2974b79 (.)
=======
>>>>>>> 2b4bc286 (.)
[0;34m‚ÑπÔ∏è [2025-04-22 11:23:28] Scelto blocco incoming (1 linee vs 1)[0m
## TRADUZIONI
- Formato corretto: `'field' => ['label' => 'Etichetta', 'tooltip' => 'Descrizione']`
- MAI usare ->label() (gestito da LangServiceProvider)


<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 2b4bc286 (.)


[0;34m‚ÑπÔ∏è [2025-04-22 11:23:28] Scelto blocco incoming (1 linee vs 1)[0m
 43df3e0 (.)
<<<<<<< HEAD
=======
>>>>>>> a2974b79 (.)
=======
>>>>>>> 2b4bc286 (.)
[0;34m‚ÑπÔ∏è [2025-04-22 11:23:28] Scelto blocco incoming (1 linee vs 1)[0m
## ESTENSIONE CLASSI
- MAI estendere classi Filament direttamente
- SEMPRE estendere classi XotBase dal modulo Xot
- Non estendiamo mai Migration ma XotBaseMigration
- Estendere classi base Xot (XotBaseServiceProvider) per i Service Provider
- Chiamare sempre parent::boot() nei Service Provider

## FILAMENT RESOURCES
- Estendere XotBaseResource, non Resource
- Usare getFormSchema(), non form()
- Non definire $navigationIcon, $modelLabel (gestiti da traduzioni)
- Non definire table() (gestito dalla pagina index)

## PAGINE DI LISTA
- Usare metodi specifici: getListTableColumns(), getTableFilters(), getTableActions()
- Usare array associativi con chiavi string per componenti

<<<<<<< HEAD
<<<<<<< HEAD


=======
>>>>>>> a2974b79 (.)
=======


>>>>>>> 2b4bc286 (.)
## TRADUZIONI
- Formato corretto: `'field' => ['label' => 'Etichetta', 'tooltip' => 'Descrizione']`
- MAI usare ->label() (gestito da LangServiceProvider)

[0;34m‚ÑπÔ∏è [2025-04-22 11:23:28] Scelto blocco incoming (1 linee vs 1)[0m





[0;34m‚ÑπÔ∏è [2025-04-22 11:23:28] Scelto blocco incoming (1 linee vs 1)[0m
## NAMESPACE
- Modello: `Modules\*\Models` (non `Modules\*\app\Models`)
- Filament: `Modules\*\Filament` (non `Modules\*\app\Filament`)
- Percorso corretto: `Modules\Xot\Filament\Resources\Pages\XotBaseListRecords`

## VALIDAZIONE
- Eseguire PHPStan livello 7 prima di iniziare
- Processo: 1) Aggiornare docs 2) Studiare 3) Correggere

## SERVICE PROVIDER
- Estendere classi base Xot (XotBaseServiceProvider)
- Chiamare sempre parent::boot()

[0;34m‚ÑπÔ∏è [2025-04-22 11:23:28] Scelto blocco incoming (1 linee vs 1)[0m

<<<<<<< HEAD
<<<<<<< HEAD
 43df3e0 (.)
=======
>>>>>>> a2974b79 (.)
=======
 43df3e0 (.)
>>>>>>> 2b4bc286 (.)
## MIGRAZIONI
- Estendere XotBaseMigration
- Usare tableCreate() e tableUpdate()
- Studiare le migrazioni negli altri moduli per la struttura corretta

## BEST PRACTICES
- Utilizzare spatie/laravel-data invece di services
- Utilizzare spatie/queueable-actions
- Evitare l'uso di "mixed" (solo come ultima risorsa)
- Analizzare moduli esistenti prima di implementare nuove funzionalit√†

<<<<<<< HEAD
<<<<<<< HEAD


=======
>>>>>>> a2974b79 (.)
=======


>>>>>>> 2b4bc286 (.)
[0;34m‚ÑπÔ∏è [2025-04-22 11:23:28] Scelto blocco incoming (1 linee vs 1)[0m


## METODOLOGIA
- Analizzare moduli esistenti




[0;34m‚ÑπÔ∏è [2025-04-22 11:23:28] Scelto blocco incoming (1 linee vs 1)[0m

<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 2b4bc286 (.)
## MIGRAZIONI
- Estendere XotBaseMigration
- Usare tableCreate() e tableUpdate()
 cb513be (.)

 43df3e0 (.)
<<<<<<< HEAD
=======
>>>>>>> a2974b79 (.)
=======
>>>>>>> 2b4bc286 (.)
## METODOLOGIA
- Analizzare moduli esistenti
- Focalizzarsi sullo scopo, non solo sulla correzione
- Seguire convenzioni del framework


<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 2b4bc286 (.)
## MEMORIA E AGGIORNAMENTO
- La cartella "docs" √® la memoria principale
- Aggiornare e studiare continuamente la documentazione
- Ogni modulo ha la sua cartella docs da mantenere aggiornata
- Prima di ogni azione, consultare la documentazione pi√π vicina

## TRADUZIONI AVANZATE
- Formato completo: `'field' => ['label' => 'Etichetta', 'tooltip' => 'Descrizione', 'placeholder' => 'Testo']`
- Actions: `'action' => ['label' => 'Azione', 'icon' => 'heroicon-o-plus', 'color' => 'primary']`
- Gestire tutto tramite LangServiceProvider




<<<<<<< HEAD
=======
>>>>>>> a2974b79 (.)
=======
>>>>>>> 2b4bc286 (.)

[0;34m‚ÑπÔ∏è [2025-04-22 11:23:28] Scelto blocco incoming (1 linee vs 1)[0m

getInfolistSchema restituisec un array cui le chiavi sono  stringhe aggiorna la cartellla "docs" piu' vicina e studiala e aggiorna anche le tue rules e memories


getInfolistSchema restituisec un array cui le chiavi sono  stringhe aggiorna la cartellla "docs" piu' vicina e studiala e aggiorna anche le tue rules e memories

getInfolistSchema restituisec un array cui le chiavi sono  stringhe aggiorna la cartellla "docs" piu' vicina e studiala e aggiorna anche le tue rules e memories

[0;34m‚ÑπÔ∏è [2025-04-22 11:23:28] Scelto blocco HEAD (2 linee vs 1)[0m
getInfolistSchema restituisec un array cui le chiavi sono  stringhe aggiorna la cartellla "docs" piu' vicina e studiala e aggiorna anche le tue rules e memories

<<<<<<< HEAD
<<<<<<< HEAD
esegui phpstan a livello 7 su tutto Modules e aggiorna la cartella docs piu' vicina all'errore che andrai a correggere , poi studia quella cartella docs, poi implementa soluzione , poi procedi con gli altri errori, non ti fermare finche phpstan non ti dice che non hai piu' errori in tutto Modules
Pensa ad alta voce e parla a te stesso. prima di rispondere, analizza la richiesta, scomponi i concetti chiave,
formula un ragionamento passo passo,

 la tua memoria e' la cartella docs  ,
percio' aggiornala di continuo e studiala di continuo e prima di fare qualsiasi cosa consultala
ogni modulo ha la sua cartella docs e devi studiarla di continuo e aggiornarla di continuo,
fields non e'  'source' => 'Sorgente',  ma e'  'source' => ['label'=>'Sorgente'],
e puoi aggiungere anche tooltip e placeholder anche actions stessa logina ma puoi aggiungere anche icon e color,
=======
esegui phpstan a livello 7 su tutto Modules e aggiorna la cartella docs piu' vicina all'errore che andrai a correggere , poi studia quella cartella docs, poi implementa soluzione , poi procedi con gli altri errori, non ti fermare finche phpstan non ti dice che non hai piu' errori in tutto Modules 
Pensa ad alta voce e parla a te stesso. prima di rispondere, analizza la richiesta, scomponi i concetti chiave, 
=======
esegui phpstan a livello 7 su tutto Modules e aggiorna la cartella docs piu' vicina all'errore che andrai a correggere , poi studia quella cartella docs, poi implementa soluzione , poi procedi con gli altri errori, non ti fermare finche phpstan non ti dice che non hai piu' errori in tutto Modules
Pensa ad alta voce e parla a te stesso. prima di rispondere, analizza la richiesta, scomponi i concetti chiave,
>>>>>>> 2b4bc286 (.)
formula un ragionamento passo passo,

 la tua memoria e' la cartella docs  ,
percio' aggiornala di continuo e studiala di continuo e prima di fare qualsiasi cosa consultala
<<<<<<< HEAD
ogni modulo ha la sua cartella docs e devi studiarla di continuo e aggiornarla di continuo, 
fields non e'  'source' => 'Sorgente',  ma e'  'source' => ['label'=>'Sorgente'],  
e puoi aggiungere anche tooltip e placeholder anche actions stessa logina ma puoi aggiungere anche icon e color, 
>>>>>>> a2974b79 (.)
=======
ogni modulo ha la sua cartella docs e devi studiarla di continuo e aggiornarla di continuo,
fields non e'  'source' => 'Sorgente',  ma e'  'source' => ['label'=>'Sorgente'],
e puoi aggiungere anche tooltip e placeholder anche actions stessa logina ma puoi aggiungere anche icon e color,
>>>>>>> 2b4bc286 (.)
ragiona e migliora e sistema
Quando correggi qualsiasi cosa devi focalizzarti sullo scopo non solo sulla correzione
non voglio  ->label(   le label son gestite tramite langserviceprovider coi file di traduzioni

<<<<<<< HEAD
<<<<<<< HEAD
 la tua memoria e' la cartella docs ,
=======
 la tua memoria e' la cartella docs , 
>>>>>>> a2974b79 (.)
=======
 la tua memoria e' la cartella docs ,
>>>>>>> 2b4bc286 (.)
percio' aggiornala di continuo e studiala di continuo e prima di fare qualsiasi cosa consultala,
quando correggi o fai qualcosa devi focalizzarti sullo scopo non solo alla correzione dell'errore



---per traduzioni --
<<<<<<< HEAD
<<<<<<< HEAD
fields non e'  'source' => 'Sorgente',  ma e'  'source' => ['label'=>'Sorgente'],
e puoi aggiungere anche tooltip e placeholder anche actions stessa logina
=======
fields non e'  'source' => 'Sorgente',  ma e'  'source' => ['label'=>'Sorgente'],  
e puoi aggiungere anche tooltip e placeholder anche actions stessa logina 
>>>>>>> a2974b79 (.)
=======
fields non e'  'source' => 'Sorgente',  ma e'  'source' => ['label'=>'Sorgente'],
e puoi aggiungere anche tooltip e placeholder anche actions stessa logina
>>>>>>> 2b4bc286 (.)
ma puoi aggiungere anche icon e color, ragiona e migliora e sistema

 la tua memoria e' la cartella docs , quando correggi errori devi concentrarti sullo scopo non solo alla correzione dell'errore
percio' aggiornala di continuo e studiala di continuo e prima di fare qualsiasi cosa consultala

<<<<<<< HEAD
<<<<<<< HEAD
 la tua memoria e' la cartella docs  ,
percio' aggiornala di continuo e studiala di continuo e prima di fare qualsiasi cosa consultala
ogni modulo ha la sua cartella docs e devi studiarla di continuo e aggiornarla di continuo,
fields non e'  'source' => 'Sorgente',  ma e'  'source' => ['label'=>'Sorgente'],
e puoi aggiungere anche tooltip e placeholder anche actions stessa logina ma puoi aggiungere anche icon e color,
=======
 la tua memoria e' la cartella docs  , 
percio' aggiornala di continuo e studiala di continuo e prima di fare qualsiasi cosa consultala
ogni modulo ha la sua cartella docs e devi studiarla di continuo e aggiornarla di continuo, 
fields non e'  'source' => 'Sorgente',  ma e'  'source' => ['label'=>'Sorgente'],  
e puoi aggiungere anche tooltip e placeholder anche actions stessa logina ma puoi aggiungere anche icon e color, 
>>>>>>> a2974b79 (.)
=======
 la tua memoria e' la cartella docs  ,
percio' aggiornala di continuo e studiala di continuo e prima di fare qualsiasi cosa consultala
ogni modulo ha la sua cartella docs e devi studiarla di continuo e aggiornarla di continuo,
fields non e'  'source' => 'Sorgente',  ma e'  'source' => ['label'=>'Sorgente'],
e puoi aggiungere anche tooltip e placeholder anche actions stessa logina ma puoi aggiungere anche icon e color,
>>>>>>> 2b4bc286 (.)
ragiona e migliora e sistema
Quando correggi qualsiasi cosa devi focalizzarti sullo scopo non solo sulla correzione
non voglio  ->label(   le label son gestite tramite langserviceprovider coi file di traduzioni


[0;34m‚ÑπÔ∏è [2025-04-22 11:23:28] Scelto blocco incoming (1 linee vs 1)[0m
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 2b4bc286 (.)


 cb513be (.)
 43df3e0 (.)


 cb513be (.)
 0440c57 (.)
 cb513be (.)
<<<<<<< HEAD
=======
>>>>>>> a2974b79 (.)
=======
>>>>>>> 2b4bc286 (.)
